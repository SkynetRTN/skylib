# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_an_engine')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_an_engine')
    _an_engine = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_an_engine', [dirname(__file__)])
        except ImportError:
            import _an_engine
            return _an_engine
        try:
            _mod = imp.load_module('_an_engine', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _an_engine = swig_import_helper()
    del swig_import_helper
else:
    import _an_engine
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class DoubleArray(_object):
    """Proxy of C DoubleArray struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        """__init__(DoubleArray self, size_t nelements) -> DoubleArray"""
        this = _an_engine.new_DoubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_DoubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        """__getitem__(DoubleArray self, size_t index) -> double"""
        return _an_engine.DoubleArray___getitem__(self, index)


    def __setitem__(self, index, value):
        """__setitem__(DoubleArray self, size_t index, double value)"""
        return _an_engine.DoubleArray___setitem__(self, index, value)


    def cast(self):
        """cast(DoubleArray self) -> double *"""
        return _an_engine.DoubleArray_cast(self)


    def frompointer(t):
        """frompointer(double * t) -> DoubleArray"""
        return _an_engine.DoubleArray_frompointer(t)

    frompointer = staticmethod(frompointer)
DoubleArray_swigregister = _an_engine.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

def DoubleArray_frompointer(t):
    """DoubleArray_frompointer(double * t) -> DoubleArray"""
    return _an_engine.DoubleArray_frompointer(t)

class IntArray(_object):
    """Proxy of C IntArray struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        """__init__(IntArray self, size_t nelements) -> IntArray"""
        this = _an_engine.new_IntArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_IntArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        """__getitem__(IntArray self, size_t index) -> int"""
        return _an_engine.IntArray___getitem__(self, index)


    def __setitem__(self, index, value):
        """__setitem__(IntArray self, size_t index, int value)"""
        return _an_engine.IntArray___setitem__(self, index, value)


    def cast(self):
        """cast(IntArray self) -> int *"""
        return _an_engine.IntArray_cast(self)


    def frompointer(t):
        """frompointer(int * t) -> IntArray"""
        return _an_engine.IntArray_frompointer(t)

    frompointer = staticmethod(frompointer)
IntArray_swigregister = _an_engine.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(t):
    """IntArray_frompointer(int * t) -> IntArray"""
    return _an_engine.IntArray_frompointer(t)

class UIntArray(_object):
    """Proxy of C UIntArray struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        """__init__(UIntArray self, size_t nelements) -> UIntArray"""
        this = _an_engine.new_UIntArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_UIntArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        """__getitem__(UIntArray self, size_t index) -> unsigned int"""
        return _an_engine.UIntArray___getitem__(self, index)


    def __setitem__(self, index, value):
        """__setitem__(UIntArray self, size_t index, unsigned int value)"""
        return _an_engine.UIntArray___setitem__(self, index, value)


    def cast(self):
        """cast(UIntArray self) -> unsigned int *"""
        return _an_engine.UIntArray_cast(self)


    def frompointer(t):
        """frompointer(unsigned int * t) -> UIntArray"""
        return _an_engine.UIntArray_frompointer(t)

    frompointer = staticmethod(frompointer)
UIntArray_swigregister = _an_engine.UIntArray_swigregister
UIntArray_swigregister(UIntArray)

def UIntArray_frompointer(t):
    """UIntArray_frompointer(unsigned int * t) -> UIntArray"""
    return _an_engine.UIntArray_frompointer(t)


def voidp_to_doublep(x):
    """voidp_to_doublep(void * x) -> double *"""
    return _an_engine.voidp_to_doublep(x)

def voidp_to_intp(x):
    """voidp_to_intp(void * x) -> int *"""
    return _an_engine.voidp_to_intp(x)

def voidp_to_uintp(x):
    """voidp_to_uintp(void * x) -> unsigned int *"""
    return _an_engine.voidp_to_uintp(x)
TRUE = _an_engine.TRUE
FALSE = _an_engine.FALSE
DEFAULT_INDEX_JITTER = _an_engine.DEFAULT_INDEX_JITTER
class index_t(_object):
    """Proxy of C index_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, index_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, index_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["codekd"] = _an_engine.index_t_codekd_set
    __swig_getmethods__["codekd"] = _an_engine.index_t_codekd_get
    if _newclass:
        codekd = _swig_property(_an_engine.index_t_codekd_get, _an_engine.index_t_codekd_set)
    __swig_setmethods__["quads"] = _an_engine.index_t_quads_set
    __swig_getmethods__["quads"] = _an_engine.index_t_quads_get
    if _newclass:
        quads = _swig_property(_an_engine.index_t_quads_get, _an_engine.index_t_quads_set)
    __swig_setmethods__["starkd"] = _an_engine.index_t_starkd_set
    __swig_getmethods__["starkd"] = _an_engine.index_t_starkd_get
    if _newclass:
        starkd = _swig_property(_an_engine.index_t_starkd_get, _an_engine.index_t_starkd_set)
    __swig_setmethods__["fits"] = _an_engine.index_t_fits_set
    __swig_getmethods__["fits"] = _an_engine.index_t_fits_get
    if _newclass:
        fits = _swig_property(_an_engine.index_t_fits_get, _an_engine.index_t_fits_set)
    __swig_setmethods__["codefn"] = _an_engine.index_t_codefn_set
    __swig_getmethods__["codefn"] = _an_engine.index_t_codefn_get
    if _newclass:
        codefn = _swig_property(_an_engine.index_t_codefn_get, _an_engine.index_t_codefn_set)
    __swig_setmethods__["quadfn"] = _an_engine.index_t_quadfn_set
    __swig_getmethods__["quadfn"] = _an_engine.index_t_quadfn_get
    if _newclass:
        quadfn = _swig_property(_an_engine.index_t_quadfn_get, _an_engine.index_t_quadfn_set)
    __swig_setmethods__["starfn"] = _an_engine.index_t_starfn_set
    __swig_getmethods__["starfn"] = _an_engine.index_t_starfn_get
    if _newclass:
        starfn = _swig_property(_an_engine.index_t_starfn_get, _an_engine.index_t_starfn_set)
    __swig_setmethods__["indexname"] = _an_engine.index_t_indexname_set
    __swig_getmethods__["indexname"] = _an_engine.index_t_indexname_get
    if _newclass:
        indexname = _swig_property(_an_engine.index_t_indexname_get, _an_engine.index_t_indexname_set)
    __swig_setmethods__["indexid"] = _an_engine.index_t_indexid_set
    __swig_getmethods__["indexid"] = _an_engine.index_t_indexid_get
    if _newclass:
        indexid = _swig_property(_an_engine.index_t_indexid_get, _an_engine.index_t_indexid_set)
    __swig_setmethods__["healpix"] = _an_engine.index_t_healpix_set
    __swig_getmethods__["healpix"] = _an_engine.index_t_healpix_get
    if _newclass:
        healpix = _swig_property(_an_engine.index_t_healpix_get, _an_engine.index_t_healpix_set)
    __swig_setmethods__["hpnside"] = _an_engine.index_t_hpnside_set
    __swig_getmethods__["hpnside"] = _an_engine.index_t_hpnside_get
    if _newclass:
        hpnside = _swig_property(_an_engine.index_t_hpnside_get, _an_engine.index_t_hpnside_set)
    __swig_setmethods__["index_jitter"] = _an_engine.index_t_index_jitter_set
    __swig_getmethods__["index_jitter"] = _an_engine.index_t_index_jitter_get
    if _newclass:
        index_jitter = _swig_property(_an_engine.index_t_index_jitter_get, _an_engine.index_t_index_jitter_set)
    __swig_setmethods__["cutnside"] = _an_engine.index_t_cutnside_set
    __swig_getmethods__["cutnside"] = _an_engine.index_t_cutnside_get
    if _newclass:
        cutnside = _swig_property(_an_engine.index_t_cutnside_get, _an_engine.index_t_cutnside_set)
    __swig_setmethods__["cutnsweep"] = _an_engine.index_t_cutnsweep_set
    __swig_getmethods__["cutnsweep"] = _an_engine.index_t_cutnsweep_get
    if _newclass:
        cutnsweep = _swig_property(_an_engine.index_t_cutnsweep_get, _an_engine.index_t_cutnsweep_set)
    __swig_setmethods__["cutdedup"] = _an_engine.index_t_cutdedup_set
    __swig_getmethods__["cutdedup"] = _an_engine.index_t_cutdedup_get
    if _newclass:
        cutdedup = _swig_property(_an_engine.index_t_cutdedup_get, _an_engine.index_t_cutdedup_set)
    __swig_setmethods__["cutband"] = _an_engine.index_t_cutband_set
    __swig_getmethods__["cutband"] = _an_engine.index_t_cutband_get
    if _newclass:
        cutband = _swig_property(_an_engine.index_t_cutband_get, _an_engine.index_t_cutband_set)
    __swig_setmethods__["cutmargin"] = _an_engine.index_t_cutmargin_set
    __swig_getmethods__["cutmargin"] = _an_engine.index_t_cutmargin_get
    if _newclass:
        cutmargin = _swig_property(_an_engine.index_t_cutmargin_get, _an_engine.index_t_cutmargin_set)
    __swig_setmethods__["circle"] = _an_engine.index_t_circle_set
    __swig_getmethods__["circle"] = _an_engine.index_t_circle_get
    if _newclass:
        circle = _swig_property(_an_engine.index_t_circle_get, _an_engine.index_t_circle_set)
    __swig_setmethods__["cx_less_than_dx"] = _an_engine.index_t_cx_less_than_dx_set
    __swig_getmethods__["cx_less_than_dx"] = _an_engine.index_t_cx_less_than_dx_get
    if _newclass:
        cx_less_than_dx = _swig_property(_an_engine.index_t_cx_less_than_dx_get, _an_engine.index_t_cx_less_than_dx_set)
    __swig_setmethods__["meanx_less_than_half"] = _an_engine.index_t_meanx_less_than_half_set
    __swig_getmethods__["meanx_less_than_half"] = _an_engine.index_t_meanx_less_than_half_get
    if _newclass:
        meanx_less_than_half = _swig_property(_an_engine.index_t_meanx_less_than_half_get, _an_engine.index_t_meanx_less_than_half_set)
    __swig_setmethods__["index_scale_upper"] = _an_engine.index_t_index_scale_upper_set
    __swig_getmethods__["index_scale_upper"] = _an_engine.index_t_index_scale_upper_get
    if _newclass:
        index_scale_upper = _swig_property(_an_engine.index_t_index_scale_upper_get, _an_engine.index_t_index_scale_upper_set)
    __swig_setmethods__["index_scale_lower"] = _an_engine.index_t_index_scale_lower_set
    __swig_getmethods__["index_scale_lower"] = _an_engine.index_t_index_scale_lower_get
    if _newclass:
        index_scale_lower = _swig_property(_an_engine.index_t_index_scale_lower_get, _an_engine.index_t_index_scale_lower_set)
    __swig_setmethods__["dimquads"] = _an_engine.index_t_dimquads_set
    __swig_getmethods__["dimquads"] = _an_engine.index_t_dimquads_get
    if _newclass:
        dimquads = _swig_property(_an_engine.index_t_dimquads_get, _an_engine.index_t_dimquads_set)
    __swig_setmethods__["nstars"] = _an_engine.index_t_nstars_set
    __swig_getmethods__["nstars"] = _an_engine.index_t_nstars_get
    if _newclass:
        nstars = _swig_property(_an_engine.index_t_nstars_get, _an_engine.index_t_nstars_set)
    __swig_setmethods__["nquads"] = _an_engine.index_t_nquads_set
    __swig_getmethods__["nquads"] = _an_engine.index_t_nquads_get
    if _newclass:
        nquads = _swig_property(_an_engine.index_t_nquads_get, _an_engine.index_t_nquads_set)

    def __init__(self):
        """__init__(index_t self) -> index_t"""
        this = _an_engine.new_index_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_index_t
    __del__ = lambda self: None
index_t_swigregister = _an_engine.index_t_swigregister
index_t_swigregister(index_t)


def index_dimquads(indx):
    """index_dimquads(index_t indx) -> int"""
    return _an_engine.index_dimquads(indx)

def index_overlaps_scale_range(indx, quadlo, quadhi):
    """index_overlaps_scale_range(index_t indx, double quadlo, double quadhi) -> anbool"""
    return _an_engine.index_overlaps_scale_range(indx, quadlo, quadhi)

def index_is_within_range(indx, ra, dec, radius_deg):
    """index_is_within_range(index_t indx, double ra, double dec, double radius_deg) -> anbool"""
    return _an_engine.index_is_within_range(indx, ra, dec, radius_deg)

def index_get_meta(filename, indx):
    """index_get_meta(char const * filename, index_t indx) -> int"""
    return _an_engine.index_get_meta(filename, indx)

def index_is_file_index(filename):
    """index_is_file_index(char const * filename) -> anbool"""
    return _an_engine.index_is_file_index(filename)

def index_get_quad_filename(indexname):
    """index_get_quad_filename(char const * indexname) -> char *"""
    return _an_engine.index_get_quad_filename(indexname)

def index_get_qidx_filename(indexname):
    """index_get_qidx_filename(char const * indexname) -> char *"""
    return _an_engine.index_get_qidx_filename(indexname)
INDEX_ONLY_LOAD_METADATA = _an_engine.INDEX_ONLY_LOAD_METADATA

def index_get_quad_dim(index):
    """index_get_quad_dim(index_t index) -> int"""
    return _an_engine.index_get_quad_dim(index)

def index_get_code_dim(index):
    """index_get_code_dim(index_t index) -> int"""
    return _an_engine.index_get_code_dim(index)

def index_nquads(index):
    """index_nquads(index_t index) -> int"""
    return _an_engine.index_nquads(index)

def index_nstars(index):
    """index_nstars(index_t index) -> int"""
    return _an_engine.index_nstars(index)

def index_build_from(codekd, quads, starkd):
    """index_build_from(codetree_t * codekd, quadfile_t * quads, startree_t starkd) -> index_t"""
    return _an_engine.index_build_from(codekd, quads, starkd)

def index_load(indexname, flags, dest):
    """index_load(char const * indexname, int flags, index_t dest) -> index_t"""
    return _an_engine.index_load(indexname, flags, dest)

def index_unload(index):
    """index_unload(index_t index)"""
    return _an_engine.index_unload(index)

def index_reload(index):
    """index_reload(index_t index) -> int"""
    return _an_engine.index_reload(index)

def index_close_fds(index):
    """index_close_fds(index_t index) -> int"""
    return _an_engine.index_close_fds(index)

def index_close(index):
    """index_close(index_t index)"""
    return _an_engine.index_close(index)

def index_free(index):
    """index_free(index_t index)"""
    return _an_engine.index_free(index)

def index_get_missing_cut_params(indexid, band):
    """index_get_missing_cut_params(int indexid, char ** band) -> int"""
    return _an_engine.index_get_missing_cut_params(indexid, band)
FITSVALSZ = _an_engine.FITSVALSZ
QFITS_INVALIDTABLE = _an_engine.QFITS_INVALIDTABLE
QFITS_BINTABLE = _an_engine.QFITS_BINTABLE
QFITS_ASCIITABLE = _an_engine.QFITS_ASCIITABLE
TFITS_ASCII_TYPE_A = _an_engine.TFITS_ASCII_TYPE_A
TFITS_ASCII_TYPE_D = _an_engine.TFITS_ASCII_TYPE_D
TFITS_ASCII_TYPE_E = _an_engine.TFITS_ASCII_TYPE_E
TFITS_ASCII_TYPE_F = _an_engine.TFITS_ASCII_TYPE_F
TFITS_ASCII_TYPE_I = _an_engine.TFITS_ASCII_TYPE_I
TFITS_BIN_TYPE_A = _an_engine.TFITS_BIN_TYPE_A
TFITS_BIN_TYPE_B = _an_engine.TFITS_BIN_TYPE_B
TFITS_BIN_TYPE_C = _an_engine.TFITS_BIN_TYPE_C
TFITS_BIN_TYPE_D = _an_engine.TFITS_BIN_TYPE_D
TFITS_BIN_TYPE_E = _an_engine.TFITS_BIN_TYPE_E
TFITS_BIN_TYPE_I = _an_engine.TFITS_BIN_TYPE_I
TFITS_BIN_TYPE_J = _an_engine.TFITS_BIN_TYPE_J
TFITS_BIN_TYPE_K = _an_engine.TFITS_BIN_TYPE_K
TFITS_BIN_TYPE_L = _an_engine.TFITS_BIN_TYPE_L
TFITS_BIN_TYPE_M = _an_engine.TFITS_BIN_TYPE_M
TFITS_BIN_TYPE_P = _an_engine.TFITS_BIN_TYPE_P
TFITS_BIN_TYPE_X = _an_engine.TFITS_BIN_TYPE_X
TFITS_BIN_TYPE_UNKNOWN = _an_engine.TFITS_BIN_TYPE_UNKNOWN
class qfits_col(_object):
    """Proxy of C qfits_col struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qfits_col, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qfits_col, name)
    __repr__ = _swig_repr
    __swig_setmethods__["atom_nb"] = _an_engine.qfits_col_atom_nb_set
    __swig_getmethods__["atom_nb"] = _an_engine.qfits_col_atom_nb_get
    if _newclass:
        atom_nb = _swig_property(_an_engine.qfits_col_atom_nb_get, _an_engine.qfits_col_atom_nb_set)
    __swig_setmethods__["atom_dec_nb"] = _an_engine.qfits_col_atom_dec_nb_set
    __swig_getmethods__["atom_dec_nb"] = _an_engine.qfits_col_atom_dec_nb_get
    if _newclass:
        atom_dec_nb = _swig_property(_an_engine.qfits_col_atom_dec_nb_get, _an_engine.qfits_col_atom_dec_nb_set)
    __swig_setmethods__["atom_size"] = _an_engine.qfits_col_atom_size_set
    __swig_getmethods__["atom_size"] = _an_engine.qfits_col_atom_size_get
    if _newclass:
        atom_size = _swig_property(_an_engine.qfits_col_atom_size_get, _an_engine.qfits_col_atom_size_set)
    __swig_setmethods__["atom_type"] = _an_engine.qfits_col_atom_type_set
    __swig_getmethods__["atom_type"] = _an_engine.qfits_col_atom_type_get
    if _newclass:
        atom_type = _swig_property(_an_engine.qfits_col_atom_type_get, _an_engine.qfits_col_atom_type_set)
    __swig_setmethods__["tlabel"] = _an_engine.qfits_col_tlabel_set
    __swig_getmethods__["tlabel"] = _an_engine.qfits_col_tlabel_get
    if _newclass:
        tlabel = _swig_property(_an_engine.qfits_col_tlabel_get, _an_engine.qfits_col_tlabel_set)
    __swig_setmethods__["tunit"] = _an_engine.qfits_col_tunit_set
    __swig_getmethods__["tunit"] = _an_engine.qfits_col_tunit_get
    if _newclass:
        tunit = _swig_property(_an_engine.qfits_col_tunit_get, _an_engine.qfits_col_tunit_set)
    __swig_setmethods__["nullval"] = _an_engine.qfits_col_nullval_set
    __swig_getmethods__["nullval"] = _an_engine.qfits_col_nullval_get
    if _newclass:
        nullval = _swig_property(_an_engine.qfits_col_nullval_get, _an_engine.qfits_col_nullval_set)
    __swig_setmethods__["tdisp"] = _an_engine.qfits_col_tdisp_set
    __swig_getmethods__["tdisp"] = _an_engine.qfits_col_tdisp_get
    if _newclass:
        tdisp = _swig_property(_an_engine.qfits_col_tdisp_get, _an_engine.qfits_col_tdisp_set)
    __swig_setmethods__["zero_present"] = _an_engine.qfits_col_zero_present_set
    __swig_getmethods__["zero_present"] = _an_engine.qfits_col_zero_present_get
    if _newclass:
        zero_present = _swig_property(_an_engine.qfits_col_zero_present_get, _an_engine.qfits_col_zero_present_set)
    __swig_setmethods__["zero"] = _an_engine.qfits_col_zero_set
    __swig_getmethods__["zero"] = _an_engine.qfits_col_zero_get
    if _newclass:
        zero = _swig_property(_an_engine.qfits_col_zero_get, _an_engine.qfits_col_zero_set)
    __swig_setmethods__["scale_present"] = _an_engine.qfits_col_scale_present_set
    __swig_getmethods__["scale_present"] = _an_engine.qfits_col_scale_present_get
    if _newclass:
        scale_present = _swig_property(_an_engine.qfits_col_scale_present_get, _an_engine.qfits_col_scale_present_set)
    __swig_setmethods__["scale"] = _an_engine.qfits_col_scale_set
    __swig_getmethods__["scale"] = _an_engine.qfits_col_scale_get
    if _newclass:
        scale = _swig_property(_an_engine.qfits_col_scale_get, _an_engine.qfits_col_scale_set)
    __swig_setmethods__["off_beg"] = _an_engine.qfits_col_off_beg_set
    __swig_getmethods__["off_beg"] = _an_engine.qfits_col_off_beg_get
    if _newclass:
        off_beg = _swig_property(_an_engine.qfits_col_off_beg_get, _an_engine.qfits_col_off_beg_set)
    __swig_setmethods__["readable"] = _an_engine.qfits_col_readable_set
    __swig_getmethods__["readable"] = _an_engine.qfits_col_readable_get
    if _newclass:
        readable = _swig_property(_an_engine.qfits_col_readable_get, _an_engine.qfits_col_readable_set)

    def __init__(self):
        """__init__(qfits_col self) -> qfits_col"""
        this = _an_engine.new_qfits_col()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_qfits_col
    __del__ = lambda self: None
qfits_col_swigregister = _an_engine.qfits_col_swigregister
qfits_col_swigregister(qfits_col)

class qfits_table(_object):
    """Proxy of C qfits_table struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qfits_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qfits_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _an_engine.qfits_table_filename_set
    __swig_getmethods__["filename"] = _an_engine.qfits_table_filename_get
    if _newclass:
        filename = _swig_property(_an_engine.qfits_table_filename_get, _an_engine.qfits_table_filename_set)
    __swig_setmethods__["tab_t"] = _an_engine.qfits_table_tab_t_set
    __swig_getmethods__["tab_t"] = _an_engine.qfits_table_tab_t_get
    if _newclass:
        tab_t = _swig_property(_an_engine.qfits_table_tab_t_get, _an_engine.qfits_table_tab_t_set)
    __swig_setmethods__["tab_w"] = _an_engine.qfits_table_tab_w_set
    __swig_getmethods__["tab_w"] = _an_engine.qfits_table_tab_w_get
    if _newclass:
        tab_w = _swig_property(_an_engine.qfits_table_tab_w_get, _an_engine.qfits_table_tab_w_set)
    __swig_setmethods__["nc"] = _an_engine.qfits_table_nc_set
    __swig_getmethods__["nc"] = _an_engine.qfits_table_nc_get
    if _newclass:
        nc = _swig_property(_an_engine.qfits_table_nc_get, _an_engine.qfits_table_nc_set)
    __swig_setmethods__["nr"] = _an_engine.qfits_table_nr_set
    __swig_getmethods__["nr"] = _an_engine.qfits_table_nr_get
    if _newclass:
        nr = _swig_property(_an_engine.qfits_table_nr_get, _an_engine.qfits_table_nr_set)
    __swig_setmethods__["col"] = _an_engine.qfits_table_col_set
    __swig_getmethods__["col"] = _an_engine.qfits_table_col_get
    if _newclass:
        col = _swig_property(_an_engine.qfits_table_col_get, _an_engine.qfits_table_col_set)

    def __init__(self):
        """__init__(qfits_table self) -> qfits_table"""
        this = _an_engine.new_qfits_table()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_qfits_table
    __del__ = lambda self: None
qfits_table_swigregister = _an_engine.qfits_table_swigregister
qfits_table_swigregister(qfits_table)


def qfits_table_copy(t):
    """qfits_table_copy(qfits_table t) -> qfits_table"""
    return _an_engine.qfits_table_copy(t)

def qfits_table_prim_header_default():
    """qfits_table_prim_header_default() -> qfits_header *"""
    return _an_engine.qfits_table_prim_header_default()

def qfits_table_ext_header_default(arg1):
    """qfits_table_ext_header_default(qfits_table arg1) -> qfits_header *"""
    return _an_engine.qfits_table_ext_header_default(arg1)

def qfits_table_new(arg1, arg2, arg3, arg4, arg5):
    """qfits_table_new(char const * arg1, int arg2, int arg3, int arg4, int arg5) -> qfits_table"""
    return _an_engine.qfits_table_new(arg1, arg2, arg3, arg4, arg5)

def qfits_col_fill(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    """qfits_col_fill(qfits_col arg1, int arg2, int arg3, int arg4, tfits_type arg5, char const * arg6, char const * arg7, char const * arg8, char const * arg9, int arg10, float arg11, int arg12, float arg13, int arg14) -> int"""
    return _an_engine.qfits_col_fill(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def qfits_table_open2(hdr, offset_beg, data_size, filename, xtnum):
    """qfits_table_open2(qfits_header const * hdr, off_t offset_beg, size_t data_size, char const * filename, int xtnum) -> qfits_table"""
    return _an_engine.qfits_table_open2(hdr, offset_beg, data_size, filename, xtnum)

def qfits_table_close(arg1):
    """qfits_table_close(qfits_table arg1)"""
    return _an_engine.qfits_table_close(arg1)

def qfits_query_column(arg1, arg2):
    """qfits_query_column(qfits_table arg1, int arg2) -> unsigned char *"""
    return _an_engine.qfits_query_column(arg1, arg2)

def qfits_query_column_seq(arg1, arg2, arg3, arg4):
    """qfits_query_column_seq(qfits_table arg1, int arg2, int arg3, int arg4) -> unsigned char *"""
    return _an_engine.qfits_query_column_seq(arg1, arg2, arg3, arg4)

def qfits_query_column_data(arg1, arg2, arg4):
    """qfits_query_column_data(qfits_table arg1, int arg2, void const * arg4) -> void *"""
    return _an_engine.qfits_query_column_data(arg1, arg2, arg4)

def qfits_query_column_seq_data(arg1, arg2, arg3, arg4, arg5):
    """qfits_query_column_seq_data(qfits_table arg1, int arg2, int arg3, int arg4, void const * arg5) -> void *"""
    return _an_engine.qfits_query_column_seq_data(arg1, arg2, arg3, arg4, arg5)

def qfits_query_column_seq_to_array_inds(th, colnum, Ninds, destination, dest_stride):
    """qfits_query_column_seq_to_array_inds(qfits_table th, int colnum, int Ninds, unsigned char * destination, int dest_stride) -> int"""
    return _an_engine.qfits_query_column_seq_to_array_inds(th, colnum, Ninds, destination, dest_stride)

def qfits_query_column_seq_to_array(th, colnum, start_ind, nb_rows, destination, dest_stride):
    """qfits_query_column_seq_to_array(qfits_table th, int colnum, int start_ind, int nb_rows, unsigned char * destination, int dest_stride) -> int"""
    return _an_engine.qfits_query_column_seq_to_array(th, colnum, start_ind, nb_rows, destination, dest_stride)

def qfits_query_column_seq_to_array_no_endian_swap(th, colnum, start_ind, nb_rows, destination, dest_stride):
    """qfits_query_column_seq_to_array_no_endian_swap(qfits_table th, int colnum, int start_ind, int nb_rows, unsigned char * destination, int dest_stride) -> int"""
    return _an_engine.qfits_query_column_seq_to_array_no_endian_swap(th, colnum, start_ind, nb_rows, destination, dest_stride)

def qfits_query_column_nulls(arg1, arg2):
    """qfits_query_column_nulls(qfits_table arg1, int arg2) -> int *"""
    return _an_engine.qfits_query_column_nulls(arg1, arg2)

def qfits_compute_table_width(th):
    """qfits_compute_table_width(qfits_table th) -> int"""
    return _an_engine.qfits_compute_table_width(th)

def qfits_table_append_xtension(arg1, arg2, arg3):
    """qfits_table_append_xtension(FILE * arg1, qfits_table arg2, void const ** arg3) -> int"""
    return _an_engine.qfits_table_append_xtension(arg1, arg2, arg3)

def qfits_table_append_xtension_hdr(arg1, arg2, arg3, arg4):
    """qfits_table_append_xtension_hdr(FILE * arg1, qfits_table arg2, void const ** arg3, qfits_header const * arg4) -> int"""
    return _an_engine.qfits_table_append_xtension_hdr(arg1, arg2, arg3, arg4)

def qfits_table_field_to_string(arg1, arg2, arg3, arg4):
    """qfits_table_field_to_string(qfits_table arg1, int arg2, int arg3, int arg4) -> char *"""
    return _an_engine.qfits_table_field_to_string(arg1, arg2, arg3, arg4)

def qfits_table_get_col(t, i):
    """qfits_table_get_col(qfits_table t, int i) -> qfits_col"""
    return _an_engine.qfits_table_get_col(t, i)

def qfits_table_interpret_type(str, type, table_type):
    """qfits_table_interpret_type(char const * str, tfits_type * type, int table_type) -> int"""
    return _an_engine.qfits_table_interpret_type(str, type, table_type)

def qfits_is_table_header(hdr):
    """qfits_is_table_header(qfits_header const * hdr) -> int"""
    return _an_engine.qfits_is_table_header(hdr)
class fitstable_t(_object):
    """Proxy of C fitstable_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fitstable_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fitstable_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["anq"] = _an_engine.fitstable_t_anq_set
    __swig_getmethods__["anq"] = _an_engine.fitstable_t_anq_get
    if _newclass:
        anq = _swig_property(_an_engine.fitstable_t_anq_get, _an_engine.fitstable_t_anq_set)
    __swig_setmethods__["table"] = _an_engine.fitstable_t_table_set
    __swig_getmethods__["table"] = _an_engine.fitstable_t_table_get
    if _newclass:
        table = _swig_property(_an_engine.fitstable_t_table_get, _an_engine.fitstable_t_table_set)
    __swig_setmethods__["header"] = _an_engine.fitstable_t_header_set
    __swig_getmethods__["header"] = _an_engine.fitstable_t_header_get
    if _newclass:
        header = _swig_property(_an_engine.fitstable_t_header_get, _an_engine.fitstable_t_header_set)
    __swig_setmethods__["primheader"] = _an_engine.fitstable_t_primheader_set
    __swig_getmethods__["primheader"] = _an_engine.fitstable_t_primheader_get
    if _newclass:
        primheader = _swig_property(_an_engine.fitstable_t_primheader_get, _an_engine.fitstable_t_primheader_set)
    __swig_setmethods__["cols"] = _an_engine.fitstable_t_cols_set
    __swig_getmethods__["cols"] = _an_engine.fitstable_t_cols_get
    if _newclass:
        cols = _swig_property(_an_engine.fitstable_t_cols_get, _an_engine.fitstable_t_cols_set)
    __swig_setmethods__["extension"] = _an_engine.fitstable_t_extension_set
    __swig_getmethods__["extension"] = _an_engine.fitstable_t_extension_get
    if _newclass:
        extension = _swig_property(_an_engine.fitstable_t_extension_get, _an_engine.fitstable_t_extension_set)
    __swig_setmethods__["fn"] = _an_engine.fitstable_t_fn_set
    __swig_getmethods__["fn"] = _an_engine.fitstable_t_fn_get
    if _newclass:
        fn = _swig_property(_an_engine.fitstable_t_fn_get, _an_engine.fitstable_t_fn_set)
    __swig_setmethods__["inmemory"] = _an_engine.fitstable_t_inmemory_set
    __swig_getmethods__["inmemory"] = _an_engine.fitstable_t_inmemory_get
    if _newclass:
        inmemory = _swig_property(_an_engine.fitstable_t_inmemory_get, _an_engine.fitstable_t_inmemory_set)
    __swig_setmethods__["rows"] = _an_engine.fitstable_t_rows_set
    __swig_getmethods__["rows"] = _an_engine.fitstable_t_rows_get
    if _newclass:
        rows = _swig_property(_an_engine.fitstable_t_rows_get, _an_engine.fitstable_t_rows_set)
    __swig_setmethods__["extensions"] = _an_engine.fitstable_t_extensions_set
    __swig_getmethods__["extensions"] = _an_engine.fitstable_t_extensions_get
    if _newclass:
        extensions = _swig_property(_an_engine.fitstable_t_extensions_get, _an_engine.fitstable_t_extensions_set)
    __swig_setmethods__["fid"] = _an_engine.fitstable_t_fid_set
    __swig_getmethods__["fid"] = _an_engine.fitstable_t_fid_get
    if _newclass:
        fid = _swig_property(_an_engine.fitstable_t_fid_get, _an_engine.fitstable_t_fid_set)
    __swig_setmethods__["end_header_offset"] = _an_engine.fitstable_t_end_header_offset_set
    __swig_getmethods__["end_header_offset"] = _an_engine.fitstable_t_end_header_offset_get
    if _newclass:
        end_header_offset = _swig_property(_an_engine.fitstable_t_end_header_offset_get, _an_engine.fitstable_t_end_header_offset_set)
    __swig_setmethods__["table_offset"] = _an_engine.fitstable_t_table_offset_set
    __swig_getmethods__["table_offset"] = _an_engine.fitstable_t_table_offset_get
    if _newclass:
        table_offset = _swig_property(_an_engine.fitstable_t_table_offset_get, _an_engine.fitstable_t_table_offset_set)
    __swig_setmethods__["end_table_offset"] = _an_engine.fitstable_t_end_table_offset_set
    __swig_getmethods__["end_table_offset"] = _an_engine.fitstable_t_end_table_offset_get
    if _newclass:
        end_table_offset = _swig_property(_an_engine.fitstable_t_end_table_offset_get, _an_engine.fitstable_t_end_table_offset_set)
    __swig_setmethods__["br"] = _an_engine.fitstable_t_br_set
    __swig_getmethods__["br"] = _an_engine.fitstable_t_br_get
    if _newclass:
        br = _swig_property(_an_engine.fitstable_t_br_get, _an_engine.fitstable_t_br_set)
    __swig_setmethods__["readfid"] = _an_engine.fitstable_t_readfid_set
    __swig_getmethods__["readfid"] = _an_engine.fitstable_t_readfid_get
    if _newclass:
        readfid = _swig_property(_an_engine.fitstable_t_readfid_get, _an_engine.fitstable_t_readfid_set)
    __swig_setmethods__["postprocess_read_structs"] = _an_engine.fitstable_t_postprocess_read_structs_set
    __swig_getmethods__["postprocess_read_structs"] = _an_engine.fitstable_t_postprocess_read_structs_get
    if _newclass:
        postprocess_read_structs = _swig_property(_an_engine.fitstable_t_postprocess_read_structs_get, _an_engine.fitstable_t_postprocess_read_structs_set)

    def __init__(self):
        """__init__(fitstable_t self) -> fitstable_t"""
        this = _an_engine.new_fitstable_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_fitstable_t
    __del__ = lambda self: None
fitstable_t_swigregister = _an_engine.fitstable_t_swigregister
fitstable_t_swigregister(fitstable_t)


def fitscolumn_int_type():
    """fitscolumn_int_type() -> tfits_type"""
    return _an_engine.fitscolumn_int_type()

def fitscolumn_double_type():
    """fitscolumn_double_type() -> tfits_type"""
    return _an_engine.fitscolumn_double_type()

def fitscolumn_float_type():
    """fitscolumn_float_type() -> tfits_type"""
    return _an_engine.fitscolumn_float_type()

def fitscolumn_char_type():
    """fitscolumn_char_type() -> tfits_type"""
    return _an_engine.fitscolumn_char_type()

def fitscolumn_boolean_type():
    """fitscolumn_boolean_type() -> tfits_type"""
    return _an_engine.fitscolumn_boolean_type()

def fitscolumn_u8_type():
    """fitscolumn_u8_type() -> tfits_type"""
    return _an_engine.fitscolumn_u8_type()

def fitscolumn_i16_type():
    """fitscolumn_i16_type() -> tfits_type"""
    return _an_engine.fitscolumn_i16_type()

def fitscolumn_i32_type():
    """fitscolumn_i32_type() -> tfits_type"""
    return _an_engine.fitscolumn_i32_type()

def fitscolumn_i64_type():
    """fitscolumn_i64_type() -> tfits_type"""
    return _an_engine.fitscolumn_i64_type()

def fitscolumn_bitfield_type():
    """fitscolumn_bitfield_type() -> tfits_type"""
    return _an_engine.fitscolumn_bitfield_type()

def fitscolumn_bool_type():
    """fitscolumn_bool_type() -> tfits_type"""
    return _an_engine.fitscolumn_bool_type()

def fitscolumn_any_type():
    """fitscolumn_any_type() -> tfits_type"""
    return _an_engine.fitscolumn_any_type()

def fitstable_open_in_memory():
    """fitstable_open_in_memory() -> fitstable_t"""
    return _an_engine.fitstable_open_in_memory()

def fitstable_switch_to_reading(tab):
    """fitstable_switch_to_reading(fitstable_t tab) -> int"""
    return _an_engine.fitstable_switch_to_reading(tab)

def fitstable_open(fn):
    """fitstable_open(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open(fn)

def fitstable_open_extension_2(fn, ext):
    """fitstable_open_extension_2(char const * fn, int ext) -> fitstable_t"""
    return _an_engine.fitstable_open_extension_2(fn, ext)

def fitstable_open_mixed(fn):
    """fitstable_open_mixed(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open_mixed(fn)

def fitstable_open_for_writing(fn):
    """fitstable_open_for_writing(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open_for_writing(fn)

def fitstable_open_for_appending(fn):
    """fitstable_open_for_appending(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open_for_appending(fn)

def fitstable_open_for_appending_to(fid):
    """fitstable_open_for_appending_to(FILE * fid) -> fitstable_t"""
    return _an_engine.fitstable_open_for_appending_to(fid)

def fitstable_n_extensions(t):
    """fitstable_n_extensions(fitstable_t t) -> int"""
    return _an_engine.fitstable_n_extensions(t)

def fitstable_append_to(t, fid):
    """fitstable_append_to(fitstable_t t, FILE * fid) -> int"""
    return _an_engine.fitstable_append_to(t, fid)

def fitstable_copy_columns(src, dest):
    """fitstable_copy_columns(fitstable_t src, fitstable_t dest)"""
    return _an_engine.fitstable_copy_columns(src, dest)

def fitstable_n_fits_columns(tab):
    """fitstable_n_fits_columns(fitstable_t tab) -> int"""
    return _an_engine.fitstable_n_fits_columns(tab)

def fitstable_add_fits_columns_as_struct(dest):
    """fitstable_add_fits_columns_as_struct(fitstable_t dest)"""
    return _an_engine.fitstable_add_fits_columns_as_struct(dest)

def fitstable_add_fits_columns_as_struct2(intab, outtab):
    """fitstable_add_fits_columns_as_struct2(fitstable_t intab, fitstable_t outtab)"""
    return _an_engine.fitstable_add_fits_columns_as_struct2(intab, outtab)

def fitstable_add_fits_columns_as_struct3(intab, outtab, columns, c_offset):
    """fitstable_add_fits_columns_as_struct3(fitstable_t intab, fitstable_t outtab, sl const * columns, int c_offset) -> int"""
    return _an_engine.fitstable_add_fits_columns_as_struct3(intab, outtab, columns, c_offset)

def fitstable_add_fits_columns_as_struct4(intab, outtab, columns, c_offset, fitstype):
    """fitstable_add_fits_columns_as_struct4(fitstable_t intab, fitstable_t outtab, sl const * columns, int c_offset, tfits_type fitstype) -> int"""
    return _an_engine.fitstable_add_fits_columns_as_struct4(intab, outtab, columns, c_offset, fitstype)

def fitstable_find_fits_column(t, colname, units, type):
    """fitstable_find_fits_column(fitstable_t t, char const * colname, char ** units, tfits_type * type) -> int"""
    return _an_engine.fitstable_find_fits_column(t, colname, units, type)

def fitstable_get_fits_column_names(t, lst):
    """fitstable_get_fits_column_names(fitstable_t t, sl * lst) -> sl *"""
    return _an_engine.fitstable_get_fits_column_names(t, lst)

def fitstable_get_N_fits_columns(t):
    """fitstable_get_N_fits_columns(fitstable_t t) -> int"""
    return _an_engine.fitstable_get_N_fits_columns(t)

def fitstable_get_fits_column_name(t, i):
    """fitstable_get_fits_column_name(fitstable_t t, int i) -> char const *"""
    return _an_engine.fitstable_get_fits_column_name(t, i)

def fitstable_get_fits_column_type(t, i):
    """fitstable_get_fits_column_type(fitstable_t t, int i) -> tfits_type"""
    return _an_engine.fitstable_get_fits_column_type(t, i)

def fitstable_get_fits_column_array_size(t, i):
    """fitstable_get_fits_column_array_size(fitstable_t t, int i) -> int"""
    return _an_engine.fitstable_get_fits_column_array_size(t, i)

def fitstable_open_extension(tab, ext):
    """fitstable_open_extension(fitstable_t tab, int ext) -> int"""
    return _an_engine.fitstable_open_extension(tab, ext)

def fitstable_open_next_extension(tab):
    """fitstable_open_next_extension(fitstable_t tab) -> int"""
    return _an_engine.fitstable_open_next_extension(tab)

def fitstable_close(arg1):
    """fitstable_close(fitstable_t arg1) -> int"""
    return _an_engine.fitstable_close(arg1)

def fitstable_ncols(t):
    """fitstable_ncols(fitstable_t t) -> int"""
    return _an_engine.fitstable_ncols(t)

def fitstable_nrows(t):
    """fitstable_nrows(fitstable_t t) -> int"""
    return _an_engine.fitstable_nrows(t)

def fitstable_row_size(t):
    """fitstable_row_size(fitstable_t t) -> int"""
    return _an_engine.fitstable_row_size(t)

def fitstable_get_struct_size(table):
    """fitstable_get_struct_size(fitstable_t table) -> int"""
    return _an_engine.fitstable_get_struct_size(table)

def fitstable_next_extension(tab):
    """fitstable_next_extension(fitstable_t tab)"""
    return _an_engine.fitstable_next_extension(tab)

def fitstable_clear_table(tab):
    """fitstable_clear_table(fitstable_t tab)"""
    return _an_engine.fitstable_clear_table(tab)

def fitstable_new_table(t):
    """fitstable_new_table(fitstable_t t) -> int"""
    return _an_engine.fitstable_new_table(t)

def fitstable_read_extension(tab, ext):
    """fitstable_read_extension(fitstable_t tab, int ext) -> int"""
    return _an_engine.fitstable_read_extension(tab, ext)

def fitstable_get_array_size(tab, name):
    """fitstable_get_array_size(fitstable_t tab, char const * name) -> int"""
    return _an_engine.fitstable_get_array_size(tab, name)

def fitstable_get_type(tab, name):
    """fitstable_get_type(fitstable_t tab, char const * name) -> int"""
    return _an_engine.fitstable_get_type(tab, name)

def fitstable_add_read_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, required):
    """fitstable_add_read_column_struct(fitstable_t tab, tfits_type c_type, int arraysize, int structoffset, tfits_type fits_type, char const * name, anbool required)"""
    return _an_engine.fitstable_add_read_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, required)

def fitstable_add_write_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units):
    """fitstable_add_write_column_struct(fitstable_t tab, tfits_type c_type, int arraysize, int structoffset, tfits_type fits_type, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units)

def fitstable_add_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units, required):
    """fitstable_add_column_struct(fitstable_t tab, tfits_type c_type, int arraysize, int structoffset, tfits_type fits_type, char const * name, char const * units, anbool required)"""
    return _an_engine.fitstable_add_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units, required)

def fitstable_add_write_column(tab, t, name, units):
    """fitstable_add_write_column(fitstable_t tab, tfits_type t, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column(tab, t, name, units)

def fitstable_add_write_column_array(tab, t, arraysize, name, units):
    """fitstable_add_write_column_array(fitstable_t tab, tfits_type t, int arraysize, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_array(tab, t, arraysize, name, units)

def fitstable_add_write_column_convert(tab, fits_type, c_type, name, units):
    """fitstable_add_write_column_convert(fitstable_t tab, tfits_type fits_type, tfits_type c_type, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_convert(tab, fits_type, c_type, name, units)

def fitstable_add_write_column_array_convert(tab, fits_type, c_type, arraysize, name, units):
    """fitstable_add_write_column_array_convert(fitstable_t tab, tfits_type fits_type, tfits_type c_type, int arraysize, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_array_convert(tab, fits_type, c_type, arraysize, name, units)

def fitstable_remove_column(tab, name):
    """fitstable_remove_column(fitstable_t tab, char const * name) -> int"""
    return _an_engine.fitstable_remove_column(tab, name)

def fitstable_read_column_into(tab, colname, read_as_type, dest, stride):
    """fitstable_read_column_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride) -> int"""
    return _an_engine.fitstable_read_column_into(tab, colname, read_as_type, dest, stride)

def fitstable_read_column_inds_into(tab, colname, read_as_type, dest, stride, N):
    """fitstable_read_column_inds_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride, int N) -> int"""
    return _an_engine.fitstable_read_column_inds_into(tab, colname, read_as_type, dest, stride, N)

def fitstable_read_column_inds(tab, colname, read_as_type, N):
    """fitstable_read_column_inds(fitstable_t tab, char const * colname, tfits_type read_as_type, int N) -> void *"""
    return _an_engine.fitstable_read_column_inds(tab, colname, read_as_type, N)

def fitstable_read_column_array_inds_into(tab, colname, read_as_type, dest, stride, arraysize, N):
    """fitstable_read_column_array_inds_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride, int arraysize, int N) -> int"""
    return _an_engine.fitstable_read_column_array_inds_into(tab, colname, read_as_type, dest, stride, arraysize, N)

def fitstable_read_column_array_inds(tab, colname, read_as_type, N):
    """fitstable_read_column_array_inds(fitstable_t tab, char const * colname, tfits_type read_as_type, int N) -> void *"""
    return _an_engine.fitstable_read_column_array_inds(tab, colname, read_as_type, N)

def fitstable_read_column_offset_into(tab, colname, read_as_type, dest, stride, start, N):
    """fitstable_read_column_offset_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride, int start, int N) -> int"""
    return _an_engine.fitstable_read_column_offset_into(tab, colname, read_as_type, dest, stride, start, N)

def fitstable_read_column(tab, colname, t):
    """fitstable_read_column(fitstable_t tab, char const * colname, tfits_type t) -> void *"""
    return _an_engine.fitstable_read_column(tab, colname, t)

def fitstable_read_column_array(tab, colname, t):
    """fitstable_read_column_array(fitstable_t tab, char const * colname, tfits_type t) -> void *"""
    return _an_engine.fitstable_read_column_array(tab, colname, t)

def fitstable_read_column_offset(tab, colname, ctype, offset, N):
    """fitstable_read_column_offset(fitstable_t tab, char const * colname, tfits_type ctype, int offset, int N) -> void *"""
    return _an_engine.fitstable_read_column_offset(tab, colname, ctype, offset, N)

def fitstable_write_row(table):
    """fitstable_write_row(fitstable_t table) -> int"""
    return _an_engine.fitstable_write_row(table)

def fitstable_write_row_noflip(table):
    """fitstable_write_row_noflip(fitstable_t table) -> int"""
    return _an_engine.fitstable_write_row_noflip(table)

def fitstable_read_nrows_data(table, row0, nrows, dest):
    """fitstable_read_nrows_data(fitstable_t table, int row0, int nrows, void * dest) -> int"""
    return _an_engine.fitstable_read_nrows_data(table, row0, nrows, dest)

def fitstable_read_row_data(table, row, dest):
    """fitstable_read_row_data(fitstable_t table, int row, void * dest) -> int"""
    return _an_engine.fitstable_read_row_data(table, row, dest)

def fitstable_write_row_data(table, data):
    """fitstable_write_row_data(fitstable_t table, void * data) -> int"""
    return _an_engine.fitstable_write_row_data(table, data)

def fitstable_copy_row_data(table, row, outtable):
    """fitstable_copy_row_data(fitstable_t table, int row, fitstable_t outtable) -> int"""
    return _an_engine.fitstable_copy_row_data(table, row, outtable)

def fitstable_copy_rows_data(table, Nrows, outtable):
    """fitstable_copy_rows_data(fitstable_t table, int Nrows, fitstable_t outtable) -> int"""
    return _an_engine.fitstable_copy_rows_data(table, Nrows, outtable)

def fitstable_endian_flip_row_data(table, data):
    """fitstable_endian_flip_row_data(fitstable_t table, void * data)"""
    return _an_engine.fitstable_endian_flip_row_data(table, data)

def fitstable_write_struct(table, struc):
    """fitstable_write_struct(fitstable_t table, void const * struc) -> int"""
    return _an_engine.fitstable_write_struct(table, struc)

def fitstable_write_struct_noflip(table, struc):
    """fitstable_write_struct_noflip(fitstable_t table, void const * struc) -> int"""
    return _an_engine.fitstable_write_struct_noflip(table, struc)

def fitstable_write_structs(table, struc, stride, N):
    """fitstable_write_structs(fitstable_t table, void const * struc, int stride, int N) -> int"""
    return _an_engine.fitstable_write_structs(table, struc, stride, N)

def fitstable_pad_with(table, pad):
    """fitstable_pad_with(fitstable_t table, char pad) -> int"""
    return _an_engine.fitstable_pad_with(table, pad)

def fitstable_write_one_column(table, colnum, rowoffset, nrows, src, src_stride):
    """fitstable_write_one_column(fitstable_t table, int colnum, int rowoffset, int nrows, void const * src, int src_stride) -> int"""
    return _an_engine.fitstable_write_one_column(table, colnum, rowoffset, nrows, src, src_stride)

def fitstable_read_struct(table, index, struc):
    """fitstable_read_struct(fitstable_t table, int index, void * struc) -> int"""
    return _an_engine.fitstable_read_struct(table, index, struc)

def fitstable_read_structs(table, struc, stride, offset, N):
    """fitstable_read_structs(fitstable_t table, void * struc, int stride, int offset, int N) -> int"""
    return _an_engine.fitstable_read_structs(table, struc, stride, offset, N)

def fitstable_get_primary_header(t):
    """fitstable_get_primary_header(fitstable_t t) -> qfits_header *"""
    return _an_engine.fitstable_get_primary_header(t)

def fitstable_write_primary_header(t):
    """fitstable_write_primary_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_write_primary_header(t)

def fitstable_fix_primary_header(t):
    """fitstable_fix_primary_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_fix_primary_header(t)

def fitstable_get_header(t):
    """fitstable_get_header(fitstable_t t) -> qfits_header *"""
    return _an_engine.fitstable_get_header(t)

def fitstable_write_header(t):
    """fitstable_write_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_write_header(t)

def fitstable_fix_header(t):
    """fitstable_fix_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_fix_header(t)

def fitstable_close_table(tab):
    """fitstable_close_table(fitstable_t tab)"""
    return _an_engine.fitstable_close_table(tab)

def fitstable_use_buffered_reading(tab, elementsize, Nbuffer):
    """fitstable_use_buffered_reading(fitstable_t tab, int elementsize, int Nbuffer)"""
    return _an_engine.fitstable_use_buffered_reading(tab, elementsize, Nbuffer)

def fitstable_next_struct(tab):
    """fitstable_next_struct(fitstable_t tab) -> void *"""
    return _an_engine.fitstable_next_struct(tab)

def fitstable_pushback(tab):
    """fitstable_pushback(fitstable_t tab) -> int"""
    return _an_engine.fitstable_pushback(tab)

def fitstable_set_buffer_fill_function(tab, refill_buffer, userdata):
    """fitstable_set_buffer_fill_function(fitstable_t tab, int (*)(void *,void *,unsigned int,unsigned int) refill_buffer, void * userdata)"""
    return _an_engine.fitstable_set_buffer_fill_function(tab, refill_buffer, userdata)

def fitstable_print_missing(tab, f):
    """fitstable_print_missing(fitstable_t tab, FILE * f)"""
    return _an_engine.fitstable_print_missing(tab, f)

def fitstable_error_report_missing(tab):
    """fitstable_error_report_missing(fitstable_t tab)"""
    return _an_engine.fitstable_error_report_missing(tab)

def fitstable_print_columns(tab):
    """fitstable_print_columns(fitstable_t tab)"""
    return _an_engine.fitstable_print_columns(tab)
class starxy_t(_object):
    """Proxy of C starxy_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, starxy_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, starxy_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _an_engine.starxy_t_x_set
    __swig_getmethods__["x"] = _an_engine.starxy_t_x_get
    if _newclass:
        x = _swig_property(_an_engine.starxy_t_x_get, _an_engine.starxy_t_x_set)
    __swig_setmethods__["y"] = _an_engine.starxy_t_y_set
    __swig_getmethods__["y"] = _an_engine.starxy_t_y_get
    if _newclass:
        y = _swig_property(_an_engine.starxy_t_y_get, _an_engine.starxy_t_y_set)
    __swig_setmethods__["flux"] = _an_engine.starxy_t_flux_set
    __swig_getmethods__["flux"] = _an_engine.starxy_t_flux_get
    if _newclass:
        flux = _swig_property(_an_engine.starxy_t_flux_get, _an_engine.starxy_t_flux_set)
    __swig_setmethods__["background"] = _an_engine.starxy_t_background_set
    __swig_getmethods__["background"] = _an_engine.starxy_t_background_get
    if _newclass:
        background = _swig_property(_an_engine.starxy_t_background_get, _an_engine.starxy_t_background_set)
    __swig_setmethods__["N"] = _an_engine.starxy_t_N_set
    __swig_getmethods__["N"] = _an_engine.starxy_t_N_get
    if _newclass:
        N = _swig_property(_an_engine.starxy_t_N_get, _an_engine.starxy_t_N_set)
    __swig_setmethods__["xlo"] = _an_engine.starxy_t_xlo_set
    __swig_getmethods__["xlo"] = _an_engine.starxy_t_xlo_get
    if _newclass:
        xlo = _swig_property(_an_engine.starxy_t_xlo_get, _an_engine.starxy_t_xlo_set)
    __swig_setmethods__["xhi"] = _an_engine.starxy_t_xhi_set
    __swig_getmethods__["xhi"] = _an_engine.starxy_t_xhi_get
    if _newclass:
        xhi = _swig_property(_an_engine.starxy_t_xhi_get, _an_engine.starxy_t_xhi_set)
    __swig_setmethods__["ylo"] = _an_engine.starxy_t_ylo_set
    __swig_getmethods__["ylo"] = _an_engine.starxy_t_ylo_get
    if _newclass:
        ylo = _swig_property(_an_engine.starxy_t_ylo_get, _an_engine.starxy_t_ylo_set)
    __swig_setmethods__["yhi"] = _an_engine.starxy_t_yhi_set
    __swig_getmethods__["yhi"] = _an_engine.starxy_t_yhi_get
    if _newclass:
        yhi = _swig_property(_an_engine.starxy_t_yhi_get, _an_engine.starxy_t_yhi_set)

    def __init__(self):
        """__init__(starxy_t self) -> starxy_t"""
        this = _an_engine.new_starxy_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_starxy_t
    __del__ = lambda self: None
starxy_t_swigregister = _an_engine.starxy_t_swigregister
starxy_t_swigregister(starxy_t)


def starxy_new(N, flux, back):
    """starxy_new(int N, anbool flux, anbool back) -> starxy_t"""
    return _an_engine.starxy_new(N, flux, back)

def starxy_compute_range(xy):
    """starxy_compute_range(starxy_t xy)"""
    return _an_engine.starxy_compute_range(xy)

def starxy_getx(f, i):
    """starxy_getx(starxy_t f, int i) -> double"""
    return _an_engine.starxy_getx(f, i)

def starxy_gety(f, i):
    """starxy_gety(starxy_t f, int i) -> double"""
    return _an_engine.starxy_gety(f, i)

def starxy_get_x(f, i):
    """starxy_get_x(starxy_t f, int i) -> double"""
    return _an_engine.starxy_get_x(f, i)

def starxy_get_y(f, i):
    """starxy_get_y(starxy_t f, int i) -> double"""
    return _an_engine.starxy_get_y(f, i)

def starxy_get_flux(f, i):
    """starxy_get_flux(starxy_t f, int i) -> double"""
    return _an_engine.starxy_get_flux(f, i)

def starxy_get(f, i):
    """starxy_get(starxy_t f, int i)"""
    return _an_engine.starxy_get(f, i)

def starxy_setx(f, i, x):
    """starxy_setx(starxy_t f, int i, double x)"""
    return _an_engine.starxy_setx(f, i, x)

def starxy_sety(f, i, y):
    """starxy_sety(starxy_t f, int i, double y)"""
    return _an_engine.starxy_sety(f, i, y)

def starxy_set_x(f, i, x):
    """starxy_set_x(starxy_t f, int i, double x)"""
    return _an_engine.starxy_set_x(f, i, x)

def starxy_set_y(f, i, y):
    """starxy_set_y(starxy_t f, int i, double y)"""
    return _an_engine.starxy_set_y(f, i, y)

def starxy_set_flux(f, i, y):
    """starxy_set_flux(starxy_t f, int i, double y)"""
    return _an_engine.starxy_set_flux(f, i, y)

def starxy_subset(arg1, N):
    """starxy_subset(starxy_t arg1, int N) -> starxy_t"""
    return _an_engine.starxy_subset(arg1, N)

def starxy_set_x_array(s, x):
    """starxy_set_x_array(starxy_t s, double const * x)"""
    return _an_engine.starxy_set_x_array(s, x)

def starxy_set_y_array(s, y):
    """starxy_set_y_array(starxy_t s, double const * y)"""
    return _an_engine.starxy_set_y_array(s, y)

def starxy_set_flux_array(s, f):
    """starxy_set_flux_array(starxy_t s, double const * f)"""
    return _an_engine.starxy_set_flux_array(s, f)

def starxy_set_bg_array(s, f):
    """starxy_set_bg_array(starxy_t s, double const * f)"""
    return _an_engine.starxy_set_bg_array(s, f)

def starxy_set_xy_array(s, xy):
    """starxy_set_xy_array(starxy_t s, double const * xy)"""
    return _an_engine.starxy_set_xy_array(s, xy)

def starxy_sort_by_flux(f):
    """starxy_sort_by_flux(starxy_t f)"""
    return _an_engine.starxy_sort_by_flux(f)

def starxy_set(f, i, x, y):
    """starxy_set(starxy_t f, int i, double x, double y)"""
    return _an_engine.starxy_set(f, i, x, y)

def starxy_n(f):
    """starxy_n(starxy_t f) -> int"""
    return _an_engine.starxy_n(f)

def starxy_copy_x(xy):
    """starxy_copy_x(starxy_t xy) -> double *"""
    return _an_engine.starxy_copy_x(xy)

def starxy_copy_y(xy):
    """starxy_copy_y(starxy_t xy) -> double *"""
    return _an_engine.starxy_copy_y(xy)

def starxy_copy_xy(xy):
    """starxy_copy_xy(starxy_t xy) -> double *"""
    return _an_engine.starxy_copy_xy(xy)

def starxy_to_xy_array(xy):
    """starxy_to_xy_array(starxy_t xy) -> double *"""
    return _an_engine.starxy_to_xy_array(xy)

def starxy_to_flat_array(xy):
    """starxy_to_flat_array(starxy_t xy) -> double *"""
    return _an_engine.starxy_to_flat_array(xy)

def starxy_alloc_data(f, N, flux, back):
    """starxy_alloc_data(starxy_t f, int N, anbool flux, anbool back)"""
    return _an_engine.starxy_alloc_data(f, N, flux, back)

def starxy_from_dl(xy, l, flux, back):
    """starxy_from_dl(starxy_t xy, dl * l, anbool flux, anbool back)"""
    return _an_engine.starxy_from_dl(xy, l, flux, back)

def starxy_free_data(f):
    """starxy_free_data(starxy_t f)"""
    return _an_engine.starxy_free_data(f)

def starxy_free(f):
    """starxy_free(starxy_t f)"""
    return _an_engine.starxy_free(f)
AN_FILETYPE_STARTREE = _an_engine.AN_FILETYPE_STARTREE
AN_FILETYPE_TAGALONG = _an_engine.AN_FILETYPE_TAGALONG
STARTREE_NAME = _an_engine.STARTREE_NAME
class startree_t(_object):
    """Proxy of C startree_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, startree_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, startree_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _an_engine.startree_t_tree_set
    __swig_getmethods__["tree"] = _an_engine.startree_t_tree_get
    if _newclass:
        tree = _swig_property(_an_engine.startree_t_tree_get, _an_engine.startree_t_tree_set)
    __swig_setmethods__["header"] = _an_engine.startree_t_header_set
    __swig_getmethods__["header"] = _an_engine.startree_t_header_get
    if _newclass:
        header = _swig_property(_an_engine.startree_t_header_get, _an_engine.startree_t_header_set)
    __swig_setmethods__["inverse_perm"] = _an_engine.startree_t_inverse_perm_set
    __swig_getmethods__["inverse_perm"] = _an_engine.startree_t_inverse_perm_get
    if _newclass:
        inverse_perm = _swig_property(_an_engine.startree_t_inverse_perm_get, _an_engine.startree_t_inverse_perm_set)
    __swig_setmethods__["sweep"] = _an_engine.startree_t_sweep_set
    __swig_getmethods__["sweep"] = _an_engine.startree_t_sweep_get
    if _newclass:
        sweep = _swig_property(_an_engine.startree_t_sweep_get, _an_engine.startree_t_sweep_set)
    __swig_setmethods__["writing"] = _an_engine.startree_t_writing_set
    __swig_getmethods__["writing"] = _an_engine.startree_t_writing_get
    if _newclass:
        writing = _swig_property(_an_engine.startree_t_writing_get, _an_engine.startree_t_writing_set)
    __swig_setmethods__["tagalong"] = _an_engine.startree_t_tagalong_set
    __swig_getmethods__["tagalong"] = _an_engine.startree_t_tagalong_get
    if _newclass:
        tagalong = _swig_property(_an_engine.startree_t_tagalong_get, _an_engine.startree_t_tagalong_set)

    def __init__(self):
        """__init__(startree_t self) -> startree_t"""
        this = _an_engine.new_startree_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_startree_t
    __del__ = lambda self: None
startree_t_swigregister = _an_engine.startree_t_swigregister
startree_t_swigregister(startree_t)


def startree_open(fn):
    """startree_open(char const * fn) -> startree_t"""
    return _an_engine.startree_open(fn)

def startree_open_fits(fits):
    """startree_open_fits(anqfits_t * fits) -> startree_t"""
    return _an_engine.startree_open_fits(fits)

def startree_search_for(s, xyzcenter, radius2, xyzresults, radecresults, starinds):
    """startree_search_for(startree_t s, double const * xyzcenter, double radius2, double ** xyzresults, double ** radecresults, int ** starinds)"""
    return _an_engine.startree_search_for(s, xyzcenter, radius2, xyzresults, radecresults, starinds)

def startree_search_for_radec(s, ra, dec, radius, xyzresults, radecresults, starinds):
    """startree_search_for_radec(startree_t s, double ra, double dec, double radius, double ** xyzresults, double ** radecresults, int ** starinds)"""
    return _an_engine.startree_search_for_radec(s, ra, dec, radius, xyzresults, radecresults, starinds)

def startree_search(s, xyzcenter, radius2, xyzresults, radecresults):
    """startree_search(startree_t s, double const * xyzcenter, double radius2, double ** xyzresults, double ** radecresults)"""
    return _an_engine.startree_search(s, xyzcenter, radius2, xyzresults, radecresults)

def startree_get_data_column(s, colname, N):
    """startree_get_data_column(startree_t s, char const * colname, int N) -> double *"""
    return _an_engine.startree_get_data_column(s, colname, N)

def startree_get_data_column_int64(s, colname, N):
    """startree_get_data_column_int64(startree_t s, char const * colname, int N) -> int64_t *"""
    return _an_engine.startree_get_data_column_int64(s, colname, N)

def startree_get_data_column_array(s, colname, N):
    """startree_get_data_column_array(startree_t s, char const * colname, int N) -> double *"""
    return _an_engine.startree_get_data_column_array(s, colname, N)

def startree_free_data_column(s):
    """startree_free_data_column(startree_t s)"""
    return _an_engine.startree_free_data_column(s)

def startree_has_tagalong(s):
    """startree_has_tagalong(startree_t s) -> anbool"""
    return _an_engine.startree_has_tagalong(s)

def startree_get_tagalong(s):
    """startree_get_tagalong(startree_t s) -> fitstable_t"""
    return _an_engine.startree_get_tagalong(s)

def startree_get_tagalong_column_names(s, lst):
    """startree_get_tagalong_column_names(startree_t s, sl * lst) -> sl *"""
    return _an_engine.startree_get_tagalong_column_names(s, lst)

def startree_get_tagalong_N_columns(s):
    """startree_get_tagalong_N_columns(startree_t s) -> int"""
    return _an_engine.startree_get_tagalong_N_columns(s)

def startree_get_tagalong_column_name(s, i):
    """startree_get_tagalong_column_name(startree_t s, int i) -> char const *"""
    return _an_engine.startree_get_tagalong_column_name(s, i)

def startree_get_tagalong_column_fits_type(s, i):
    """startree_get_tagalong_column_fits_type(startree_t s, int i) -> tfits_type"""
    return _an_engine.startree_get_tagalong_column_fits_type(s, i)

def startree_get_tagalong_column_array_size(s, i):
    """startree_get_tagalong_column_array_size(startree_t s, int i) -> int"""
    return _an_engine.startree_get_tagalong_column_array_size(s, i)

def startree_get_cut_nside(s):
    """startree_get_cut_nside(startree_t s) -> int"""
    return _an_engine.startree_get_cut_nside(s)

def startree_get_cut_nsweeps(s):
    """startree_get_cut_nsweeps(startree_t s) -> int"""
    return _an_engine.startree_get_cut_nsweeps(s)

def startree_get_cut_dedup(s):
    """startree_get_cut_dedup(startree_t s) -> double"""
    return _an_engine.startree_get_cut_dedup(s)

def startree_get_cut_band(s):
    """startree_get_cut_band(startree_t s) -> char *"""
    return _an_engine.startree_get_cut_band(s)

def startree_get_cut_margin(s):
    """startree_get_cut_margin(startree_t s) -> int"""
    return _an_engine.startree_get_cut_margin(s)

def startree_get_jitter(s):
    """startree_get_jitter(startree_t s) -> double"""
    return _an_engine.startree_get_jitter(s)

def startree_set_jitter(s, jitter_arcsec):
    """startree_set_jitter(startree_t s, double jitter_arcsec)"""
    return _an_engine.startree_set_jitter(s, jitter_arcsec)

def startree_get_sweep(s, ind):
    """startree_get_sweep(startree_t s, int ind) -> int"""
    return _an_engine.startree_get_sweep(s, ind)

def startree_N(s):
    """startree_N(startree_t s) -> int"""
    return _an_engine.startree_N(s)

def startree_nodes(s):
    """startree_nodes(startree_t s) -> int"""
    return _an_engine.startree_nodes(s)

def startree_D(s):
    """startree_D(startree_t s) -> int"""
    return _an_engine.startree_D(s)

def startree_header(s):
    """startree_header(startree_t s) -> qfits_header *"""
    return _an_engine.startree_header(s)

def startree_get(s, starid):
    """startree_get(startree_t s, int starid) -> int"""
    return _an_engine.startree_get(s, starid)

def startree_get_radec(s, starid):
    """startree_get_radec(startree_t s, int starid) -> int"""
    return _an_engine.startree_get_radec(s, starid)

def startree_close(s):
    """startree_close(startree_t s) -> int"""
    return _an_engine.startree_close(s)

def startree_compute_inverse_perm(s):
    """startree_compute_inverse_perm(startree_t s)"""
    return _an_engine.startree_compute_inverse_perm(s)

def startree_check_inverse_perm(s):
    """startree_check_inverse_perm(startree_t s) -> int"""
    return _an_engine.startree_check_inverse_perm(s)

def startree_new():
    """startree_new() -> startree_t"""
    return _an_engine.startree_new()

def startree_write_to_file(s, fn):
    """startree_write_to_file(startree_t s, char const * fn) -> int"""
    return _an_engine.startree_write_to_file(s, fn)

def startree_write_to_file_flipped(s, fn):
    """startree_write_to_file_flipped(startree_t s, char const * fn) -> int"""
    return _an_engine.startree_write_to_file_flipped(s, fn)

def startree_append_to(s, fid):
    """startree_append_to(startree_t s, FILE * fid) -> int"""
    return _an_engine.startree_append_to(s, fid)
SIP_MAXORDER = _an_engine.SIP_MAXORDER
class tan_t(_object):
    """Proxy of C tan_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tan_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tan_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["crval"] = _an_engine.tan_t_crval_set
    __swig_getmethods__["crval"] = _an_engine.tan_t_crval_get
    if _newclass:
        crval = _swig_property(_an_engine.tan_t_crval_get, _an_engine.tan_t_crval_set)
    __swig_setmethods__["crpix"] = _an_engine.tan_t_crpix_set
    __swig_getmethods__["crpix"] = _an_engine.tan_t_crpix_get
    if _newclass:
        crpix = _swig_property(_an_engine.tan_t_crpix_get, _an_engine.tan_t_crpix_set)
    __swig_setmethods__["cd"] = _an_engine.tan_t_cd_set
    __swig_getmethods__["cd"] = _an_engine.tan_t_cd_get
    if _newclass:
        cd = _swig_property(_an_engine.tan_t_cd_get, _an_engine.tan_t_cd_set)
    __swig_setmethods__["imagew"] = _an_engine.tan_t_imagew_set
    __swig_getmethods__["imagew"] = _an_engine.tan_t_imagew_get
    if _newclass:
        imagew = _swig_property(_an_engine.tan_t_imagew_get, _an_engine.tan_t_imagew_set)
    __swig_setmethods__["imageh"] = _an_engine.tan_t_imageh_set
    __swig_getmethods__["imageh"] = _an_engine.tan_t_imageh_get
    if _newclass:
        imageh = _swig_property(_an_engine.tan_t_imageh_get, _an_engine.tan_t_imageh_set)
    __swig_setmethods__["sin"] = _an_engine.tan_t_sin_set
    __swig_getmethods__["sin"] = _an_engine.tan_t_sin_get
    if _newclass:
        sin = _swig_property(_an_engine.tan_t_sin_get, _an_engine.tan_t_sin_set)

    def __init__(self):
        """__init__(tan_t self) -> tan_t"""
        this = _an_engine.new_tan_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_tan_t
    __del__ = lambda self: None
tan_t_swigregister = _an_engine.tan_t_swigregister
tan_t_swigregister(tan_t)

class sip_t(_object):
    """Proxy of C sip_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sip_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sip_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wcstan"] = _an_engine.sip_t_wcstan_set
    __swig_getmethods__["wcstan"] = _an_engine.sip_t_wcstan_get
    if _newclass:
        wcstan = _swig_property(_an_engine.sip_t_wcstan_get, _an_engine.sip_t_wcstan_set)
    __swig_setmethods__["a_order"] = _an_engine.sip_t_a_order_set
    __swig_getmethods__["a_order"] = _an_engine.sip_t_a_order_get
    if _newclass:
        a_order = _swig_property(_an_engine.sip_t_a_order_get, _an_engine.sip_t_a_order_set)
    __swig_setmethods__["b_order"] = _an_engine.sip_t_b_order_set
    __swig_getmethods__["b_order"] = _an_engine.sip_t_b_order_get
    if _newclass:
        b_order = _swig_property(_an_engine.sip_t_b_order_get, _an_engine.sip_t_b_order_set)
    __swig_setmethods__["a"] = _an_engine.sip_t_a_set
    __swig_getmethods__["a"] = _an_engine.sip_t_a_get
    if _newclass:
        a = _swig_property(_an_engine.sip_t_a_get, _an_engine.sip_t_a_set)
    __swig_setmethods__["b"] = _an_engine.sip_t_b_set
    __swig_getmethods__["b"] = _an_engine.sip_t_b_get
    if _newclass:
        b = _swig_property(_an_engine.sip_t_b_get, _an_engine.sip_t_b_set)
    __swig_setmethods__["ap_order"] = _an_engine.sip_t_ap_order_set
    __swig_getmethods__["ap_order"] = _an_engine.sip_t_ap_order_get
    if _newclass:
        ap_order = _swig_property(_an_engine.sip_t_ap_order_get, _an_engine.sip_t_ap_order_set)
    __swig_setmethods__["bp_order"] = _an_engine.sip_t_bp_order_set
    __swig_getmethods__["bp_order"] = _an_engine.sip_t_bp_order_get
    if _newclass:
        bp_order = _swig_property(_an_engine.sip_t_bp_order_get, _an_engine.sip_t_bp_order_set)
    __swig_setmethods__["ap"] = _an_engine.sip_t_ap_set
    __swig_getmethods__["ap"] = _an_engine.sip_t_ap_get
    if _newclass:
        ap = _swig_property(_an_engine.sip_t_ap_get, _an_engine.sip_t_ap_set)
    __swig_setmethods__["bp"] = _an_engine.sip_t_bp_set
    __swig_getmethods__["bp"] = _an_engine.sip_t_bp_get
    if _newclass:
        bp = _swig_property(_an_engine.sip_t_bp_get, _an_engine.sip_t_bp_set)

    def __init__(self):
        """__init__(sip_t self) -> sip_t"""
        this = _an_engine.new_sip_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_sip_t
    __del__ = lambda self: None
sip_t_swigregister = _an_engine.sip_t_swigregister
sip_t_swigregister(sip_t)


def sip_create():
    """sip_create() -> sip_t"""
    return _an_engine.sip_create()

def sip_free(sip):
    """sip_free(sip_t sip)"""
    return _an_engine.sip_free(sip)

def sip_copy(dest, src):
    """sip_copy(sip_t dest, sip_t src)"""
    return _an_engine.sip_copy(dest, src)

def sip_wrap_tan(tan, sip):
    """sip_wrap_tan(tan_t tan, sip_t sip)"""
    return _an_engine.sip_wrap_tan(tan, sip)

def sip_imagew(sip):
    """sip_imagew(sip_t sip) -> double"""
    return _an_engine.sip_imagew(sip)

def sip_imageh(sip):
    """sip_imageh(sip_t sip) -> double"""
    return _an_engine.sip_imageh(sip)

def sip_pixelxy2radec(sip, px, py):
    """sip_pixelxy2radec(sip_t sip, double px, double py)"""
    return _an_engine.sip_pixelxy2radec(sip, px, py)

def sip_pixelxy2xyzarr(sip, px, py):
    """sip_pixelxy2xyzarr(sip_t sip, double px, double py)"""
    return _an_engine.sip_pixelxy2xyzarr(sip, px, py)

def sip_radec2pixelxy(sip, a, d):
    """sip_radec2pixelxy(sip_t sip, double a, double d) -> anbool"""
    return _an_engine.sip_radec2pixelxy(sip, a, d)

def sip_radec2pixelxy_check(sip, ra, dec):
    """sip_radec2pixelxy_check(sip_t sip, double ra, double dec) -> anbool"""
    return _an_engine.sip_radec2pixelxy_check(sip, ra, dec)

def sip_xyzarr2pixelxy(sip, xyz):
    """sip_xyzarr2pixelxy(sip_t sip, double const * xyz) -> anbool"""
    return _an_engine.sip_xyzarr2pixelxy(sip, xyz)

def sip_xyz2pixelxy(sip, x, y, z):
    """sip_xyz2pixelxy(sip_t sip, double x, double y, double z) -> anbool"""
    return _an_engine.sip_xyz2pixelxy(sip, x, y, z)

def sip_pixelxy2iwc(sip, px, py):
    """sip_pixelxy2iwc(sip_t sip, double px, double py)"""
    return _an_engine.sip_pixelxy2iwc(sip, px, py)

def tan_det_cd(tan):
    """tan_det_cd(tan_t tan) -> double"""
    return _an_engine.tan_det_cd(tan)

def sip_det_cd(sip):
    """sip_det_cd(sip_t sip) -> double"""
    return _an_engine.sip_det_cd(sip)

def tan_pixel_scale(tn):
    """tan_pixel_scale(tan_t tn) -> double"""
    return _an_engine.tan_pixel_scale(tn)

def sip_pixel_scale(sip):
    """sip_pixel_scale(sip_t sip) -> double"""
    return _an_engine.sip_pixel_scale(sip)

def sip_calc_inv_distortion(sip, U, V):
    """sip_calc_inv_distortion(sip_t sip, double U, double V)"""
    return _an_engine.sip_calc_inv_distortion(sip, U, V)

def sip_calc_distortion(sip, u, v):
    """sip_calc_distortion(sip_t sip, double u, double v)"""
    return _an_engine.sip_calc_distortion(sip, u, v)

def sip_pixel_distortion(sip, x, y):
    """sip_pixel_distortion(sip_t sip, double x, double y)"""
    return _an_engine.sip_pixel_distortion(sip, x, y)

def sip_pixel_undistortion(sip, x, y):
    """sip_pixel_undistortion(sip_t sip, double x, double y)"""
    return _an_engine.sip_pixel_undistortion(sip, x, y)

def tan_pixelxy2xyzarr(tan, px, py):
    """tan_pixelxy2xyzarr(tan_t tan, double px, double py)"""
    return _an_engine.tan_pixelxy2xyzarr(tan, px, py)

def tan_pixelxy2radec(wcs_tan, px, py):
    """tan_pixelxy2radec(tan_t wcs_tan, double px, double py)"""
    return _an_engine.tan_pixelxy2radec(wcs_tan, px, py)

def tan_pixelxy2radecarr(wcs_tan, px, py):
    """tan_pixelxy2radecarr(tan_t wcs_tan, double px, double py)"""
    return _an_engine.tan_pixelxy2radecarr(wcs_tan, px, py)

def tan_radec2pixelxy(wcs_tan, ra, dec):
    """tan_radec2pixelxy(tan_t wcs_tan, double ra, double dec) -> anbool"""
    return _an_engine.tan_radec2pixelxy(wcs_tan, ra, dec)

def tan_xyzarr2pixelxy(wcs_tan, xyz):
    """tan_xyzarr2pixelxy(tan_t wcs_tan, double const * xyz) -> anbool"""
    return _an_engine.tan_xyzarr2pixelxy(wcs_tan, xyz)

def tan_iwc2pixelxy(tan, iwcx, iwcy):
    """tan_iwc2pixelxy(tan_t tan, double iwcx, double iwcy)"""
    return _an_engine.tan_iwc2pixelxy(tan, iwcx, iwcy)

def tan_iwc2xyzarr(tan, x, y):
    """tan_iwc2xyzarr(tan_t tan, double x, double y)"""
    return _an_engine.tan_iwc2xyzarr(tan, x, y)

def tan_iwc2radec(tan, x, y):
    """tan_iwc2radec(tan_t tan, double x, double y)"""
    return _an_engine.tan_iwc2radec(tan, x, y)

def tan_pixelxy2iwc(tan, px, py):
    """tan_pixelxy2iwc(tan_t tan, double px, double py)"""
    return _an_engine.tan_pixelxy2iwc(tan, px, py)

def tan_xyzarr2iwc(tan, xyz):
    """tan_xyzarr2iwc(tan_t tan, double const * xyz) -> anbool"""
    return _an_engine.tan_xyzarr2iwc(tan, xyz)

def tan_radec2iwc(tan, ra, dec):
    """tan_radec2iwc(tan_t tan, double ra, double dec) -> anbool"""
    return _an_engine.tan_radec2iwc(tan, ra, dec)

def sip_xyzarr2iwc(sip, xyz):
    """sip_xyzarr2iwc(sip_t sip, double const * xyz) -> anbool"""
    return _an_engine.sip_xyzarr2iwc(sip, xyz)

def sip_radec2iwc(sip, ra, dec):
    """sip_radec2iwc(sip_t sip, double ra, double dec) -> anbool"""
    return _an_engine.sip_radec2iwc(sip, ra, dec)

def sip_iwc2pixelxy(sip, iwcx, iwcy):
    """sip_iwc2pixelxy(sip_t sip, double iwcx, double iwcy)"""
    return _an_engine.sip_iwc2pixelxy(sip, iwcx, iwcy)

def sip_iwc2radec(sip, x, y):
    """sip_iwc2radec(sip_t sip, double x, double y)"""
    return _an_engine.sip_iwc2radec(sip, x, y)

def sip_print(arg1):
    """sip_print(sip_t arg1)"""
    return _an_engine.sip_print(arg1)

def sip_print_to(arg1, fid):
    """sip_print_to(sip_t arg1, FILE * fid)"""
    return _an_engine.sip_print_to(arg1, fid)

def tan_print(tan):
    """tan_print(tan_t tan)"""
    return _an_engine.tan_print(tan)

def tan_print_to(tan, f):
    """tan_print_to(tan_t tan, FILE * f)"""
    return _an_engine.tan_print_to(tan, f)

def sip_get_crval(sip):
    """sip_get_crval(sip_t sip)"""
    return _an_engine.sip_get_crval(sip)

def tan_get_orientation(tan):
    """tan_get_orientation(tan_t tan) -> double"""
    return _an_engine.tan_get_orientation(tan)

def sip_get_orientation(sip):
    """sip_get_orientation(sip_t sip) -> double"""
    return _an_engine.sip_get_orientation(sip)

def fit_sip_coefficients(starxyz, fieldxy, weights, M, tanin1, sip_order, inv_order, sipout):
    """fit_sip_coefficients(double const * starxyz, double const * fieldxy, double const * weights, int M, tan_t tanin1, int sip_order, int inv_order, sip_t sipout) -> int"""
    return _an_engine.fit_sip_coefficients(starxyz, fieldxy, weights, M, tanin1, sip_order, inv_order, sipout)

def wcs_shift(wcs, xs, ys):
    """wcs_shift(tan_t wcs, double xs, double ys)"""
    return _an_engine.wcs_shift(wcs, xs, ys)

def fit_sip_wcs(starxyz, fieldxy, weights, M, tanin, sip_order, inv_order, doshift, sipout):
    """fit_sip_wcs(double const * starxyz, double const * fieldxy, double const * weights, int M, tan_t tanin, int sip_order, int inv_order, int doshift, sip_t sipout) -> int"""
    return _an_engine.fit_sip_wcs(starxyz, fieldxy, weights, M, tanin, sip_order, inv_order, doshift, sipout)

def fit_sip_wcs_2(starxyz, fieldxy, weights, M, sip_order, inv_order, W, H, crpix_center, doshift, sipout):
    """fit_sip_wcs_2(double const * starxyz, double const * fieldxy, double const * weights, int M, int sip_order, int inv_order, int W, int H, int crpix_center, int doshift, sip_t sipout) -> int"""
    return _an_engine.fit_sip_wcs_2(starxyz, fieldxy, weights, M, sip_order, inv_order, W, H, crpix_center, doshift, sipout)

def fit_tan_wcs_move_tangent_point(starxyz, fieldxy, N, crpix, tanin, tanout):
    """fit_tan_wcs_move_tangent_point(double const * starxyz, double const * fieldxy, int N, double const * crpix, tan_t tanin, tan_t tanout) -> int"""
    return _an_engine.fit_tan_wcs_move_tangent_point(starxyz, fieldxy, N, crpix, tanin, tanout)

def fit_tan_wcs_move_tangent_point_weighted(starxyz, fieldxy, weights, N, crpix, tanin, tanout):
    """fit_tan_wcs_move_tangent_point_weighted(double const * starxyz, double const * fieldxy, double const * weights, int N, double const * crpix, tan_t tanin, tan_t tanout) -> int"""
    return _an_engine.fit_tan_wcs_move_tangent_point_weighted(starxyz, fieldxy, weights, N, crpix, tanin, tanout)

def fit_tan_wcs(starxyz, fieldxy, nobjs, wcstan):
    """fit_tan_wcs(double const * starxyz, double const * fieldxy, int nobjs, tan_t wcstan) -> int"""
    return _an_engine.fit_tan_wcs(starxyz, fieldxy, nobjs, wcstan)

def fit_tan_wcs_weighted(starxyz, fieldxy, weights, N, tan):
    """fit_tan_wcs_weighted(double const * starxyz, double const * fieldxy, double const * weights, int N, tan_t tan) -> int"""
    return _an_engine.fit_tan_wcs_weighted(starxyz, fieldxy, weights, N, tan)
class match_struct(_object):
    """Proxy of C match_struct struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, match_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, match_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quadno"] = _an_engine.match_struct_quadno_set
    __swig_getmethods__["quadno"] = _an_engine.match_struct_quadno_get
    if _newclass:
        quadno = _swig_property(_an_engine.match_struct_quadno_get, _an_engine.match_struct_quadno_set)
    __swig_setmethods__["star"] = _an_engine.match_struct_star_set
    __swig_getmethods__["star"] = _an_engine.match_struct_star_get
    if _newclass:
        star = _swig_property(_an_engine.match_struct_star_get, _an_engine.match_struct_star_set)
    __swig_setmethods__["field"] = _an_engine.match_struct_field_set
    __swig_getmethods__["field"] = _an_engine.match_struct_field_get
    if _newclass:
        field = _swig_property(_an_engine.match_struct_field_get, _an_engine.match_struct_field_set)
    __swig_setmethods__["ids"] = _an_engine.match_struct_ids_set
    __swig_getmethods__["ids"] = _an_engine.match_struct_ids_get
    if _newclass:
        ids = _swig_property(_an_engine.match_struct_ids_get, _an_engine.match_struct_ids_set)
    __swig_setmethods__["code_err"] = _an_engine.match_struct_code_err_set
    __swig_getmethods__["code_err"] = _an_engine.match_struct_code_err_get
    if _newclass:
        code_err = _swig_property(_an_engine.match_struct_code_err_get, _an_engine.match_struct_code_err_set)
    __swig_setmethods__["quadpix"] = _an_engine.match_struct_quadpix_set
    __swig_getmethods__["quadpix"] = _an_engine.match_struct_quadpix_get
    if _newclass:
        quadpix = _swig_property(_an_engine.match_struct_quadpix_get, _an_engine.match_struct_quadpix_set)
    __swig_setmethods__["quadxyz"] = _an_engine.match_struct_quadxyz_set
    __swig_getmethods__["quadxyz"] = _an_engine.match_struct_quadxyz_get
    if _newclass:
        quadxyz = _swig_property(_an_engine.match_struct_quadxyz_get, _an_engine.match_struct_quadxyz_set)
    __swig_setmethods__["dimquads"] = _an_engine.match_struct_dimquads_set
    __swig_getmethods__["dimquads"] = _an_engine.match_struct_dimquads_get
    if _newclass:
        dimquads = _swig_property(_an_engine.match_struct_dimquads_get, _an_engine.match_struct_dimquads_set)
    __swig_setmethods__["center"] = _an_engine.match_struct_center_set
    __swig_getmethods__["center"] = _an_engine.match_struct_center_get
    if _newclass:
        center = _swig_property(_an_engine.match_struct_center_get, _an_engine.match_struct_center_set)
    __swig_setmethods__["radius"] = _an_engine.match_struct_radius_set
    __swig_getmethods__["radius"] = _an_engine.match_struct_radius_get
    if _newclass:
        radius = _swig_property(_an_engine.match_struct_radius_get, _an_engine.match_struct_radius_set)
    __swig_setmethods__["radius_deg"] = _an_engine.match_struct_radius_deg_set
    __swig_getmethods__["radius_deg"] = _an_engine.match_struct_radius_deg_get
    if _newclass:
        radius_deg = _swig_property(_an_engine.match_struct_radius_deg_get, _an_engine.match_struct_radius_deg_set)
    __swig_setmethods__["wcs_valid"] = _an_engine.match_struct_wcs_valid_set
    __swig_getmethods__["wcs_valid"] = _an_engine.match_struct_wcs_valid_get
    if _newclass:
        wcs_valid = _swig_property(_an_engine.match_struct_wcs_valid_get, _an_engine.match_struct_wcs_valid_set)
    __swig_setmethods__["wcstan"] = _an_engine.match_struct_wcstan_set
    __swig_getmethods__["wcstan"] = _an_engine.match_struct_wcstan_get
    if _newclass:
        wcstan = _swig_property(_an_engine.match_struct_wcstan_get, _an_engine.match_struct_wcstan_set)
    __swig_setmethods__["scale"] = _an_engine.match_struct_scale_set
    __swig_getmethods__["scale"] = _an_engine.match_struct_scale_get
    if _newclass:
        scale = _swig_property(_an_engine.match_struct_scale_get, _an_engine.match_struct_scale_set)
    __swig_setmethods__["quad_npeers"] = _an_engine.match_struct_quad_npeers_set
    __swig_getmethods__["quad_npeers"] = _an_engine.match_struct_quad_npeers_get
    if _newclass:
        quad_npeers = _swig_property(_an_engine.match_struct_quad_npeers_get, _an_engine.match_struct_quad_npeers_set)
    __swig_setmethods__["nmatch"] = _an_engine.match_struct_nmatch_set
    __swig_getmethods__["nmatch"] = _an_engine.match_struct_nmatch_get
    if _newclass:
        nmatch = _swig_property(_an_engine.match_struct_nmatch_get, _an_engine.match_struct_nmatch_set)
    __swig_setmethods__["ndistractor"] = _an_engine.match_struct_ndistractor_set
    __swig_getmethods__["ndistractor"] = _an_engine.match_struct_ndistractor_get
    if _newclass:
        ndistractor = _swig_property(_an_engine.match_struct_ndistractor_get, _an_engine.match_struct_ndistractor_set)
    __swig_setmethods__["nconflict"] = _an_engine.match_struct_nconflict_set
    __swig_getmethods__["nconflict"] = _an_engine.match_struct_nconflict_get
    if _newclass:
        nconflict = _swig_property(_an_engine.match_struct_nconflict_get, _an_engine.match_struct_nconflict_set)
    __swig_setmethods__["nfield"] = _an_engine.match_struct_nfield_set
    __swig_getmethods__["nfield"] = _an_engine.match_struct_nfield_get
    if _newclass:
        nfield = _swig_property(_an_engine.match_struct_nfield_get, _an_engine.match_struct_nfield_set)
    __swig_setmethods__["nindex"] = _an_engine.match_struct_nindex_set
    __swig_getmethods__["nindex"] = _an_engine.match_struct_nindex_get
    if _newclass:
        nindex = _swig_property(_an_engine.match_struct_nindex_get, _an_engine.match_struct_nindex_set)
    __swig_setmethods__["nbest"] = _an_engine.match_struct_nbest_set
    __swig_getmethods__["nbest"] = _an_engine.match_struct_nbest_get
    if _newclass:
        nbest = _swig_property(_an_engine.match_struct_nbest_get, _an_engine.match_struct_nbest_set)
    __swig_setmethods__["logodds"] = _an_engine.match_struct_logodds_set
    __swig_getmethods__["logodds"] = _an_engine.match_struct_logodds_get
    if _newclass:
        logodds = _swig_property(_an_engine.match_struct_logodds_get, _an_engine.match_struct_logodds_set)
    __swig_setmethods__["worstlogodds"] = _an_engine.match_struct_worstlogodds_set
    __swig_getmethods__["worstlogodds"] = _an_engine.match_struct_worstlogodds_get
    if _newclass:
        worstlogodds = _swig_property(_an_engine.match_struct_worstlogodds_get, _an_engine.match_struct_worstlogodds_set)
    __swig_setmethods__["nagree"] = _an_engine.match_struct_nagree_set
    __swig_getmethods__["nagree"] = _an_engine.match_struct_nagree_get
    if _newclass:
        nagree = _swig_property(_an_engine.match_struct_nagree_get, _an_engine.match_struct_nagree_set)
    __swig_setmethods__["fieldnum"] = _an_engine.match_struct_fieldnum_set
    __swig_getmethods__["fieldnum"] = _an_engine.match_struct_fieldnum_get
    if _newclass:
        fieldnum = _swig_property(_an_engine.match_struct_fieldnum_get, _an_engine.match_struct_fieldnum_set)
    __swig_setmethods__["fieldfile"] = _an_engine.match_struct_fieldfile_set
    __swig_getmethods__["fieldfile"] = _an_engine.match_struct_fieldfile_get
    if _newclass:
        fieldfile = _swig_property(_an_engine.match_struct_fieldfile_get, _an_engine.match_struct_fieldfile_set)
    __swig_setmethods__["indexid"] = _an_engine.match_struct_indexid_set
    __swig_getmethods__["indexid"] = _an_engine.match_struct_indexid_get
    if _newclass:
        indexid = _swig_property(_an_engine.match_struct_indexid_get, _an_engine.match_struct_indexid_set)
    __swig_setmethods__["healpix"] = _an_engine.match_struct_healpix_set
    __swig_getmethods__["healpix"] = _an_engine.match_struct_healpix_get
    if _newclass:
        healpix = _swig_property(_an_engine.match_struct_healpix_get, _an_engine.match_struct_healpix_set)
    __swig_setmethods__["hpnside"] = _an_engine.match_struct_hpnside_set
    __swig_getmethods__["hpnside"] = _an_engine.match_struct_hpnside_get
    if _newclass:
        hpnside = _swig_property(_an_engine.match_struct_hpnside_get, _an_engine.match_struct_hpnside_set)
    __swig_setmethods__["fieldname"] = _an_engine.match_struct_fieldname_set
    __swig_getmethods__["fieldname"] = _an_engine.match_struct_fieldname_get
    if _newclass:
        fieldname = _swig_property(_an_engine.match_struct_fieldname_get, _an_engine.match_struct_fieldname_set)
    __swig_setmethods__["parity"] = _an_engine.match_struct_parity_set
    __swig_getmethods__["parity"] = _an_engine.match_struct_parity_get
    if _newclass:
        parity = _swig_property(_an_engine.match_struct_parity_get, _an_engine.match_struct_parity_set)
    __swig_setmethods__["quads_tried"] = _an_engine.match_struct_quads_tried_set
    __swig_getmethods__["quads_tried"] = _an_engine.match_struct_quads_tried_get
    if _newclass:
        quads_tried = _swig_property(_an_engine.match_struct_quads_tried_get, _an_engine.match_struct_quads_tried_set)
    __swig_setmethods__["quads_matched"] = _an_engine.match_struct_quads_matched_set
    __swig_getmethods__["quads_matched"] = _an_engine.match_struct_quads_matched_get
    if _newclass:
        quads_matched = _swig_property(_an_engine.match_struct_quads_matched_get, _an_engine.match_struct_quads_matched_set)
    __swig_setmethods__["quads_scaleok"] = _an_engine.match_struct_quads_scaleok_set
    __swig_getmethods__["quads_scaleok"] = _an_engine.match_struct_quads_scaleok_get
    if _newclass:
        quads_scaleok = _swig_property(_an_engine.match_struct_quads_scaleok_get, _an_engine.match_struct_quads_scaleok_set)
    __swig_setmethods__["objs_tried"] = _an_engine.match_struct_objs_tried_set
    __swig_getmethods__["objs_tried"] = _an_engine.match_struct_objs_tried_get
    if _newclass:
        objs_tried = _swig_property(_an_engine.match_struct_objs_tried_get, _an_engine.match_struct_objs_tried_set)
    __swig_setmethods__["nverified"] = _an_engine.match_struct_nverified_set
    __swig_getmethods__["nverified"] = _an_engine.match_struct_nverified_get
    if _newclass:
        nverified = _swig_property(_an_engine.match_struct_nverified_get, _an_engine.match_struct_nverified_set)
    __swig_setmethods__["timeused"] = _an_engine.match_struct_timeused_set
    __swig_getmethods__["timeused"] = _an_engine.match_struct_timeused_get
    if _newclass:
        timeused = _swig_property(_an_engine.match_struct_timeused_get, _an_engine.match_struct_timeused_set)
    __swig_setmethods__["sip"] = _an_engine.match_struct_sip_set
    __swig_getmethods__["sip"] = _an_engine.match_struct_sip_get
    if _newclass:
        sip = _swig_property(_an_engine.match_struct_sip_get, _an_engine.match_struct_sip_set)
    __swig_setmethods__["refradec"] = _an_engine.match_struct_refradec_set
    __swig_getmethods__["refradec"] = _an_engine.match_struct_refradec_get
    if _newclass:
        refradec = _swig_property(_an_engine.match_struct_refradec_get, _an_engine.match_struct_refradec_set)
    __swig_setmethods__["fieldxy"] = _an_engine.match_struct_fieldxy_set
    __swig_getmethods__["fieldxy"] = _an_engine.match_struct_fieldxy_get
    if _newclass:
        fieldxy = _swig_property(_an_engine.match_struct_fieldxy_get, _an_engine.match_struct_fieldxy_set)
    __swig_setmethods__["tagalong"] = _an_engine.match_struct_tagalong_set
    __swig_getmethods__["tagalong"] = _an_engine.match_struct_tagalong_get
    if _newclass:
        tagalong = _swig_property(_an_engine.match_struct_tagalong_get, _an_engine.match_struct_tagalong_set)
    __swig_setmethods__["field_tagalong"] = _an_engine.match_struct_field_tagalong_set
    __swig_getmethods__["field_tagalong"] = _an_engine.match_struct_field_tagalong_get
    if _newclass:
        field_tagalong = _swig_property(_an_engine.match_struct_field_tagalong_get, _an_engine.match_struct_field_tagalong_set)
    __swig_setmethods__["index_jitter"] = _an_engine.match_struct_index_jitter_set
    __swig_getmethods__["index_jitter"] = _an_engine.match_struct_index_jitter_get
    if _newclass:
        index_jitter = _swig_property(_an_engine.match_struct_index_jitter_get, _an_engine.match_struct_index_jitter_set)
    __swig_setmethods__["index"] = _an_engine.match_struct_index_set
    __swig_getmethods__["index"] = _an_engine.match_struct_index_get
    if _newclass:
        index = _swig_property(_an_engine.match_struct_index_get, _an_engine.match_struct_index_set)
    __swig_setmethods__["theta"] = _an_engine.match_struct_theta_set
    __swig_getmethods__["theta"] = _an_engine.match_struct_theta_get
    if _newclass:
        theta = _swig_property(_an_engine.match_struct_theta_get, _an_engine.match_struct_theta_set)
    __swig_setmethods__["matchodds"] = _an_engine.match_struct_matchodds_set
    __swig_getmethods__["matchodds"] = _an_engine.match_struct_matchodds_get
    if _newclass:
        matchodds = _swig_property(_an_engine.match_struct_matchodds_get, _an_engine.match_struct_matchodds_set)
    __swig_setmethods__["testperm"] = _an_engine.match_struct_testperm_set
    __swig_getmethods__["testperm"] = _an_engine.match_struct_testperm_get
    if _newclass:
        testperm = _swig_property(_an_engine.match_struct_testperm_get, _an_engine.match_struct_testperm_set)
    __swig_setmethods__["refxyz"] = _an_engine.match_struct_refxyz_set
    __swig_getmethods__["refxyz"] = _an_engine.match_struct_refxyz_get
    if _newclass:
        refxyz = _swig_property(_an_engine.match_struct_refxyz_get, _an_engine.match_struct_refxyz_set)
    __swig_setmethods__["refxy"] = _an_engine.match_struct_refxy_set
    __swig_getmethods__["refxy"] = _an_engine.match_struct_refxy_get
    if _newclass:
        refxy = _swig_property(_an_engine.match_struct_refxy_get, _an_engine.match_struct_refxy_set)
    __swig_setmethods__["refstarid"] = _an_engine.match_struct_refstarid_set
    __swig_getmethods__["refstarid"] = _an_engine.match_struct_refstarid_get
    if _newclass:
        refstarid = _swig_property(_an_engine.match_struct_refstarid_get, _an_engine.match_struct_refstarid_set)

    def __init__(self):
        """__init__(match_struct self) -> match_struct"""
        this = _an_engine.new_match_struct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_match_struct
    __del__ = lambda self: None
match_struct_swigregister = _an_engine.match_struct_swigregister
match_struct_swigregister(match_struct)


def matchobj_compute_derived(mo):
    """matchobj_compute_derived(match_struct mo)"""
    return _an_engine.matchobj_compute_derived(mo)

def matchobj_get_index_name(mo):
    """matchobj_get_index_name(match_struct mo) -> char const *"""
    return _an_engine.matchobj_get_index_name(mo)

def matchobj_log_hit_miss(nbest, nfield, loglevel, prefix):
    """matchobj_log_hit_miss(int nbest, int nfield, int loglevel, char const * prefix)"""
    return _an_engine.matchobj_log_hit_miss(nbest, nfield, loglevel, prefix)

def matchobj_hit_miss_string(nbest, nfield, target):
    """matchobj_hit_miss_string(int nbest, int nfield, char * target) -> char *"""
    return _an_engine.matchobj_hit_miss_string(nbest, nfield, target)

def matchobj_print(mo, loglvl):
    """matchobj_print(match_struct mo, int loglvl)"""
    return _an_engine.matchobj_print(mo, loglvl)
PARITY_NORMAL = _an_engine.PARITY_NORMAL
PARITY_FLIP = _an_engine.PARITY_FLIP
PARITY_BOTH = _an_engine.PARITY_BOTH
DEFAULT_CODE_TOL = _an_engine.DEFAULT_CODE_TOL
DEFAULT_TWEAK_ABORDER = _an_engine.DEFAULT_TWEAK_ABORDER
DEFAULT_TWEAK_ABPORDER = _an_engine.DEFAULT_TWEAK_ABPORDER
DEFAULT_DISTRACTOR_RATIO = _an_engine.DEFAULT_DISTRACTOR_RATIO
DEFAULT_VERIFY_PIX = _an_engine.DEFAULT_VERIFY_PIX
DEFAULT_BAIL_THRESHOLD = _an_engine.DEFAULT_BAIL_THRESHOLD
class solver_t(_object):
    """Proxy of C solver_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, solver_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, solver_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["indexes"] = _an_engine.solver_t_indexes_set
    __swig_getmethods__["indexes"] = _an_engine.solver_t_indexes_get
    if _newclass:
        indexes = _swig_property(_an_engine.solver_t_indexes_get, _an_engine.solver_t_indexes_set)
    __swig_setmethods__["fieldxy"] = _an_engine.solver_t_fieldxy_set
    __swig_getmethods__["fieldxy"] = _an_engine.solver_t_fieldxy_get
    if _newclass:
        fieldxy = _swig_property(_an_engine.solver_t_fieldxy_get, _an_engine.solver_t_fieldxy_set)
    __swig_setmethods__["predistort"] = _an_engine.solver_t_predistort_set
    __swig_getmethods__["predistort"] = _an_engine.solver_t_predistort_get
    if _newclass:
        predistort = _swig_property(_an_engine.solver_t_predistort_get, _an_engine.solver_t_predistort_set)
    __swig_setmethods__["funits_lower"] = _an_engine.solver_t_funits_lower_set
    __swig_getmethods__["funits_lower"] = _an_engine.solver_t_funits_lower_get
    if _newclass:
        funits_lower = _swig_property(_an_engine.solver_t_funits_lower_get, _an_engine.solver_t_funits_lower_set)
    __swig_setmethods__["funits_upper"] = _an_engine.solver_t_funits_upper_set
    __swig_getmethods__["funits_upper"] = _an_engine.solver_t_funits_upper_get
    if _newclass:
        funits_upper = _swig_property(_an_engine.solver_t_funits_upper_get, _an_engine.solver_t_funits_upper_set)
    __swig_setmethods__["logratio_toprint"] = _an_engine.solver_t_logratio_toprint_set
    __swig_getmethods__["logratio_toprint"] = _an_engine.solver_t_logratio_toprint_get
    if _newclass:
        logratio_toprint = _swig_property(_an_engine.solver_t_logratio_toprint_get, _an_engine.solver_t_logratio_toprint_set)
    __swig_setmethods__["logratio_tokeep"] = _an_engine.solver_t_logratio_tokeep_set
    __swig_getmethods__["logratio_tokeep"] = _an_engine.solver_t_logratio_tokeep_get
    if _newclass:
        logratio_tokeep = _swig_property(_an_engine.solver_t_logratio_tokeep_get, _an_engine.solver_t_logratio_tokeep_set)
    __swig_setmethods__["logratio_totune"] = _an_engine.solver_t_logratio_totune_set
    __swig_getmethods__["logratio_totune"] = _an_engine.solver_t_logratio_totune_get
    if _newclass:
        logratio_totune = _swig_property(_an_engine.solver_t_logratio_totune_get, _an_engine.solver_t_logratio_totune_set)
    __swig_setmethods__["record_match_callback"] = _an_engine.solver_t_record_match_callback_set
    __swig_getmethods__["record_match_callback"] = _an_engine.solver_t_record_match_callback_get
    if _newclass:
        record_match_callback = _swig_property(_an_engine.solver_t_record_match_callback_get, _an_engine.solver_t_record_match_callback_set)
    __swig_setmethods__["userdata"] = _an_engine.solver_t_userdata_set
    __swig_getmethods__["userdata"] = _an_engine.solver_t_userdata_get
    if _newclass:
        userdata = _swig_property(_an_engine.solver_t_userdata_get, _an_engine.solver_t_userdata_set)
    __swig_setmethods__["distance_from_quad_bonus"] = _an_engine.solver_t_distance_from_quad_bonus_set
    __swig_getmethods__["distance_from_quad_bonus"] = _an_engine.solver_t_distance_from_quad_bonus_get
    if _newclass:
        distance_from_quad_bonus = _swig_property(_an_engine.solver_t_distance_from_quad_bonus_get, _an_engine.solver_t_distance_from_quad_bonus_set)
    __swig_setmethods__["verify_uniformize"] = _an_engine.solver_t_verify_uniformize_set
    __swig_getmethods__["verify_uniformize"] = _an_engine.solver_t_verify_uniformize_get
    if _newclass:
        verify_uniformize = _swig_property(_an_engine.solver_t_verify_uniformize_get, _an_engine.solver_t_verify_uniformize_set)
    __swig_setmethods__["verify_dedup"] = _an_engine.solver_t_verify_dedup_set
    __swig_getmethods__["verify_dedup"] = _an_engine.solver_t_verify_dedup_get
    if _newclass:
        verify_dedup = _swig_property(_an_engine.solver_t_verify_dedup_get, _an_engine.solver_t_verify_dedup_set)
    __swig_setmethods__["do_tweak"] = _an_engine.solver_t_do_tweak_set
    __swig_getmethods__["do_tweak"] = _an_engine.solver_t_do_tweak_get
    if _newclass:
        do_tweak = _swig_property(_an_engine.solver_t_do_tweak_get, _an_engine.solver_t_do_tweak_set)
    __swig_setmethods__["tweak_aborder"] = _an_engine.solver_t_tweak_aborder_set
    __swig_getmethods__["tweak_aborder"] = _an_engine.solver_t_tweak_aborder_get
    if _newclass:
        tweak_aborder = _swig_property(_an_engine.solver_t_tweak_aborder_get, _an_engine.solver_t_tweak_aborder_set)
    __swig_setmethods__["tweak_abporder"] = _an_engine.solver_t_tweak_abporder_set
    __swig_getmethods__["tweak_abporder"] = _an_engine.solver_t_tweak_abporder_get
    if _newclass:
        tweak_abporder = _swig_property(_an_engine.solver_t_tweak_abporder_get, _an_engine.solver_t_tweak_abporder_set)
    __swig_setmethods__["verify_pix"] = _an_engine.solver_t_verify_pix_set
    __swig_getmethods__["verify_pix"] = _an_engine.solver_t_verify_pix_get
    if _newclass:
        verify_pix = _swig_property(_an_engine.solver_t_verify_pix_get, _an_engine.solver_t_verify_pix_set)
    __swig_setmethods__["distractor_ratio"] = _an_engine.solver_t_distractor_ratio_set
    __swig_getmethods__["distractor_ratio"] = _an_engine.solver_t_distractor_ratio_get
    if _newclass:
        distractor_ratio = _swig_property(_an_engine.solver_t_distractor_ratio_get, _an_engine.solver_t_distractor_ratio_set)
    __swig_setmethods__["codetol"] = _an_engine.solver_t_codetol_set
    __swig_getmethods__["codetol"] = _an_engine.solver_t_codetol_get
    if _newclass:
        codetol = _swig_property(_an_engine.solver_t_codetol_get, _an_engine.solver_t_codetol_set)
    __swig_setmethods__["quadsize_min"] = _an_engine.solver_t_quadsize_min_set
    __swig_getmethods__["quadsize_min"] = _an_engine.solver_t_quadsize_min_get
    if _newclass:
        quadsize_min = _swig_property(_an_engine.solver_t_quadsize_min_get, _an_engine.solver_t_quadsize_min_set)
    __swig_setmethods__["quadsize_max"] = _an_engine.solver_t_quadsize_max_set
    __swig_getmethods__["quadsize_max"] = _an_engine.solver_t_quadsize_max_get
    if _newclass:
        quadsize_max = _swig_property(_an_engine.solver_t_quadsize_max_get, _an_engine.solver_t_quadsize_max_set)
    __swig_setmethods__["startobj"] = _an_engine.solver_t_startobj_set
    __swig_getmethods__["startobj"] = _an_engine.solver_t_startobj_get
    if _newclass:
        startobj = _swig_property(_an_engine.solver_t_startobj_get, _an_engine.solver_t_startobj_set)
    __swig_setmethods__["endobj"] = _an_engine.solver_t_endobj_set
    __swig_getmethods__["endobj"] = _an_engine.solver_t_endobj_get
    if _newclass:
        endobj = _swig_property(_an_engine.solver_t_endobj_get, _an_engine.solver_t_endobj_set)
    __swig_setmethods__["parity"] = _an_engine.solver_t_parity_set
    __swig_getmethods__["parity"] = _an_engine.solver_t_parity_get
    if _newclass:
        parity = _swig_property(_an_engine.solver_t_parity_get, _an_engine.solver_t_parity_set)
    __swig_setmethods__["use_radec"] = _an_engine.solver_t_use_radec_set
    __swig_getmethods__["use_radec"] = _an_engine.solver_t_use_radec_get
    if _newclass:
        use_radec = _swig_property(_an_engine.solver_t_use_radec_get, _an_engine.solver_t_use_radec_set)
    __swig_setmethods__["centerxyz"] = _an_engine.solver_t_centerxyz_set
    __swig_getmethods__["centerxyz"] = _an_engine.solver_t_centerxyz_get
    if _newclass:
        centerxyz = _swig_property(_an_engine.solver_t_centerxyz_get, _an_engine.solver_t_centerxyz_set)
    __swig_setmethods__["r2"] = _an_engine.solver_t_r2_set
    __swig_getmethods__["r2"] = _an_engine.solver_t_r2_get
    if _newclass:
        r2 = _swig_property(_an_engine.solver_t_r2_get, _an_engine.solver_t_r2_set)
    __swig_setmethods__["logratio_bail_threshold"] = _an_engine.solver_t_logratio_bail_threshold_set
    __swig_getmethods__["logratio_bail_threshold"] = _an_engine.solver_t_logratio_bail_threshold_get
    if _newclass:
        logratio_bail_threshold = _swig_property(_an_engine.solver_t_logratio_bail_threshold_get, _an_engine.solver_t_logratio_bail_threshold_set)
    __swig_setmethods__["logratio_stoplooking"] = _an_engine.solver_t_logratio_stoplooking_set
    __swig_getmethods__["logratio_stoplooking"] = _an_engine.solver_t_logratio_stoplooking_get
    if _newclass:
        logratio_stoplooking = _swig_property(_an_engine.solver_t_logratio_stoplooking_get, _an_engine.solver_t_logratio_stoplooking_set)
    __swig_setmethods__["maxquads"] = _an_engine.solver_t_maxquads_set
    __swig_getmethods__["maxquads"] = _an_engine.solver_t_maxquads_get
    if _newclass:
        maxquads = _swig_property(_an_engine.solver_t_maxquads_get, _an_engine.solver_t_maxquads_set)
    __swig_setmethods__["maxmatches"] = _an_engine.solver_t_maxmatches_set
    __swig_getmethods__["maxmatches"] = _an_engine.solver_t_maxmatches_get
    if _newclass:
        maxmatches = _swig_property(_an_engine.solver_t_maxmatches_get, _an_engine.solver_t_maxmatches_set)
    __swig_setmethods__["set_crpix"] = _an_engine.solver_t_set_crpix_set
    __swig_getmethods__["set_crpix"] = _an_engine.solver_t_set_crpix_get
    if _newclass:
        set_crpix = _swig_property(_an_engine.solver_t_set_crpix_get, _an_engine.solver_t_set_crpix_set)
    __swig_setmethods__["set_crpix_center"] = _an_engine.solver_t_set_crpix_center_set
    __swig_getmethods__["set_crpix_center"] = _an_engine.solver_t_set_crpix_center_get
    if _newclass:
        set_crpix_center = _swig_property(_an_engine.solver_t_set_crpix_center_get, _an_engine.solver_t_set_crpix_center_set)
    __swig_setmethods__["crpix"] = _an_engine.solver_t_crpix_set
    __swig_getmethods__["crpix"] = _an_engine.solver_t_crpix_get
    if _newclass:
        crpix = _swig_property(_an_engine.solver_t_crpix_get, _an_engine.solver_t_crpix_set)
    __swig_setmethods__["mo_template"] = _an_engine.solver_t_mo_template_set
    __swig_getmethods__["mo_template"] = _an_engine.solver_t_mo_template_get
    if _newclass:
        mo_template = _swig_property(_an_engine.solver_t_mo_template_get, _an_engine.solver_t_mo_template_set)
    __swig_setmethods__["timer_callback"] = _an_engine.solver_t_timer_callback_set
    __swig_getmethods__["timer_callback"] = _an_engine.solver_t_timer_callback_get
    if _newclass:
        timer_callback = _swig_property(_an_engine.solver_t_timer_callback_get, _an_engine.solver_t_timer_callback_set)
    __swig_setmethods__["quit_now"] = _an_engine.solver_t_quit_now_set
    __swig_getmethods__["quit_now"] = _an_engine.solver_t_quit_now_get
    if _newclass:
        quit_now = _swig_property(_an_engine.solver_t_quit_now_get, _an_engine.solver_t_quit_now_set)
    __swig_setmethods__["numtries"] = _an_engine.solver_t_numtries_set
    __swig_getmethods__["numtries"] = _an_engine.solver_t_numtries_get
    if _newclass:
        numtries = _swig_property(_an_engine.solver_t_numtries_get, _an_engine.solver_t_numtries_set)
    __swig_setmethods__["nummatches"] = _an_engine.solver_t_nummatches_set
    __swig_getmethods__["nummatches"] = _an_engine.solver_t_nummatches_get
    if _newclass:
        nummatches = _swig_property(_an_engine.solver_t_nummatches_get, _an_engine.solver_t_nummatches_set)
    __swig_setmethods__["numscaleok"] = _an_engine.solver_t_numscaleok_set
    __swig_getmethods__["numscaleok"] = _an_engine.solver_t_numscaleok_get
    if _newclass:
        numscaleok = _swig_property(_an_engine.solver_t_numscaleok_get, _an_engine.solver_t_numscaleok_set)
    __swig_setmethods__["last_examined_object"] = _an_engine.solver_t_last_examined_object_set
    __swig_getmethods__["last_examined_object"] = _an_engine.solver_t_last_examined_object_get
    if _newclass:
        last_examined_object = _swig_property(_an_engine.solver_t_last_examined_object_get, _an_engine.solver_t_last_examined_object_set)
    __swig_setmethods__["num_cxdx_skipped"] = _an_engine.solver_t_num_cxdx_skipped_set
    __swig_getmethods__["num_cxdx_skipped"] = _an_engine.solver_t_num_cxdx_skipped_get
    if _newclass:
        num_cxdx_skipped = _swig_property(_an_engine.solver_t_num_cxdx_skipped_get, _an_engine.solver_t_num_cxdx_skipped_set)
    __swig_setmethods__["num_meanx_skipped"] = _an_engine.solver_t_num_meanx_skipped_set
    __swig_getmethods__["num_meanx_skipped"] = _an_engine.solver_t_num_meanx_skipped_get
    if _newclass:
        num_meanx_skipped = _swig_property(_an_engine.solver_t_num_meanx_skipped_get, _an_engine.solver_t_num_meanx_skipped_set)
    __swig_setmethods__["num_radec_skipped"] = _an_engine.solver_t_num_radec_skipped_set
    __swig_getmethods__["num_radec_skipped"] = _an_engine.solver_t_num_radec_skipped_get
    if _newclass:
        num_radec_skipped = _swig_property(_an_engine.solver_t_num_radec_skipped_get, _an_engine.solver_t_num_radec_skipped_set)
    __swig_setmethods__["num_abscale_skipped"] = _an_engine.solver_t_num_abscale_skipped_set
    __swig_getmethods__["num_abscale_skipped"] = _an_engine.solver_t_num_abscale_skipped_get
    if _newclass:
        num_abscale_skipped = _swig_property(_an_engine.solver_t_num_abscale_skipped_get, _an_engine.solver_t_num_abscale_skipped_set)
    __swig_setmethods__["num_verified"] = _an_engine.solver_t_num_verified_set
    __swig_getmethods__["num_verified"] = _an_engine.solver_t_num_verified_get
    if _newclass:
        num_verified = _swig_property(_an_engine.solver_t_num_verified_get, _an_engine.solver_t_num_verified_set)
    __swig_setmethods__["index"] = _an_engine.solver_t_index_set
    __swig_getmethods__["index"] = _an_engine.solver_t_index_get
    if _newclass:
        index = _swig_property(_an_engine.solver_t_index_get, _an_engine.solver_t_index_set)
    __swig_setmethods__["minminAB2"] = _an_engine.solver_t_minminAB2_set
    __swig_getmethods__["minminAB2"] = _an_engine.solver_t_minminAB2_get
    if _newclass:
        minminAB2 = _swig_property(_an_engine.solver_t_minminAB2_get, _an_engine.solver_t_minminAB2_set)
    __swig_setmethods__["maxmaxAB2"] = _an_engine.solver_t_maxmaxAB2_set
    __swig_getmethods__["maxmaxAB2"] = _an_engine.solver_t_maxmaxAB2_get
    if _newclass:
        maxmaxAB2 = _swig_property(_an_engine.solver_t_maxmaxAB2_get, _an_engine.solver_t_maxmaxAB2_set)
    __swig_setmethods__["rel_index_noise2"] = _an_engine.solver_t_rel_index_noise2_set
    __swig_getmethods__["rel_index_noise2"] = _an_engine.solver_t_rel_index_noise2_get
    if _newclass:
        rel_index_noise2 = _swig_property(_an_engine.solver_t_rel_index_noise2_get, _an_engine.solver_t_rel_index_noise2_set)
    __swig_setmethods__["rel_field_noise2"] = _an_engine.solver_t_rel_field_noise2_set
    __swig_getmethods__["rel_field_noise2"] = _an_engine.solver_t_rel_field_noise2_get
    if _newclass:
        rel_field_noise2 = _swig_property(_an_engine.solver_t_rel_field_noise2_get, _an_engine.solver_t_rel_field_noise2_set)
    __swig_setmethods__["abscale_low"] = _an_engine.solver_t_abscale_low_set
    __swig_getmethods__["abscale_low"] = _an_engine.solver_t_abscale_low_get
    if _newclass:
        abscale_low = _swig_property(_an_engine.solver_t_abscale_low_get, _an_engine.solver_t_abscale_low_set)
    __swig_setmethods__["abscale_high"] = _an_engine.solver_t_abscale_high_set
    __swig_getmethods__["abscale_high"] = _an_engine.solver_t_abscale_high_get
    if _newclass:
        abscale_high = _swig_property(_an_engine.solver_t_abscale_high_get, _an_engine.solver_t_abscale_high_set)
    __swig_setmethods__["field_minx"] = _an_engine.solver_t_field_minx_set
    __swig_getmethods__["field_minx"] = _an_engine.solver_t_field_minx_get
    if _newclass:
        field_minx = _swig_property(_an_engine.solver_t_field_minx_get, _an_engine.solver_t_field_minx_set)
    __swig_setmethods__["field_maxx"] = _an_engine.solver_t_field_maxx_set
    __swig_getmethods__["field_maxx"] = _an_engine.solver_t_field_maxx_get
    if _newclass:
        field_maxx = _swig_property(_an_engine.solver_t_field_maxx_get, _an_engine.solver_t_field_maxx_set)
    __swig_setmethods__["field_miny"] = _an_engine.solver_t_field_miny_set
    __swig_getmethods__["field_miny"] = _an_engine.solver_t_field_miny_get
    if _newclass:
        field_miny = _swig_property(_an_engine.solver_t_field_miny_get, _an_engine.solver_t_field_miny_set)
    __swig_setmethods__["field_maxy"] = _an_engine.solver_t_field_maxy_set
    __swig_getmethods__["field_maxy"] = _an_engine.solver_t_field_maxy_get
    if _newclass:
        field_maxy = _swig_property(_an_engine.solver_t_field_maxy_get, _an_engine.solver_t_field_maxy_set)
    __swig_setmethods__["field_diag"] = _an_engine.solver_t_field_diag_set
    __swig_getmethods__["field_diag"] = _an_engine.solver_t_field_diag_get
    if _newclass:
        field_diag = _swig_property(_an_engine.solver_t_field_diag_get, _an_engine.solver_t_field_diag_set)
    __swig_setmethods__["cxdx_margin"] = _an_engine.solver_t_cxdx_margin_set
    __swig_getmethods__["cxdx_margin"] = _an_engine.solver_t_cxdx_margin_get
    if _newclass:
        cxdx_margin = _swig_property(_an_engine.solver_t_cxdx_margin_get, _an_engine.solver_t_cxdx_margin_set)
    __swig_setmethods__["starttime"] = _an_engine.solver_t_starttime_set
    __swig_getmethods__["starttime"] = _an_engine.solver_t_starttime_get
    if _newclass:
        starttime = _swig_property(_an_engine.solver_t_starttime_get, _an_engine.solver_t_starttime_set)
    __swig_setmethods__["timeused"] = _an_engine.solver_t_timeused_set
    __swig_getmethods__["timeused"] = _an_engine.solver_t_timeused_get
    if _newclass:
        timeused = _swig_property(_an_engine.solver_t_timeused_get, _an_engine.solver_t_timeused_set)
    __swig_setmethods__["best_logodds"] = _an_engine.solver_t_best_logodds_set
    __swig_getmethods__["best_logodds"] = _an_engine.solver_t_best_logodds_get
    if _newclass:
        best_logodds = _swig_property(_an_engine.solver_t_best_logodds_get, _an_engine.solver_t_best_logodds_set)
    __swig_setmethods__["best_match"] = _an_engine.solver_t_best_match_set
    __swig_getmethods__["best_match"] = _an_engine.solver_t_best_match_get
    if _newclass:
        best_match = _swig_property(_an_engine.solver_t_best_match_get, _an_engine.solver_t_best_match_set)
    __swig_setmethods__["best_index"] = _an_engine.solver_t_best_index_set
    __swig_getmethods__["best_index"] = _an_engine.solver_t_best_index_get
    if _newclass:
        best_index = _swig_property(_an_engine.solver_t_best_index_get, _an_engine.solver_t_best_index_set)
    __swig_setmethods__["best_match_solves"] = _an_engine.solver_t_best_match_solves_set
    __swig_getmethods__["best_match_solves"] = _an_engine.solver_t_best_match_solves_get
    if _newclass:
        best_match_solves = _swig_property(_an_engine.solver_t_best_match_solves_get, _an_engine.solver_t_best_match_solves_set)
    __swig_setmethods__["have_best_match"] = _an_engine.solver_t_have_best_match_set
    __swig_getmethods__["have_best_match"] = _an_engine.solver_t_have_best_match_get
    if _newclass:
        have_best_match = _swig_property(_an_engine.solver_t_have_best_match_get, _an_engine.solver_t_have_best_match_set)
    __swig_setmethods__["vf"] = _an_engine.solver_t_vf_set
    __swig_getmethods__["vf"] = _an_engine.solver_t_vf_get
    if _newclass:
        vf = _swig_property(_an_engine.solver_t_vf_get, _an_engine.solver_t_vf_set)

    def __init__(self):
        """__init__(solver_t self) -> solver_t"""
        this = _an_engine.new_solver_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _an_engine.delete_solver_t
    __del__ = lambda self: None
solver_t_swigregister = _an_engine.solver_t_swigregister
solver_t_swigregister(solver_t)


def solver_new():
    """solver_new() -> solver_t"""
    return _an_engine.solver_new()

def solver_set_default_values(solver):
    """solver_set_default_values(solver_t solver)"""
    return _an_engine.solver_set_default_values(solver)

def solver_get_field_jitter(solver):
    """solver_get_field_jitter(solver_t solver) -> double"""
    return _an_engine.solver_get_field_jitter(solver)

def solver_set_keep_logodds(solver, logodds):
    """solver_set_keep_logodds(solver_t solver, double logodds)"""
    return _an_engine.solver_set_keep_logodds(solver, logodds)

def solver_set_parity(solver, parity):
    """solver_set_parity(solver_t solver, int parity) -> int"""
    return _an_engine.solver_set_parity(solver, parity)

def solver_get_field_center(solver):
    """solver_get_field_center(solver_t solver)"""
    return _an_engine.solver_get_field_center(solver)

def solver_get_max_radius_arcsec(solver):
    """solver_get_max_radius_arcsec(solver_t solver) -> double"""
    return _an_engine.solver_get_max_radius_arcsec(solver)

def solver_get_best_match(solver):
    """solver_get_best_match(solver_t solver) -> match_struct"""
    return _an_engine.solver_get_best_match(solver)

def solver_did_solve(solver):
    """solver_did_solve(solver_t solver) -> anbool"""
    return _an_engine.solver_did_solve(solver)

def solver_get_best_match_index_name(solver):
    """solver_get_best_match_index_name(solver_t solver) -> char const *"""
    return _an_engine.solver_get_best_match_index_name(solver)

def solver_get_pixscale_low(solver):
    """solver_get_pixscale_low(solver_t solver) -> double"""
    return _an_engine.solver_get_pixscale_low(solver)

def solver_get_pixscale_high(solver):
    """solver_get_pixscale_high(solver_t solver) -> double"""
    return _an_engine.solver_get_pixscale_high(solver)

def solver_set_quad_size_range(solver, qmin, qmax):
    """solver_set_quad_size_range(solver_t solver, double qmin, double qmax)"""
    return _an_engine.solver_set_quad_size_range(solver, qmin, qmax)

def solver_set_quad_size_fraction(solver, qmin, qmax):
    """solver_set_quad_size_fraction(solver_t solver, double qmin, double qmax)"""
    return _an_engine.solver_set_quad_size_fraction(solver, qmin, qmax)

def solver_get_quad_size_range_arcsec(solver):
    """solver_get_quad_size_range_arcsec(solver_t solver)"""
    return _an_engine.solver_get_quad_size_range_arcsec(solver)

def solver_free(arg1):
    """solver_free(solver_t arg1)"""
    return _an_engine.solver_free(arg1)

def solver_set_field(s, field):
    """solver_set_field(solver_t s, starxy_t field)"""
    return _an_engine.solver_set_field(s, field)

def solver_get_field(solver):
    """solver_get_field(solver_t solver) -> starxy_t"""
    return _an_engine.solver_get_field(solver)

def solver_reset_field_size(s):
    """solver_reset_field_size(solver_t s)"""
    return _an_engine.solver_reset_field_size(s)

def solver_set_radec(s, ra, dec, radius_deg):
    """solver_set_radec(solver_t s, double ra, double dec, double radius_deg)"""
    return _an_engine.solver_set_radec(s, ra, dec, radius_deg)

def solver_clear_radec(s):
    """solver_clear_radec(solver_t s)"""
    return _an_engine.solver_clear_radec(s)

def solver_set_field_bounds(s, xlo, xhi, ylo, yhi):
    """solver_set_field_bounds(solver_t s, double xlo, double xhi, double ylo, double yhi)"""
    return _an_engine.solver_set_field_bounds(s, xlo, xhi, ylo, yhi)

def solver_cleanup_field(arg1):
    """solver_cleanup_field(solver_t arg1)"""
    return _an_engine.solver_cleanup_field(arg1)

def solver_field_width(t):
    """solver_field_width(solver_t t) -> double"""
    return _an_engine.solver_field_width(t)

def solver_field_height(t):
    """solver_field_height(solver_t t) -> double"""
    return _an_engine.solver_field_height(t)

def solver_add_index(solver, index):
    """solver_add_index(solver_t solver, index_t index)"""
    return _an_engine.solver_add_index(solver, index)

def solver_clear_indexes(solver):
    """solver_clear_indexes(solver_t solver)"""
    return _an_engine.solver_clear_indexes(solver)

def solver_n_indices(solver):
    """solver_n_indices(solver_t solver) -> int"""
    return _an_engine.solver_n_indices(solver)

def solver_get_index(solver, i):
    """solver_get_index(solver_t solver, int i) -> index_t"""
    return _an_engine.solver_get_index(solver, i)

def solver_verify_sip_wcs(solver, sip):
    """solver_verify_sip_wcs(solver_t solver, sip_t sip)"""
    return _an_engine.solver_verify_sip_wcs(solver, sip)

def solver_run(solver):
    """solver_run(solver_t solver)"""
    return _an_engine.solver_run(solver)
SOLVER_TWEAK2_AVAILABLE = _an_engine.SOLVER_TWEAK2_AVAILABLE

def solver_tweak2(solver, mo, order, verifysip):
    """solver_tweak2(solver_t solver, match_struct mo, int order, sip_t verifysip)"""
    return _an_engine.solver_tweak2(solver, mo, order, verifysip)

def solver_cleanup(solver):
    """solver_cleanup(solver_t solver)"""
    return _an_engine.solver_cleanup(solver)

def solver_preprocess_field(sp):
    """solver_preprocess_field(solver_t sp)"""
    return _an_engine.solver_preprocess_field(sp)

def solver_free_field(sp):
    """solver_free_field(solver_t sp)"""
    return _an_engine.solver_free_field(sp)

def solver_inject_match(solver, mo, sip):
    """solver_inject_match(solver_t solver, match_struct mo, sip_t sip)"""
    return _an_engine.solver_inject_match(solver, mo, sip)

def solver_compute_quad_range(solver, index):
    """solver_compute_quad_range(solver_t solver, index_t index)"""
    return _an_engine.solver_compute_quad_range(solver, index)

def solver_reset_counters(t):
    """solver_reset_counters(solver_t t)"""
    return _an_engine.solver_reset_counters(t)

def solver_reset_best_match(sp):
    """solver_reset_best_match(solver_t sp)"""
    return _an_engine.solver_reset_best_match(sp)

def solver_print_to(sp, stream):
    """solver_print_to(solver_t sp, FILE * stream)"""
    return _an_engine.solver_print_to(sp, stream)

def solver_log_params(sp):
    """solver_log_params(solver_t sp)"""
    return _an_engine.solver_log_params(sp)

def tweak2(fieldxy, Nfield, fieldjitter, W, H, indexradec, Nindex, indexjitter, quadcenter, quadR2, distractors, logodds_bail, sip_order, sip_invorder, startwcs, destwcs, newtheta, newodds, startorder):
    """tweak2(double const * fieldxy, int Nfield, double fieldjitter, int W, int H, double const * indexradec, int Nindex, double indexjitter, double const * quadcenter, double quadR2, double distractors, double logodds_bail, int sip_order, int sip_invorder, sip_t startwcs, sip_t destwcs, int ** newtheta, double ** newodds, int startorder) -> sip_t"""
    return _an_engine.tweak2(fieldxy, Nfield, fieldjitter, W, H, indexradec, Nindex, indexjitter, quadcenter, quadR2, distractors, logodds_bail, sip_order, sip_invorder, startwcs, destwcs, newtheta, newodds, startorder)

def healpix_distance_to_radec(hp, Nside, ra, dec):
    """healpix_distance_to_radec(int hp, int Nside, double ra, double dec) -> double"""
    return _an_engine.healpix_distance_to_radec(hp, Nside, ra, dec)

def healpix_within_range_of_radec(hp, Nside, ra, dec, radius):
    """healpix_within_range_of_radec(int hp, int Nside, double ra, double dec, double radius) -> int"""
    return _an_engine.healpix_within_range_of_radec(hp, Nside, ra, dec, radius)

def log_init(arg1):
    """log_init(int arg1)"""
    return _an_engine.log_init(arg1)
# This file is compatible with both classic and new-style classes.


