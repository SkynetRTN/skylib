# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _an_engine
else:
    import _an_engine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DoubleArray(object):
    r"""Proxy of C DoubleArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        r"""__init__(DoubleArray self, size_t nelements) -> DoubleArray"""
        _an_engine.DoubleArray_swiginit(self, _an_engine.new_DoubleArray(nelements))
    __swig_destroy__ = _an_engine.delete_DoubleArray

    def __getitem__(self, index):
        r"""__getitem__(DoubleArray self, size_t index) -> double"""
        return _an_engine.DoubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        r"""__setitem__(DoubleArray self, size_t index, double value)"""
        return _an_engine.DoubleArray___setitem__(self, index, value)

    def cast(self):
        r"""cast(DoubleArray self) -> double *"""
        return _an_engine.DoubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> DoubleArray"""
        return _an_engine.DoubleArray_frompointer(t)

# Register DoubleArray in _an_engine:
_an_engine.DoubleArray_swigregister(DoubleArray)

def DoubleArray_frompointer(t):
    r"""DoubleArray_frompointer(double * t) -> DoubleArray"""
    return _an_engine.DoubleArray_frompointer(t)

class IntArray(object):
    r"""Proxy of C IntArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        r"""__init__(IntArray self, size_t nelements) -> IntArray"""
        _an_engine.IntArray_swiginit(self, _an_engine.new_IntArray(nelements))
    __swig_destroy__ = _an_engine.delete_IntArray

    def __getitem__(self, index):
        r"""__getitem__(IntArray self, size_t index) -> int"""
        return _an_engine.IntArray___getitem__(self, index)

    def __setitem__(self, index, value):
        r"""__setitem__(IntArray self, size_t index, int value)"""
        return _an_engine.IntArray___setitem__(self, index, value)

    def cast(self):
        r"""cast(IntArray self) -> int *"""
        return _an_engine.IntArray_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> IntArray"""
        return _an_engine.IntArray_frompointer(t)

# Register IntArray in _an_engine:
_an_engine.IntArray_swigregister(IntArray)

def IntArray_frompointer(t):
    r"""IntArray_frompointer(int * t) -> IntArray"""
    return _an_engine.IntArray_frompointer(t)

class UIntArray(object):
    r"""Proxy of C UIntArray struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        r"""__init__(UIntArray self, size_t nelements) -> UIntArray"""
        _an_engine.UIntArray_swiginit(self, _an_engine.new_UIntArray(nelements))
    __swig_destroy__ = _an_engine.delete_UIntArray

    def __getitem__(self, index):
        r"""__getitem__(UIntArray self, size_t index) -> unsigned int"""
        return _an_engine.UIntArray___getitem__(self, index)

    def __setitem__(self, index, value):
        r"""__setitem__(UIntArray self, size_t index, unsigned int value)"""
        return _an_engine.UIntArray___setitem__(self, index, value)

    def cast(self):
        r"""cast(UIntArray self) -> unsigned int *"""
        return _an_engine.UIntArray_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(unsigned int * t) -> UIntArray"""
        return _an_engine.UIntArray_frompointer(t)

# Register UIntArray in _an_engine:
_an_engine.UIntArray_swigregister(UIntArray)

def UIntArray_frompointer(t):
    r"""UIntArray_frompointer(unsigned int * t) -> UIntArray"""
    return _an_engine.UIntArray_frompointer(t)


def voidp_to_doublep(x):
    r"""voidp_to_doublep(void * x) -> double *"""
    return _an_engine.voidp_to_doublep(x)

def voidp_to_intp(x):
    r"""voidp_to_intp(void * x) -> int *"""
    return _an_engine.voidp_to_intp(x)

def voidp_to_uintp(x):
    r"""voidp_to_uintp(void * x) -> unsigned int *"""
    return _an_engine.voidp_to_uintp(x)

def set_timer_callback(solver, cbptr):
    r"""set_timer_callback(solver_t solver, unsigned long cbptr)"""
    return _an_engine.set_timer_callback(solver, cbptr)
TRUE = _an_engine.TRUE

FALSE = _an_engine.FALSE

DEFAULT_INDEX_JITTER = _an_engine.DEFAULT_INDEX_JITTER

class index_t(object):
    r"""Proxy of C index_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    codekd = property(_an_engine.index_t_codekd_get, _an_engine.index_t_codekd_set, doc=r"""codekd : p.codetree_t""")
    quads = property(_an_engine.index_t_quads_get, _an_engine.index_t_quads_set, doc=r"""quads : p.quadfile_t""")
    starkd = property(_an_engine.index_t_starkd_get, _an_engine.index_t_starkd_set, doc=r"""starkd : p.startree_t""")
    fits = property(_an_engine.index_t_fits_get, _an_engine.index_t_fits_set, doc=r"""fits : p.anqfits_t""")
    indexfn = property(_an_engine.index_t_indexfn_get, _an_engine.index_t_indexfn_set, doc=r"""indexfn : p.char""")
    indexname = property(_an_engine.index_t_indexname_get, _an_engine.index_t_indexname_set, doc=r"""indexname : p.char""")
    indexid = property(_an_engine.index_t_indexid_get, _an_engine.index_t_indexid_set, doc=r"""indexid : int""")
    healpix = property(_an_engine.index_t_healpix_get, _an_engine.index_t_healpix_set, doc=r"""healpix : int""")
    hpnside = property(_an_engine.index_t_hpnside_get, _an_engine.index_t_hpnside_set, doc=r"""hpnside : int""")
    index_jitter = property(_an_engine.index_t_index_jitter_get, _an_engine.index_t_index_jitter_set, doc=r"""index_jitter : double""")
    cutnside = property(_an_engine.index_t_cutnside_get, _an_engine.index_t_cutnside_set, doc=r"""cutnside : int""")
    cutnsweep = property(_an_engine.index_t_cutnsweep_get, _an_engine.index_t_cutnsweep_set, doc=r"""cutnsweep : int""")
    cutdedup = property(_an_engine.index_t_cutdedup_get, _an_engine.index_t_cutdedup_set, doc=r"""cutdedup : double""")
    cutband = property(_an_engine.index_t_cutband_get, _an_engine.index_t_cutband_set, doc=r"""cutband : p.char""")
    cutmargin = property(_an_engine.index_t_cutmargin_get, _an_engine.index_t_cutmargin_set, doc=r"""cutmargin : int""")
    circle = property(_an_engine.index_t_circle_get, _an_engine.index_t_circle_set, doc=r"""circle : anbool""")
    cx_less_than_dx = property(_an_engine.index_t_cx_less_than_dx_get, _an_engine.index_t_cx_less_than_dx_set, doc=r"""cx_less_than_dx : anbool""")
    meanx_less_than_half = property(_an_engine.index_t_meanx_less_than_half_get, _an_engine.index_t_meanx_less_than_half_set, doc=r"""meanx_less_than_half : anbool""")
    index_scale_upper = property(_an_engine.index_t_index_scale_upper_get, _an_engine.index_t_index_scale_upper_set, doc=r"""index_scale_upper : double""")
    index_scale_lower = property(_an_engine.index_t_index_scale_lower_get, _an_engine.index_t_index_scale_lower_set, doc=r"""index_scale_lower : double""")
    dimquads = property(_an_engine.index_t_dimquads_get, _an_engine.index_t_dimquads_set, doc=r"""dimquads : int""")
    nstars = property(_an_engine.index_t_nstars_get, _an_engine.index_t_nstars_set, doc=r"""nstars : int""")
    nquads = property(_an_engine.index_t_nquads_get, _an_engine.index_t_nquads_set, doc=r"""nquads : int""")

    def __init__(self):
        r"""__init__(index_t self) -> index_t"""
        _an_engine.index_t_swiginit(self, _an_engine.new_index_t())
    __swig_destroy__ = _an_engine.delete_index_t

# Register index_t in _an_engine:
_an_engine.index_t_swigregister(index_t)


def index_dimquads(indx):
    r"""index_dimquads(index_t indx) -> int"""
    return _an_engine.index_dimquads(indx)

def index_overlaps_scale_range(indx, quadlo, quadhi):
    r"""index_overlaps_scale_range(index_t indx, double quadlo, double quadhi) -> anbool"""
    return _an_engine.index_overlaps_scale_range(indx, quadlo, quadhi)

def index_is_within_range(indx, ra, dec, radius_deg):
    r"""index_is_within_range(index_t indx, double ra, double dec, double radius_deg) -> anbool"""
    return _an_engine.index_is_within_range(indx, ra, dec, radius_deg)

def index_get_meta(filename, indx):
    r"""index_get_meta(char const * filename, index_t indx) -> int"""
    return _an_engine.index_get_meta(filename, indx)

def index_is_file_index(filename):
    r"""index_is_file_index(char const * filename) -> anbool"""
    return _an_engine.index_is_file_index(filename)

def index_get_quad_filename(indexname):
    r"""index_get_quad_filename(char const * indexname) -> char *"""
    return _an_engine.index_get_quad_filename(indexname)

def index_get_qidx_filename(indexname):
    r"""index_get_qidx_filename(char const * indexname) -> char *"""
    return _an_engine.index_get_qidx_filename(indexname)
INDEX_ONLY_LOAD_METADATA = _an_engine.INDEX_ONLY_LOAD_METADATA


def index_get_quad_dim(index):
    r"""index_get_quad_dim(index_t index) -> int"""
    return _an_engine.index_get_quad_dim(index)

def index_get_code_dim(index):
    r"""index_get_code_dim(index_t index) -> int"""
    return _an_engine.index_get_code_dim(index)

def index_nquads(index):
    r"""index_nquads(index_t index) -> int"""
    return _an_engine.index_nquads(index)

def index_nstars(index):
    r"""index_nstars(index_t index) -> int"""
    return _an_engine.index_nstars(index)

def index_build_from(codekd, quads, starkd):
    r"""index_build_from(codetree_t * codekd, quadfile_t * quads, startree_t starkd) -> index_t"""
    return _an_engine.index_build_from(codekd, quads, starkd)

def index_load(indexname, flags, dest):
    r"""index_load(char const * indexname, int flags, index_t dest) -> index_t"""
    return _an_engine.index_load(indexname, flags, dest)

def index_unload(index):
    r"""index_unload(index_t index)"""
    return _an_engine.index_unload(index)

def index_reload(index):
    r"""index_reload(index_t index) -> int"""
    return _an_engine.index_reload(index)

def index_close_fds(index):
    r"""index_close_fds(index_t index) -> int"""
    return _an_engine.index_close_fds(index)

def index_close(index):
    r"""index_close(index_t index)"""
    return _an_engine.index_close(index)

def index_free(index):
    r"""index_free(index_t index)"""
    return _an_engine.index_free(index)

def index_get_missing_cut_params(indexid, band):
    r"""index_get_missing_cut_params(int indexid, char ** band) -> int"""
    return _an_engine.index_get_missing_cut_params(indexid, band)
FITSVALSZ = _an_engine.FITSVALSZ

QFITS_INVALIDTABLE = _an_engine.QFITS_INVALIDTABLE

QFITS_BINTABLE = _an_engine.QFITS_BINTABLE

QFITS_ASCIITABLE = _an_engine.QFITS_ASCIITABLE

TFITS_ASCII_TYPE_A = _an_engine.TFITS_ASCII_TYPE_A

TFITS_ASCII_TYPE_D = _an_engine.TFITS_ASCII_TYPE_D

TFITS_ASCII_TYPE_E = _an_engine.TFITS_ASCII_TYPE_E

TFITS_ASCII_TYPE_F = _an_engine.TFITS_ASCII_TYPE_F

TFITS_ASCII_TYPE_I = _an_engine.TFITS_ASCII_TYPE_I

TFITS_BIN_TYPE_A = _an_engine.TFITS_BIN_TYPE_A

TFITS_BIN_TYPE_B = _an_engine.TFITS_BIN_TYPE_B

TFITS_BIN_TYPE_C = _an_engine.TFITS_BIN_TYPE_C

TFITS_BIN_TYPE_D = _an_engine.TFITS_BIN_TYPE_D

TFITS_BIN_TYPE_E = _an_engine.TFITS_BIN_TYPE_E

TFITS_BIN_TYPE_I = _an_engine.TFITS_BIN_TYPE_I

TFITS_BIN_TYPE_J = _an_engine.TFITS_BIN_TYPE_J

TFITS_BIN_TYPE_K = _an_engine.TFITS_BIN_TYPE_K

TFITS_BIN_TYPE_L = _an_engine.TFITS_BIN_TYPE_L

TFITS_BIN_TYPE_M = _an_engine.TFITS_BIN_TYPE_M

TFITS_BIN_TYPE_P = _an_engine.TFITS_BIN_TYPE_P

TFITS_BIN_TYPE_X = _an_engine.TFITS_BIN_TYPE_X

TFITS_BIN_TYPE_UNKNOWN = _an_engine.TFITS_BIN_TYPE_UNKNOWN

class qfits_col(object):
    r"""Proxy of C qfits_col struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    atom_nb = property(_an_engine.qfits_col_atom_nb_get, _an_engine.qfits_col_atom_nb_set, doc=r"""atom_nb : int""")
    atom_dec_nb = property(_an_engine.qfits_col_atom_dec_nb_get, _an_engine.qfits_col_atom_dec_nb_set, doc=r"""atom_dec_nb : int""")
    atom_size = property(_an_engine.qfits_col_atom_size_get, _an_engine.qfits_col_atom_size_set, doc=r"""atom_size : int""")
    atom_type = property(_an_engine.qfits_col_atom_type_get, _an_engine.qfits_col_atom_type_set, doc=r"""atom_type : tfits_type""")
    tlabel = property(_an_engine.qfits_col_tlabel_get, _an_engine.qfits_col_tlabel_set, doc=r"""tlabel : a(60).char""")
    tunit = property(_an_engine.qfits_col_tunit_get, _an_engine.qfits_col_tunit_set, doc=r"""tunit : a(60).char""")
    nullval = property(_an_engine.qfits_col_nullval_get, _an_engine.qfits_col_nullval_set, doc=r"""nullval : a(60).char""")
    tdisp = property(_an_engine.qfits_col_tdisp_get, _an_engine.qfits_col_tdisp_set, doc=r"""tdisp : a(60).char""")
    zero_present = property(_an_engine.qfits_col_zero_present_get, _an_engine.qfits_col_zero_present_set, doc=r"""zero_present : int""")
    zero = property(_an_engine.qfits_col_zero_get, _an_engine.qfits_col_zero_set, doc=r"""zero : float""")
    scale_present = property(_an_engine.qfits_col_scale_present_get, _an_engine.qfits_col_scale_present_set, doc=r"""scale_present : int""")
    scale = property(_an_engine.qfits_col_scale_get, _an_engine.qfits_col_scale_set, doc=r"""scale : float""")
    off_beg = property(_an_engine.qfits_col_off_beg_get, _an_engine.qfits_col_off_beg_set, doc=r"""off_beg : int""")
    readable = property(_an_engine.qfits_col_readable_get, _an_engine.qfits_col_readable_set, doc=r"""readable : int""")

    def __init__(self):
        r"""__init__(qfits_col self) -> qfits_col"""
        _an_engine.qfits_col_swiginit(self, _an_engine.new_qfits_col())
    __swig_destroy__ = _an_engine.delete_qfits_col

# Register qfits_col in _an_engine:
_an_engine.qfits_col_swigregister(qfits_col)

class qfits_table(object):
    r"""Proxy of C qfits_table struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filename = property(_an_engine.qfits_table_filename_get, _an_engine.qfits_table_filename_set, doc=r"""filename : a(512).char""")
    tab_t = property(_an_engine.qfits_table_tab_t_get, _an_engine.qfits_table_tab_t_set, doc=r"""tab_t : int""")
    tab_w = property(_an_engine.qfits_table_tab_w_get, _an_engine.qfits_table_tab_w_set, doc=r"""tab_w : int""")
    nc = property(_an_engine.qfits_table_nc_get, _an_engine.qfits_table_nc_set, doc=r"""nc : int""")
    nr = property(_an_engine.qfits_table_nr_get, _an_engine.qfits_table_nr_set, doc=r"""nr : int""")
    col = property(_an_engine.qfits_table_col_get, _an_engine.qfits_table_col_set, doc=r"""col : p.qfits_col""")

    def __init__(self):
        r"""__init__(qfits_table self) -> qfits_table"""
        _an_engine.qfits_table_swiginit(self, _an_engine.new_qfits_table())
    __swig_destroy__ = _an_engine.delete_qfits_table

# Register qfits_table in _an_engine:
_an_engine.qfits_table_swigregister(qfits_table)


def qfits_table_copy(t):
    r"""qfits_table_copy(qfits_table t) -> qfits_table"""
    return _an_engine.qfits_table_copy(t)

def qfits_table_prim_header_default():
    r"""qfits_table_prim_header_default() -> qfits_header *"""
    return _an_engine.qfits_table_prim_header_default()

def qfits_table_ext_header_default(arg1):
    r"""qfits_table_ext_header_default(qfits_table arg1) -> qfits_header *"""
    return _an_engine.qfits_table_ext_header_default(arg1)

def qfits_table_new(arg1, arg2, arg3, arg4, arg5):
    r"""qfits_table_new(char const * arg1, int arg2, int arg3, int arg4, int arg5) -> qfits_table"""
    return _an_engine.qfits_table_new(arg1, arg2, arg3, arg4, arg5)

def qfits_col_fill(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    r"""qfits_col_fill(qfits_col arg1, int arg2, int arg3, int arg4, tfits_type arg5, char const * arg6, char const * arg7, char const * arg8, char const * arg9, int arg10, float arg11, int arg12, float arg13, int arg14) -> int"""
    return _an_engine.qfits_col_fill(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def qfits_table_open2(hdr, offset_beg, data_size, filename, xtnum):
    r"""qfits_table_open2(qfits_header const * hdr, off_t offset_beg, size_t data_size, char const * filename, int xtnum) -> qfits_table"""
    return _an_engine.qfits_table_open2(hdr, offset_beg, data_size, filename, xtnum)

def qfits_table_close(arg1):
    r"""qfits_table_close(qfits_table arg1)"""
    return _an_engine.qfits_table_close(arg1)

def qfits_query_column(arg1, arg2):
    r"""qfits_query_column(qfits_table arg1, int arg2) -> unsigned char *"""
    return _an_engine.qfits_query_column(arg1, arg2)

def qfits_query_column_seq(arg1, arg2, arg3, arg4):
    r"""qfits_query_column_seq(qfits_table arg1, int arg2, int arg3, int arg4) -> unsigned char *"""
    return _an_engine.qfits_query_column_seq(arg1, arg2, arg3, arg4)

def qfits_query_column_data(arg1, arg2, arg3):
    r"""qfits_query_column_data(qfits_table arg1, int arg2, void const * arg3) -> void *"""
    return _an_engine.qfits_query_column_data(arg1, arg2, arg3)

def qfits_query_column_seq_data(arg1, arg2, arg3, arg4, arg5):
    r"""qfits_query_column_seq_data(qfits_table arg1, int arg2, int arg3, int arg4, void const * arg5) -> void *"""
    return _an_engine.qfits_query_column_seq_data(arg1, arg2, arg3, arg4, arg5)

def qfits_query_column_seq_to_array_inds(th, colnum, Ninds, destination, dest_stride):
    r"""qfits_query_column_seq_to_array_inds(qfits_table th, int colnum, int Ninds, unsigned char * destination, int dest_stride) -> int"""
    return _an_engine.qfits_query_column_seq_to_array_inds(th, colnum, Ninds, destination, dest_stride)

def qfits_query_column_seq_to_array(th, colnum, start_ind, nb_rows, destination, dest_stride):
    r"""qfits_query_column_seq_to_array(qfits_table th, int colnum, int start_ind, int nb_rows, unsigned char * destination, int dest_stride) -> int"""
    return _an_engine.qfits_query_column_seq_to_array(th, colnum, start_ind, nb_rows, destination, dest_stride)

def qfits_query_column_seq_to_array_no_endian_swap(th, colnum, start_ind, nb_rows, destination, dest_stride):
    r"""qfits_query_column_seq_to_array_no_endian_swap(qfits_table th, int colnum, int start_ind, int nb_rows, unsigned char * destination, int dest_stride) -> int"""
    return _an_engine.qfits_query_column_seq_to_array_no_endian_swap(th, colnum, start_ind, nb_rows, destination, dest_stride)

def qfits_query_column_nulls(arg1, arg2):
    r"""qfits_query_column_nulls(qfits_table arg1, int arg2) -> int *"""
    return _an_engine.qfits_query_column_nulls(arg1, arg2)

def qfits_compute_table_width(th):
    r"""qfits_compute_table_width(qfits_table th) -> int"""
    return _an_engine.qfits_compute_table_width(th)

def qfits_table_append_xtension(arg1, arg2, arg3):
    r"""qfits_table_append_xtension(FILE * arg1, qfits_table arg2, void const ** arg3) -> int"""
    return _an_engine.qfits_table_append_xtension(arg1, arg2, arg3)

def qfits_table_append_xtension_hdr(arg1, arg2, arg3, arg4):
    r"""qfits_table_append_xtension_hdr(FILE * arg1, qfits_table arg2, void const ** arg3, qfits_header const * arg4) -> int"""
    return _an_engine.qfits_table_append_xtension_hdr(arg1, arg2, arg3, arg4)

def qfits_table_field_to_string(arg1, arg2, arg3, arg4):
    r"""qfits_table_field_to_string(qfits_table arg1, int arg2, int arg3, int arg4) -> char *"""
    return _an_engine.qfits_table_field_to_string(arg1, arg2, arg3, arg4)

def qfits_table_get_col(t, i):
    r"""qfits_table_get_col(qfits_table t, int i) -> qfits_col"""
    return _an_engine.qfits_table_get_col(t, i)

def qfits_table_interpret_type(str, type, table_type):
    r"""qfits_table_interpret_type(char const * str, tfits_type * type, int table_type) -> int"""
    return _an_engine.qfits_table_interpret_type(str, type, table_type)

def qfits_is_table_header(hdr):
    r"""qfits_is_table_header(qfits_header const * hdr) -> int"""
    return _an_engine.qfits_is_table_header(hdr)
class fitstable_t(object):
    r"""Proxy of C fitstable_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    anq = property(_an_engine.fitstable_t_anq_get, _an_engine.fitstable_t_anq_set, doc=r"""anq : p.anqfits_t""")
    table = property(_an_engine.fitstable_t_table_get, _an_engine.fitstable_t_table_set, doc=r"""table : p.qfits_table""")
    header = property(_an_engine.fitstable_t_header_get, _an_engine.fitstable_t_header_set, doc=r"""header : p.qfits_header""")
    primheader = property(_an_engine.fitstable_t_primheader_get, _an_engine.fitstable_t_primheader_set, doc=r"""primheader : p.qfits_header""")
    cols = property(_an_engine.fitstable_t_cols_get, _an_engine.fitstable_t_cols_set, doc=r"""cols : p.bl""")
    extension = property(_an_engine.fitstable_t_extension_get, _an_engine.fitstable_t_extension_set, doc=r"""extension : int""")
    fn = property(_an_engine.fitstable_t_fn_get, _an_engine.fitstable_t_fn_set, doc=r"""fn : p.char""")
    inmemory = property(_an_engine.fitstable_t_inmemory_get, _an_engine.fitstable_t_inmemory_set, doc=r"""inmemory : anbool""")
    rows = property(_an_engine.fitstable_t_rows_get, _an_engine.fitstable_t_rows_set, doc=r"""rows : p.bl""")
    extensions = property(_an_engine.fitstable_t_extensions_get, _an_engine.fitstable_t_extensions_set, doc=r"""extensions : p.bl""")
    fid = property(_an_engine.fitstable_t_fid_get, _an_engine.fitstable_t_fid_set, doc=r"""fid : p.FILE""")
    end_header_offset = property(_an_engine.fitstable_t_end_header_offset_get, _an_engine.fitstable_t_end_header_offset_set, doc=r"""end_header_offset : off_t""")
    table_offset = property(_an_engine.fitstable_t_table_offset_get, _an_engine.fitstable_t_table_offset_set, doc=r"""table_offset : off_t""")
    end_table_offset = property(_an_engine.fitstable_t_end_table_offset_get, _an_engine.fitstable_t_end_table_offset_set, doc=r"""end_table_offset : off_t""")
    br = property(_an_engine.fitstable_t_br_get, _an_engine.fitstable_t_br_set, doc=r"""br : p.bread_t""")
    readfid = property(_an_engine.fitstable_t_readfid_get, _an_engine.fitstable_t_readfid_set, doc=r"""readfid : p.FILE""")
    postprocess_read_structs = property(_an_engine.fitstable_t_postprocess_read_structs_get, _an_engine.fitstable_t_postprocess_read_structs_set, doc=r"""postprocess_read_structs : p.f(p.struct fitstable_t,p.void,int,int,int).int""")

    def __init__(self):
        r"""__init__(fitstable_t self) -> fitstable_t"""
        _an_engine.fitstable_t_swiginit(self, _an_engine.new_fitstable_t())
    __swig_destroy__ = _an_engine.delete_fitstable_t

# Register fitstable_t in _an_engine:
_an_engine.fitstable_t_swigregister(fitstable_t)


def fitscolumn_int_type():
    r"""fitscolumn_int_type() -> tfits_type"""
    return _an_engine.fitscolumn_int_type()

def fitscolumn_double_type():
    r"""fitscolumn_double_type() -> tfits_type"""
    return _an_engine.fitscolumn_double_type()

def fitscolumn_float_type():
    r"""fitscolumn_float_type() -> tfits_type"""
    return _an_engine.fitscolumn_float_type()

def fitscolumn_char_type():
    r"""fitscolumn_char_type() -> tfits_type"""
    return _an_engine.fitscolumn_char_type()

def fitscolumn_boolean_type():
    r"""fitscolumn_boolean_type() -> tfits_type"""
    return _an_engine.fitscolumn_boolean_type()

def fitscolumn_u8_type():
    r"""fitscolumn_u8_type() -> tfits_type"""
    return _an_engine.fitscolumn_u8_type()

def fitscolumn_i16_type():
    r"""fitscolumn_i16_type() -> tfits_type"""
    return _an_engine.fitscolumn_i16_type()

def fitscolumn_i32_type():
    r"""fitscolumn_i32_type() -> tfits_type"""
    return _an_engine.fitscolumn_i32_type()

def fitscolumn_i64_type():
    r"""fitscolumn_i64_type() -> tfits_type"""
    return _an_engine.fitscolumn_i64_type()

def fitscolumn_bitfield_type():
    r"""fitscolumn_bitfield_type() -> tfits_type"""
    return _an_engine.fitscolumn_bitfield_type()

def fitscolumn_bool_type():
    r"""fitscolumn_bool_type() -> tfits_type"""
    return _an_engine.fitscolumn_bool_type()

def fitscolumn_any_type():
    r"""fitscolumn_any_type() -> tfits_type"""
    return _an_engine.fitscolumn_any_type()

def fitstable_open_in_memory():
    r"""fitstable_open_in_memory() -> fitstable_t"""
    return _an_engine.fitstable_open_in_memory()

def fitstable_switch_to_reading(tab):
    r"""fitstable_switch_to_reading(fitstable_t tab) -> int"""
    return _an_engine.fitstable_switch_to_reading(tab)

def fitstable_open(fn):
    r"""fitstable_open(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open(fn)

def fitstable_open_extension_2(fn, ext):
    r"""fitstable_open_extension_2(char const * fn, int ext) -> fitstable_t"""
    return _an_engine.fitstable_open_extension_2(fn, ext)

def fitstable_open_mixed(fn):
    r"""fitstable_open_mixed(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open_mixed(fn)

def fitstable_open_for_writing(fn):
    r"""fitstable_open_for_writing(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open_for_writing(fn)

def fitstable_open_for_appending(fn):
    r"""fitstable_open_for_appending(char const * fn) -> fitstable_t"""
    return _an_engine.fitstable_open_for_appending(fn)

def fitstable_open_for_appending_to(fid):
    r"""fitstable_open_for_appending_to(FILE * fid) -> fitstable_t"""
    return _an_engine.fitstable_open_for_appending_to(fid)

def fitstable_n_extensions(t):
    r"""fitstable_n_extensions(fitstable_t t) -> int"""
    return _an_engine.fitstable_n_extensions(t)

def fitstable_append_to(t, fid):
    r"""fitstable_append_to(fitstable_t t, FILE * fid) -> int"""
    return _an_engine.fitstable_append_to(t, fid)

def fitstable_copy_columns(src, dest):
    r"""fitstable_copy_columns(fitstable_t src, fitstable_t dest)"""
    return _an_engine.fitstable_copy_columns(src, dest)

def fitstable_n_fits_columns(tab):
    r"""fitstable_n_fits_columns(fitstable_t tab) -> int"""
    return _an_engine.fitstable_n_fits_columns(tab)

def fitstable_add_fits_columns_as_struct(dest):
    r"""fitstable_add_fits_columns_as_struct(fitstable_t dest)"""
    return _an_engine.fitstable_add_fits_columns_as_struct(dest)

def fitstable_add_fits_columns_as_struct2(intab, outtab):
    r"""fitstable_add_fits_columns_as_struct2(fitstable_t intab, fitstable_t outtab)"""
    return _an_engine.fitstable_add_fits_columns_as_struct2(intab, outtab)

def fitstable_add_fits_columns_as_struct3(intab, outtab, columns, c_offset):
    r"""fitstable_add_fits_columns_as_struct3(fitstable_t intab, fitstable_t outtab, sl const * columns, int c_offset) -> int"""
    return _an_engine.fitstable_add_fits_columns_as_struct3(intab, outtab, columns, c_offset)

def fitstable_add_fits_columns_as_struct4(intab, outtab, columns, c_offset, fitstype):
    r"""fitstable_add_fits_columns_as_struct4(fitstable_t intab, fitstable_t outtab, sl const * columns, int c_offset, tfits_type fitstype) -> int"""
    return _an_engine.fitstable_add_fits_columns_as_struct4(intab, outtab, columns, c_offset, fitstype)

def fitstable_find_fits_column(t, colname, units, type):
    r"""fitstable_find_fits_column(fitstable_t t, char const * colname, char ** units, tfits_type * type) -> int"""
    return _an_engine.fitstable_find_fits_column(t, colname, units, type)

def fitstable_get_fits_column_names(t, lst):
    r"""fitstable_get_fits_column_names(fitstable_t t, sl * lst) -> sl *"""
    return _an_engine.fitstable_get_fits_column_names(t, lst)

def fitstable_get_N_fits_columns(t):
    r"""fitstable_get_N_fits_columns(fitstable_t t) -> int"""
    return _an_engine.fitstable_get_N_fits_columns(t)

def fitstable_get_fits_column_name(t, i):
    r"""fitstable_get_fits_column_name(fitstable_t t, int i) -> char const *"""
    return _an_engine.fitstable_get_fits_column_name(t, i)

def fitstable_get_fits_column_type(t, i):
    r"""fitstable_get_fits_column_type(fitstable_t t, int i) -> tfits_type"""
    return _an_engine.fitstable_get_fits_column_type(t, i)

def fitstable_get_fits_column_array_size(t, i):
    r"""fitstable_get_fits_column_array_size(fitstable_t t, int i) -> int"""
    return _an_engine.fitstable_get_fits_column_array_size(t, i)

def fitstable_open_extension(tab, ext):
    r"""fitstable_open_extension(fitstable_t tab, int ext) -> int"""
    return _an_engine.fitstable_open_extension(tab, ext)

def fitstable_open_next_extension(tab):
    r"""fitstable_open_next_extension(fitstable_t tab) -> int"""
    return _an_engine.fitstable_open_next_extension(tab)

def fitstable_close(arg1):
    r"""fitstable_close(fitstable_t arg1) -> int"""
    return _an_engine.fitstable_close(arg1)

def fitstable_ncols(t):
    r"""fitstable_ncols(fitstable_t t) -> int"""
    return _an_engine.fitstable_ncols(t)

def fitstable_nrows(t):
    r"""fitstable_nrows(fitstable_t t) -> int"""
    return _an_engine.fitstable_nrows(t)

def fitstable_row_size(t):
    r"""fitstable_row_size(fitstable_t t) -> int"""
    return _an_engine.fitstable_row_size(t)

def fitstable_get_struct_size(table):
    r"""fitstable_get_struct_size(fitstable_t table) -> int"""
    return _an_engine.fitstable_get_struct_size(table)

def fitstable_next_extension(tab):
    r"""fitstable_next_extension(fitstable_t tab)"""
    return _an_engine.fitstable_next_extension(tab)

def fitstable_clear_table(tab):
    r"""fitstable_clear_table(fitstable_t tab)"""
    return _an_engine.fitstable_clear_table(tab)

def fitstable_new_table(t):
    r"""fitstable_new_table(fitstable_t t) -> int"""
    return _an_engine.fitstable_new_table(t)

def fitstable_read_extension(tab, ext):
    r"""fitstable_read_extension(fitstable_t tab, int ext) -> int"""
    return _an_engine.fitstable_read_extension(tab, ext)

def fitstable_get_array_size(tab, name):
    r"""fitstable_get_array_size(fitstable_t tab, char const * name) -> int"""
    return _an_engine.fitstable_get_array_size(tab, name)

def fitstable_get_type(tab, name):
    r"""fitstable_get_type(fitstable_t tab, char const * name) -> int"""
    return _an_engine.fitstable_get_type(tab, name)

def fitstable_add_read_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, required):
    r"""fitstable_add_read_column_struct(fitstable_t tab, tfits_type c_type, int arraysize, int structoffset, tfits_type fits_type, char const * name, anbool required)"""
    return _an_engine.fitstable_add_read_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, required)

def fitstable_add_write_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units):
    r"""fitstable_add_write_column_struct(fitstable_t tab, tfits_type c_type, int arraysize, int structoffset, tfits_type fits_type, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units)

def fitstable_add_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units, required):
    r"""fitstable_add_column_struct(fitstable_t tab, tfits_type c_type, int arraysize, int structoffset, tfits_type fits_type, char const * name, char const * units, anbool required)"""
    return _an_engine.fitstable_add_column_struct(tab, c_type, arraysize, structoffset, fits_type, name, units, required)

def fitstable_add_write_column(tab, t, name, units):
    r"""fitstable_add_write_column(fitstable_t tab, tfits_type t, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column(tab, t, name, units)

def fitstable_add_write_column_array(tab, t, arraysize, name, units):
    r"""fitstable_add_write_column_array(fitstable_t tab, tfits_type t, int arraysize, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_array(tab, t, arraysize, name, units)

def fitstable_add_write_column_convert(tab, fits_type, c_type, name, units):
    r"""fitstable_add_write_column_convert(fitstable_t tab, tfits_type fits_type, tfits_type c_type, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_convert(tab, fits_type, c_type, name, units)

def fitstable_add_write_column_array_convert(tab, fits_type, c_type, arraysize, name, units):
    r"""fitstable_add_write_column_array_convert(fitstable_t tab, tfits_type fits_type, tfits_type c_type, int arraysize, char const * name, char const * units)"""
    return _an_engine.fitstable_add_write_column_array_convert(tab, fits_type, c_type, arraysize, name, units)

def fitstable_remove_column(tab, name):
    r"""fitstable_remove_column(fitstable_t tab, char const * name) -> int"""
    return _an_engine.fitstable_remove_column(tab, name)

def fitstable_read_column_into(tab, colname, read_as_type, dest, stride):
    r"""fitstable_read_column_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride) -> int"""
    return _an_engine.fitstable_read_column_into(tab, colname, read_as_type, dest, stride)

def fitstable_read_column_inds_into(tab, colname, read_as_type, dest, stride, N):
    r"""fitstable_read_column_inds_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride, int N) -> int"""
    return _an_engine.fitstable_read_column_inds_into(tab, colname, read_as_type, dest, stride, N)

def fitstable_read_column_inds(tab, colname, read_as_type, N):
    r"""fitstable_read_column_inds(fitstable_t tab, char const * colname, tfits_type read_as_type, int N) -> void *"""
    return _an_engine.fitstable_read_column_inds(tab, colname, read_as_type, N)

def fitstable_read_column_array_inds_into(tab, colname, read_as_type, dest, stride, arraysize, N):
    r"""fitstable_read_column_array_inds_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride, int arraysize, int N) -> int"""
    return _an_engine.fitstable_read_column_array_inds_into(tab, colname, read_as_type, dest, stride, arraysize, N)

def fitstable_read_column_array_inds(tab, colname, read_as_type, N):
    r"""fitstable_read_column_array_inds(fitstable_t tab, char const * colname, tfits_type read_as_type, int N) -> void *"""
    return _an_engine.fitstable_read_column_array_inds(tab, colname, read_as_type, N)

def fitstable_read_column_offset_into(tab, colname, read_as_type, dest, stride, start, N):
    r"""fitstable_read_column_offset_into(fitstable_t tab, char const * colname, tfits_type read_as_type, void * dest, int stride, int start, int N) -> int"""
    return _an_engine.fitstable_read_column_offset_into(tab, colname, read_as_type, dest, stride, start, N)

def fitstable_read_column(tab, colname, t):
    r"""fitstable_read_column(fitstable_t tab, char const * colname, tfits_type t) -> void *"""
    return _an_engine.fitstable_read_column(tab, colname, t)

def fitstable_read_column_array(tab, colname, t):
    r"""fitstable_read_column_array(fitstable_t tab, char const * colname, tfits_type t) -> void *"""
    return _an_engine.fitstable_read_column_array(tab, colname, t)

def fitstable_read_column_offset(tab, colname, ctype, offset, N):
    r"""fitstable_read_column_offset(fitstable_t tab, char const * colname, tfits_type ctype, int offset, int N) -> void *"""
    return _an_engine.fitstable_read_column_offset(tab, colname, ctype, offset, N)

def fitstable_write_row(*args):
    r"""fitstable_write_row(fitstable_t table) -> int"""
    return _an_engine.fitstable_write_row(*args)

def fitstable_write_row_noflip(*args):
    r"""fitstable_write_row_noflip(fitstable_t table) -> int"""
    return _an_engine.fitstable_write_row_noflip(*args)

def fitstable_read_nrows_data(table, row0, nrows, dest):
    r"""fitstable_read_nrows_data(fitstable_t table, int row0, int nrows, void * dest) -> int"""
    return _an_engine.fitstable_read_nrows_data(table, row0, nrows, dest)

def fitstable_read_row_data(table, row, dest):
    r"""fitstable_read_row_data(fitstable_t table, int row, void * dest) -> int"""
    return _an_engine.fitstable_read_row_data(table, row, dest)

def fitstable_write_row_data(table, data):
    r"""fitstable_write_row_data(fitstable_t table, void * data) -> int"""
    return _an_engine.fitstable_write_row_data(table, data)

def fitstable_copy_row_data(table, row, outtable):
    r"""fitstable_copy_row_data(fitstable_t table, int row, fitstable_t outtable) -> int"""
    return _an_engine.fitstable_copy_row_data(table, row, outtable)

def fitstable_copy_rows_data(table, Nrows, outtable):
    r"""fitstable_copy_rows_data(fitstable_t table, int Nrows, fitstable_t outtable) -> int"""
    return _an_engine.fitstable_copy_rows_data(table, Nrows, outtable)

def fitstable_endian_flip_row_data(table, data):
    r"""fitstable_endian_flip_row_data(fitstable_t table, void * data)"""
    return _an_engine.fitstable_endian_flip_row_data(table, data)

def fitstable_write_struct(table, struc):
    r"""fitstable_write_struct(fitstable_t table, void const * struc) -> int"""
    return _an_engine.fitstable_write_struct(table, struc)

def fitstable_write_struct_noflip(table, struc):
    r"""fitstable_write_struct_noflip(fitstable_t table, void const * struc) -> int"""
    return _an_engine.fitstable_write_struct_noflip(table, struc)

def fitstable_write_structs(table, struc, stride, N):
    r"""fitstable_write_structs(fitstable_t table, void const * struc, int stride, int N) -> int"""
    return _an_engine.fitstable_write_structs(table, struc, stride, N)

def fitstable_pad_with(table, pad):
    r"""fitstable_pad_with(fitstable_t table, char pad) -> int"""
    return _an_engine.fitstable_pad_with(table, pad)

def fitstable_write_one_column(table, colnum, rowoffset, nrows, src, src_stride):
    r"""fitstable_write_one_column(fitstable_t table, int colnum, int rowoffset, int nrows, void const * src, int src_stride) -> int"""
    return _an_engine.fitstable_write_one_column(table, colnum, rowoffset, nrows, src, src_stride)

def fitstable_read_struct(table, index, struc):
    r"""fitstable_read_struct(fitstable_t table, int index, void * struc) -> int"""
    return _an_engine.fitstable_read_struct(table, index, struc)

def fitstable_read_structs(table, struc, stride, offset, N):
    r"""fitstable_read_structs(fitstable_t table, void * struc, int stride, int offset, int N) -> int"""
    return _an_engine.fitstable_read_structs(table, struc, stride, offset, N)

def fitstable_get_primary_header(t):
    r"""fitstable_get_primary_header(fitstable_t t) -> qfits_header *"""
    return _an_engine.fitstable_get_primary_header(t)

def fitstable_write_primary_header(t):
    r"""fitstable_write_primary_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_write_primary_header(t)

def fitstable_fix_primary_header(t):
    r"""fitstable_fix_primary_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_fix_primary_header(t)

def fitstable_get_header(t):
    r"""fitstable_get_header(fitstable_t t) -> qfits_header *"""
    return _an_engine.fitstable_get_header(t)

def fitstable_write_header(t):
    r"""fitstable_write_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_write_header(t)

def fitstable_fix_header(t):
    r"""fitstable_fix_header(fitstable_t t) -> int"""
    return _an_engine.fitstable_fix_header(t)

def fitstable_close_table(tab):
    r"""fitstable_close_table(fitstable_t tab)"""
    return _an_engine.fitstable_close_table(tab)

def fitstable_use_buffered_reading(tab, elementsize, Nbuffer):
    r"""fitstable_use_buffered_reading(fitstable_t tab, int elementsize, int Nbuffer)"""
    return _an_engine.fitstable_use_buffered_reading(tab, elementsize, Nbuffer)

def fitstable_next_struct(tab):
    r"""fitstable_next_struct(fitstable_t tab) -> void *"""
    return _an_engine.fitstable_next_struct(tab)

def fitstable_pushback(tab):
    r"""fitstable_pushback(fitstable_t tab) -> int"""
    return _an_engine.fitstable_pushback(tab)

def fitstable_set_buffer_fill_function(tab, refill_buffer, userdata):
    r"""fitstable_set_buffer_fill_function(fitstable_t tab, int (*)(void *,void *,unsigned int,unsigned int) refill_buffer, void * userdata)"""
    return _an_engine.fitstable_set_buffer_fill_function(tab, refill_buffer, userdata)

def fitstable_print_missing(tab, f):
    r"""fitstable_print_missing(fitstable_t tab, FILE * f)"""
    return _an_engine.fitstable_print_missing(tab, f)

def fitstable_error_report_missing(tab):
    r"""fitstable_error_report_missing(fitstable_t tab)"""
    return _an_engine.fitstable_error_report_missing(tab)

def fitstable_print_columns(tab):
    r"""fitstable_print_columns(fitstable_t tab)"""
    return _an_engine.fitstable_print_columns(tab)
class starxy_t(object):
    r"""Proxy of C starxy_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_an_engine.starxy_t_x_get, _an_engine.starxy_t_x_set, doc=r"""x : p.double""")
    y = property(_an_engine.starxy_t_y_get, _an_engine.starxy_t_y_set, doc=r"""y : p.double""")
    flux = property(_an_engine.starxy_t_flux_get, _an_engine.starxy_t_flux_set, doc=r"""flux : p.double""")
    background = property(_an_engine.starxy_t_background_get, _an_engine.starxy_t_background_set, doc=r"""background : p.double""")
    N = property(_an_engine.starxy_t_N_get, _an_engine.starxy_t_N_set, doc=r"""N : int""")
    xlo = property(_an_engine.starxy_t_xlo_get, _an_engine.starxy_t_xlo_set, doc=r"""xlo : double""")
    xhi = property(_an_engine.starxy_t_xhi_get, _an_engine.starxy_t_xhi_set, doc=r"""xhi : double""")
    ylo = property(_an_engine.starxy_t_ylo_get, _an_engine.starxy_t_ylo_set, doc=r"""ylo : double""")
    yhi = property(_an_engine.starxy_t_yhi_get, _an_engine.starxy_t_yhi_set, doc=r"""yhi : double""")

    def __init__(self):
        r"""__init__(starxy_t self) -> starxy_t"""
        _an_engine.starxy_t_swiginit(self, _an_engine.new_starxy_t())
    __swig_destroy__ = _an_engine.delete_starxy_t

# Register starxy_t in _an_engine:
_an_engine.starxy_t_swigregister(starxy_t)


def starxy_new(N, flux, back):
    r"""starxy_new(int N, anbool flux, anbool back) -> starxy_t"""
    return _an_engine.starxy_new(N, flux, back)

def starxy_compute_range(xy):
    r"""starxy_compute_range(starxy_t xy)"""
    return _an_engine.starxy_compute_range(xy)

def starxy_getx(f, i):
    r"""starxy_getx(starxy_t f, int i) -> double"""
    return _an_engine.starxy_getx(f, i)

def starxy_gety(f, i):
    r"""starxy_gety(starxy_t f, int i) -> double"""
    return _an_engine.starxy_gety(f, i)

def starxy_get_x(f, i):
    r"""starxy_get_x(starxy_t f, int i) -> double"""
    return _an_engine.starxy_get_x(f, i)

def starxy_get_y(f, i):
    r"""starxy_get_y(starxy_t f, int i) -> double"""
    return _an_engine.starxy_get_y(f, i)

def starxy_get_flux(f, i):
    r"""starxy_get_flux(starxy_t f, int i) -> double"""
    return _an_engine.starxy_get_flux(f, i)

def starxy_get(f, i):
    r"""starxy_get(starxy_t f, int i)"""
    return _an_engine.starxy_get(f, i)

def starxy_setx(f, i, x):
    r"""starxy_setx(starxy_t f, int i, double x)"""
    return _an_engine.starxy_setx(f, i, x)

def starxy_sety(f, i, y):
    r"""starxy_sety(starxy_t f, int i, double y)"""
    return _an_engine.starxy_sety(f, i, y)

def starxy_set_x(f, i, x):
    r"""starxy_set_x(starxy_t f, int i, double x)"""
    return _an_engine.starxy_set_x(f, i, x)

def starxy_set_y(f, i, y):
    r"""starxy_set_y(starxy_t f, int i, double y)"""
    return _an_engine.starxy_set_y(f, i, y)

def starxy_set_flux(f, i, y):
    r"""starxy_set_flux(starxy_t f, int i, double y)"""
    return _an_engine.starxy_set_flux(f, i, y)

def starxy_subset(arg1, N):
    r"""starxy_subset(starxy_t arg1, int N) -> starxy_t"""
    return _an_engine.starxy_subset(arg1, N)

def starxy_copy(arg1):
    r"""starxy_copy(starxy_t arg1) -> starxy_t"""
    return _an_engine.starxy_copy(arg1)

def starxy_set_x_array(s, x):
    r"""starxy_set_x_array(starxy_t s, double const * x)"""
    return _an_engine.starxy_set_x_array(s, x)

def starxy_set_y_array(s, y):
    r"""starxy_set_y_array(starxy_t s, double const * y)"""
    return _an_engine.starxy_set_y_array(s, y)

def starxy_set_flux_array(s, f):
    r"""starxy_set_flux_array(starxy_t s, double const * f)"""
    return _an_engine.starxy_set_flux_array(s, f)

def starxy_set_bg_array(s, f):
    r"""starxy_set_bg_array(starxy_t s, double const * f)"""
    return _an_engine.starxy_set_bg_array(s, f)

def starxy_set_xy_array(s, xy):
    r"""starxy_set_xy_array(starxy_t s, double const * xy)"""
    return _an_engine.starxy_set_xy_array(s, xy)

def starxy_sort_by_flux(f):
    r"""starxy_sort_by_flux(starxy_t f)"""
    return _an_engine.starxy_sort_by_flux(f)

def starxy_set(f, i, x, y):
    r"""starxy_set(starxy_t f, int i, double x, double y)"""
    return _an_engine.starxy_set(f, i, x, y)

def starxy_n(f):
    r"""starxy_n(starxy_t f) -> int"""
    return _an_engine.starxy_n(f)

def starxy_copy_x(xy):
    r"""starxy_copy_x(starxy_t xy) -> double *"""
    return _an_engine.starxy_copy_x(xy)

def starxy_copy_y(xy):
    r"""starxy_copy_y(starxy_t xy) -> double *"""
    return _an_engine.starxy_copy_y(xy)

def starxy_copy_xy(xy):
    r"""starxy_copy_xy(starxy_t xy) -> double *"""
    return _an_engine.starxy_copy_xy(xy)

def starxy_to_xy_array(xy):
    r"""starxy_to_xy_array(starxy_t xy) -> double *"""
    return _an_engine.starxy_to_xy_array(xy)

def starxy_to_flat_array(xy):
    r"""starxy_to_flat_array(starxy_t xy) -> double *"""
    return _an_engine.starxy_to_flat_array(xy)

def starxy_alloc_data(f, N, flux, back):
    r"""starxy_alloc_data(starxy_t f, int N, anbool flux, anbool back)"""
    return _an_engine.starxy_alloc_data(f, N, flux, back)

def starxy_from_dl(xy, l, flux, back):
    r"""starxy_from_dl(starxy_t xy, dl * l, anbool flux, anbool back)"""
    return _an_engine.starxy_from_dl(xy, l, flux, back)

def starxy_free_data(f):
    r"""starxy_free_data(starxy_t f)"""
    return _an_engine.starxy_free_data(f)

def starxy_free(f):
    r"""starxy_free(starxy_t f)"""
    return _an_engine.starxy_free(f)
AN_FILETYPE_STARTREE = _an_engine.AN_FILETYPE_STARTREE

AN_FILETYPE_TAGALONG = _an_engine.AN_FILETYPE_TAGALONG

STARTREE_NAME = _an_engine.STARTREE_NAME

class startree_t(object):
    r"""Proxy of C startree_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tree = property(_an_engine.startree_t_tree_get, _an_engine.startree_t_tree_set, doc=r"""tree : p.kdtree_t""")
    header = property(_an_engine.startree_t_header_get, _an_engine.startree_t_header_set, doc=r"""header : p.qfits_header""")
    inverse_perm = property(_an_engine.startree_t_inverse_perm_get, _an_engine.startree_t_inverse_perm_set, doc=r"""inverse_perm : p.int""")
    sweep = property(_an_engine.startree_t_sweep_get, _an_engine.startree_t_sweep_set, doc=r"""sweep : p.uint8_t""")
    writing = property(_an_engine.startree_t_writing_get, _an_engine.startree_t_writing_set, doc=r"""writing : int""")
    tagalong = property(_an_engine.startree_t_tagalong_get, _an_engine.startree_t_tagalong_set, doc=r"""tagalong : p.fitstable_t""")

    def __init__(self):
        r"""__init__(startree_t self) -> startree_t"""
        _an_engine.startree_t_swiginit(self, _an_engine.new_startree_t())
    __swig_destroy__ = _an_engine.delete_startree_t

# Register startree_t in _an_engine:
_an_engine.startree_t_swigregister(startree_t)


def startree_open(fn):
    r"""startree_open(char const * fn) -> startree_t"""
    return _an_engine.startree_open(fn)

def startree_open_fits(fits):
    r"""startree_open_fits(anqfits_t * fits) -> startree_t"""
    return _an_engine.startree_open_fits(fits)

def startree_search_for(s, xyzcenter, radius2, xyzresults, radecresults, starinds):
    r"""startree_search_for(startree_t s, double const * xyzcenter, double radius2, double ** xyzresults, double ** radecresults, int ** starinds)"""
    return _an_engine.startree_search_for(s, xyzcenter, radius2, xyzresults, radecresults, starinds)

def startree_search_for_radec(s, ra, dec, radius, xyzresults, radecresults, starinds):
    r"""startree_search_for_radec(startree_t s, double ra, double dec, double radius, double ** xyzresults, double ** radecresults, int ** starinds)"""
    return _an_engine.startree_search_for_radec(s, ra, dec, radius, xyzresults, radecresults, starinds)

def startree_search(s, xyzcenter, radius2, xyzresults, radecresults):
    r"""startree_search(startree_t s, double const * xyzcenter, double radius2, double ** xyzresults, double ** radecresults)"""
    return _an_engine.startree_search(s, xyzcenter, radius2, xyzresults, radecresults)

def startree_get_data_column(s, colname, N):
    r"""startree_get_data_column(startree_t s, char const * colname, int N) -> double *"""
    return _an_engine.startree_get_data_column(s, colname, N)

def startree_get_data_column_int64(s, colname, N):
    r"""startree_get_data_column_int64(startree_t s, char const * colname, int N) -> int64_t *"""
    return _an_engine.startree_get_data_column_int64(s, colname, N)

def startree_get_data_column_array(s, colname, N):
    r"""startree_get_data_column_array(startree_t s, char const * colname, int N) -> double *"""
    return _an_engine.startree_get_data_column_array(s, colname, N)

def startree_free_data_column(s):
    r"""startree_free_data_column(startree_t s)"""
    return _an_engine.startree_free_data_column(s)

def startree_has_tagalong(s):
    r"""startree_has_tagalong(startree_t s) -> anbool"""
    return _an_engine.startree_has_tagalong(s)

def startree_get_tagalong(s):
    r"""startree_get_tagalong(startree_t s) -> fitstable_t"""
    return _an_engine.startree_get_tagalong(s)

def startree_get_tagalong_column_names(s, lst):
    r"""startree_get_tagalong_column_names(startree_t s, sl * lst) -> sl *"""
    return _an_engine.startree_get_tagalong_column_names(s, lst)

def startree_get_tagalong_N_columns(s):
    r"""startree_get_tagalong_N_columns(startree_t s) -> int"""
    return _an_engine.startree_get_tagalong_N_columns(s)

def startree_get_tagalong_column_name(s, i):
    r"""startree_get_tagalong_column_name(startree_t s, int i) -> char const *"""
    return _an_engine.startree_get_tagalong_column_name(s, i)

def startree_get_tagalong_column_fits_type(s, i):
    r"""startree_get_tagalong_column_fits_type(startree_t s, int i) -> tfits_type"""
    return _an_engine.startree_get_tagalong_column_fits_type(s, i)

def startree_get_tagalong_column_array_size(s, i):
    r"""startree_get_tagalong_column_array_size(startree_t s, int i) -> int"""
    return _an_engine.startree_get_tagalong_column_array_size(s, i)

def startree_get_cut_nside(s):
    r"""startree_get_cut_nside(startree_t s) -> int"""
    return _an_engine.startree_get_cut_nside(s)

def startree_get_cut_nsweeps(s):
    r"""startree_get_cut_nsweeps(startree_t s) -> int"""
    return _an_engine.startree_get_cut_nsweeps(s)

def startree_get_cut_dedup(s):
    r"""startree_get_cut_dedup(startree_t s) -> double"""
    return _an_engine.startree_get_cut_dedup(s)

def startree_get_cut_band(s):
    r"""startree_get_cut_band(startree_t s) -> char *"""
    return _an_engine.startree_get_cut_band(s)

def startree_get_cut_margin(s):
    r"""startree_get_cut_margin(startree_t s) -> int"""
    return _an_engine.startree_get_cut_margin(s)

def startree_get_jitter(s):
    r"""startree_get_jitter(startree_t s) -> double"""
    return _an_engine.startree_get_jitter(s)

def startree_set_jitter(s, jitter_arcsec):
    r"""startree_set_jitter(startree_t s, double jitter_arcsec)"""
    return _an_engine.startree_set_jitter(s, jitter_arcsec)

def startree_get_sweep(s, ind):
    r"""startree_get_sweep(startree_t s, int ind) -> int"""
    return _an_engine.startree_get_sweep(s, ind)

def startree_N(s):
    r"""startree_N(startree_t s) -> int"""
    return _an_engine.startree_N(s)

def startree_nodes(s):
    r"""startree_nodes(startree_t s) -> int"""
    return _an_engine.startree_nodes(s)

def startree_D(s):
    r"""startree_D(startree_t s) -> int"""
    return _an_engine.startree_D(s)

def startree_header(s):
    r"""startree_header(startree_t s) -> qfits_header *"""
    return _an_engine.startree_header(s)

def startree_get(s, starid):
    r"""startree_get(startree_t s, int starid) -> int"""
    return _an_engine.startree_get(s, starid)

def startree_get_radec(s, starid):
    r"""startree_get_radec(startree_t s, int starid) -> int"""
    return _an_engine.startree_get_radec(s, starid)

def startree_close(s):
    r"""startree_close(startree_t s) -> int"""
    return _an_engine.startree_close(s)

def startree_compute_inverse_perm(s):
    r"""startree_compute_inverse_perm(startree_t s)"""
    return _an_engine.startree_compute_inverse_perm(s)

def startree_check_inverse_perm(s):
    r"""startree_check_inverse_perm(startree_t s) -> int"""
    return _an_engine.startree_check_inverse_perm(s)

def startree_new():
    r"""startree_new() -> startree_t"""
    return _an_engine.startree_new()

def startree_write_to_file(s, fn):
    r"""startree_write_to_file(startree_t s, char const * fn) -> int"""
    return _an_engine.startree_write_to_file(s, fn)

def startree_write_to_file_flipped(s, fn):
    r"""startree_write_to_file_flipped(startree_t s, char const * fn) -> int"""
    return _an_engine.startree_write_to_file_flipped(s, fn)

def startree_append_to(s, fid):
    r"""startree_append_to(startree_t s, FILE * fid) -> int"""
    return _an_engine.startree_append_to(s, fid)
SIP_MAXORDER = _an_engine.SIP_MAXORDER

class tan_t(object):
    r"""Proxy of C tan_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    crval = property(_an_engine.tan_t_crval_get, _an_engine.tan_t_crval_set, doc=r"""crval : a(2).double""")
    crpix = property(_an_engine.tan_t_crpix_get, _an_engine.tan_t_crpix_set, doc=r"""crpix : a(2).double""")
    cd = property(_an_engine.tan_t_cd_get, _an_engine.tan_t_cd_set, doc=r"""cd : a(2).a(2).double""")
    imagew = property(_an_engine.tan_t_imagew_get, _an_engine.tan_t_imagew_set, doc=r"""imagew : double""")
    imageh = property(_an_engine.tan_t_imageh_get, _an_engine.tan_t_imageh_set, doc=r"""imageh : double""")
    sin = property(_an_engine.tan_t_sin_get, _an_engine.tan_t_sin_set, doc=r"""sin : anbool""")

    def __init__(self):
        r"""__init__(tan_t self) -> tan_t"""
        _an_engine.tan_t_swiginit(self, _an_engine.new_tan_t())
    __swig_destroy__ = _an_engine.delete_tan_t

# Register tan_t in _an_engine:
_an_engine.tan_t_swigregister(tan_t)

class sip_t(object):
    r"""Proxy of C sip_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wcstan = property(_an_engine.sip_t_wcstan_get, _an_engine.sip_t_wcstan_set, doc=r"""wcstan : tan_t""")
    a_order = property(_an_engine.sip_t_a_order_get, _an_engine.sip_t_a_order_set, doc=r"""a_order : int""")
    b_order = property(_an_engine.sip_t_b_order_get, _an_engine.sip_t_b_order_set, doc=r"""b_order : int""")
    a = property(_an_engine.sip_t_a_get, _an_engine.sip_t_a_set, doc=r"""a : a(10).a(10).double""")
    b = property(_an_engine.sip_t_b_get, _an_engine.sip_t_b_set, doc=r"""b : a(10).a(10).double""")
    ap_order = property(_an_engine.sip_t_ap_order_get, _an_engine.sip_t_ap_order_set, doc=r"""ap_order : int""")
    bp_order = property(_an_engine.sip_t_bp_order_get, _an_engine.sip_t_bp_order_set, doc=r"""bp_order : int""")
    ap = property(_an_engine.sip_t_ap_get, _an_engine.sip_t_ap_set, doc=r"""ap : a(10).a(10).double""")
    bp = property(_an_engine.sip_t_bp_get, _an_engine.sip_t_bp_set, doc=r"""bp : a(10).a(10).double""")

    def __init__(self):
        r"""__init__(sip_t self) -> sip_t"""
        _an_engine.sip_t_swiginit(self, _an_engine.new_sip_t())
    __swig_destroy__ = _an_engine.delete_sip_t

# Register sip_t in _an_engine:
_an_engine.sip_t_swigregister(sip_t)


def sip_create():
    r"""sip_create() -> sip_t"""
    return _an_engine.sip_create()

def sip_free(sip):
    r"""sip_free(sip_t sip)"""
    return _an_engine.sip_free(sip)

def sip_copy(dest, src):
    r"""sip_copy(sip_t dest, sip_t src)"""
    return _an_engine.sip_copy(dest, src)

def sip_wrap_tan(tan, sip):
    r"""sip_wrap_tan(tan_t tan, sip_t sip)"""
    return _an_engine.sip_wrap_tan(tan, sip)

def sip_imagew(sip):
    r"""sip_imagew(sip_t sip) -> double"""
    return _an_engine.sip_imagew(sip)

def sip_imageh(sip):
    r"""sip_imageh(sip_t sip) -> double"""
    return _an_engine.sip_imageh(sip)

def sip_pixelxy2radec(sip, px, py):
    r"""sip_pixelxy2radec(sip_t sip, double px, double py)"""
    return _an_engine.sip_pixelxy2radec(sip, px, py)

def sip_pixelxy2xyzarr(sip, px, py):
    r"""sip_pixelxy2xyzarr(sip_t sip, double px, double py)"""
    return _an_engine.sip_pixelxy2xyzarr(sip, px, py)

def sip_radec2pixelxy(sip, a, d):
    r"""sip_radec2pixelxy(sip_t sip, double a, double d) -> anbool"""
    return _an_engine.sip_radec2pixelxy(sip, a, d)

def sip_radec2pixelxy_check(sip, ra, dec):
    r"""sip_radec2pixelxy_check(sip_t sip, double ra, double dec) -> anbool"""
    return _an_engine.sip_radec2pixelxy_check(sip, ra, dec)

def sip_xyzarr2pixelxy(sip, xyz):
    r"""sip_xyzarr2pixelxy(sip_t sip, double const * xyz) -> anbool"""
    return _an_engine.sip_xyzarr2pixelxy(sip, xyz)

def sip_xyz2pixelxy(sip, x, y, z):
    r"""sip_xyz2pixelxy(sip_t sip, double x, double y, double z) -> anbool"""
    return _an_engine.sip_xyz2pixelxy(sip, x, y, z)

def sip_pixelxy2iwc(sip, px, py):
    r"""sip_pixelxy2iwc(sip_t sip, double px, double py)"""
    return _an_engine.sip_pixelxy2iwc(sip, px, py)

def tan_det_cd(tan):
    r"""tan_det_cd(tan_t tan) -> double"""
    return _an_engine.tan_det_cd(tan)

def sip_det_cd(sip):
    r"""sip_det_cd(sip_t sip) -> double"""
    return _an_engine.sip_det_cd(sip)

def tan_pixel_scale(tn):
    r"""tan_pixel_scale(tan_t tn) -> double"""
    return _an_engine.tan_pixel_scale(tn)

def sip_pixel_scale(sip):
    r"""sip_pixel_scale(sip_t sip) -> double"""
    return _an_engine.sip_pixel_scale(sip)

def sip_calc_inv_distortion(sip, U, V):
    r"""sip_calc_inv_distortion(sip_t sip, double U, double V)"""
    return _an_engine.sip_calc_inv_distortion(sip, U, V)

def sip_calc_distortion(sip, u, v):
    r"""sip_calc_distortion(sip_t sip, double u, double v)"""
    return _an_engine.sip_calc_distortion(sip, u, v)

def sip_pixel_distortion(sip, x, y):
    r"""sip_pixel_distortion(sip_t sip, double x, double y)"""
    return _an_engine.sip_pixel_distortion(sip, x, y)

def sip_pixel_undistortion(sip, x, y):
    r"""sip_pixel_undistortion(sip_t sip, double x, double y)"""
    return _an_engine.sip_pixel_undistortion(sip, x, y)

def tan_pixelxy2xyzarr(tan, px, py):
    r"""tan_pixelxy2xyzarr(tan_t tan, double px, double py)"""
    return _an_engine.tan_pixelxy2xyzarr(tan, px, py)

def tan_pixelxy2radec(wcs_tan, px, py):
    r"""tan_pixelxy2radec(tan_t wcs_tan, double px, double py)"""
    return _an_engine.tan_pixelxy2radec(wcs_tan, px, py)

def tan_pixelxy2radecarr(wcs_tan, px, py):
    r"""tan_pixelxy2radecarr(tan_t wcs_tan, double px, double py)"""
    return _an_engine.tan_pixelxy2radecarr(wcs_tan, px, py)

def tan_radec2pixelxy(wcs_tan, ra, dec):
    r"""tan_radec2pixelxy(tan_t wcs_tan, double ra, double dec) -> anbool"""
    return _an_engine.tan_radec2pixelxy(wcs_tan, ra, dec)

def tan_xyzarr2pixelxy(wcs_tan, xyz):
    r"""tan_xyzarr2pixelxy(tan_t wcs_tan, double const * xyz) -> anbool"""
    return _an_engine.tan_xyzarr2pixelxy(wcs_tan, xyz)

def tan_iwc2pixelxy(tan, iwcx, iwcy):
    r"""tan_iwc2pixelxy(tan_t tan, double iwcx, double iwcy)"""
    return _an_engine.tan_iwc2pixelxy(tan, iwcx, iwcy)

def tan_iwc2xyzarr(tan, x, y):
    r"""tan_iwc2xyzarr(tan_t tan, double x, double y)"""
    return _an_engine.tan_iwc2xyzarr(tan, x, y)

def tan_iwc2radec(tan, x, y):
    r"""tan_iwc2radec(tan_t tan, double x, double y)"""
    return _an_engine.tan_iwc2radec(tan, x, y)

def tan_pixelxy2iwc(tan, px, py):
    r"""tan_pixelxy2iwc(tan_t tan, double px, double py)"""
    return _an_engine.tan_pixelxy2iwc(tan, px, py)

def tan_xyzarr2iwc(tan, xyz):
    r"""tan_xyzarr2iwc(tan_t tan, double const * xyz) -> anbool"""
    return _an_engine.tan_xyzarr2iwc(tan, xyz)

def tan_radec2iwc(tan, ra, dec):
    r"""tan_radec2iwc(tan_t tan, double ra, double dec) -> anbool"""
    return _an_engine.tan_radec2iwc(tan, ra, dec)

def sip_xyzarr2iwc(sip, xyz):
    r"""sip_xyzarr2iwc(sip_t sip, double const * xyz) -> anbool"""
    return _an_engine.sip_xyzarr2iwc(sip, xyz)

def sip_radec2iwc(sip, ra, dec):
    r"""sip_radec2iwc(sip_t sip, double ra, double dec) -> anbool"""
    return _an_engine.sip_radec2iwc(sip, ra, dec)

def sip_iwc2pixelxy(sip, iwcx, iwcy):
    r"""sip_iwc2pixelxy(sip_t sip, double iwcx, double iwcy)"""
    return _an_engine.sip_iwc2pixelxy(sip, iwcx, iwcy)

def sip_iwc2radec(sip, x, y):
    r"""sip_iwc2radec(sip_t sip, double x, double y)"""
    return _an_engine.sip_iwc2radec(sip, x, y)

def sip_print(arg1):
    r"""sip_print(sip_t arg1)"""
    return _an_engine.sip_print(arg1)

def sip_print_to(arg1, fid):
    r"""sip_print_to(sip_t arg1, FILE * fid)"""
    return _an_engine.sip_print_to(arg1, fid)

def tan_print(tan):
    r"""tan_print(tan_t tan)"""
    return _an_engine.tan_print(tan)

def tan_print_to(tan, f):
    r"""tan_print_to(tan_t tan, FILE * f)"""
    return _an_engine.tan_print_to(tan, f)

def sip_get_crval(sip):
    r"""sip_get_crval(sip_t sip)"""
    return _an_engine.sip_get_crval(sip)

def tan_get_orientation(tan):
    r"""tan_get_orientation(tan_t tan) -> double"""
    return _an_engine.tan_get_orientation(tan)

def sip_get_orientation(sip):
    r"""sip_get_orientation(sip_t sip) -> double"""
    return _an_engine.sip_get_orientation(sip)

def fit_sip_coefficients(starxyz, fieldxy, weights, M, tanin1, sip_order, inv_order, sipout):
    r"""fit_sip_coefficients(double const * starxyz, double const * fieldxy, double const * weights, int M, tan_t tanin1, int sip_order, int inv_order, sip_t sipout) -> int"""
    return _an_engine.fit_sip_coefficients(starxyz, fieldxy, weights, M, tanin1, sip_order, inv_order, sipout)

def wcs_shift(wcs, xs, ys):
    r"""wcs_shift(tan_t wcs, double xs, double ys)"""
    return _an_engine.wcs_shift(wcs, xs, ys)

def fit_sip_wcs(starxyz, fieldxy, weights, M, tanin, sip_order, inv_order, doshift, sipout):
    r"""fit_sip_wcs(double const * starxyz, double const * fieldxy, double const * weights, int M, tan_t tanin, int sip_order, int inv_order, int doshift, sip_t sipout) -> int"""
    return _an_engine.fit_sip_wcs(starxyz, fieldxy, weights, M, tanin, sip_order, inv_order, doshift, sipout)

def fit_sip_wcs_2(starxyz, fieldxy, weights, M, sip_order, inv_order, W, H, crpix_center, doshift, sipout):
    r"""fit_sip_wcs_2(double const * starxyz, double const * fieldxy, double const * weights, int M, int sip_order, int inv_order, int W, int H, int crpix_center, int doshift, sip_t sipout) -> int"""
    return _an_engine.fit_sip_wcs_2(starxyz, fieldxy, weights, M, sip_order, inv_order, W, H, crpix_center, doshift, sipout)

def fit_tan_wcs_move_tangent_point(starxyz, fieldxy, N, crpix, tanin, tanout):
    r"""fit_tan_wcs_move_tangent_point(double const * starxyz, double const * fieldxy, int N, double const * crpix, tan_t tanin, tan_t tanout) -> int"""
    return _an_engine.fit_tan_wcs_move_tangent_point(starxyz, fieldxy, N, crpix, tanin, tanout)

def fit_tan_wcs_move_tangent_point_weighted(starxyz, fieldxy, weights, N, crpix, tanin, tanout):
    r"""fit_tan_wcs_move_tangent_point_weighted(double const * starxyz, double const * fieldxy, double const * weights, int N, double const * crpix, tan_t tanin, tan_t tanout) -> int"""
    return _an_engine.fit_tan_wcs_move_tangent_point_weighted(starxyz, fieldxy, weights, N, crpix, tanin, tanout)

def fit_tan_wcs(starxyz, fieldxy, nobjs, wcstan):
    r"""fit_tan_wcs(double const * starxyz, double const * fieldxy, int nobjs, tan_t wcstan) -> int"""
    return _an_engine.fit_tan_wcs(starxyz, fieldxy, nobjs, wcstan)

def fit_tan_wcs_weighted(starxyz, fieldxy, weights, N, tan):
    r"""fit_tan_wcs_weighted(double const * starxyz, double const * fieldxy, double const * weights, int N, tan_t tan) -> int"""
    return _an_engine.fit_tan_wcs_weighted(starxyz, fieldxy, weights, N, tan)
class match_struct(object):
    r"""Proxy of C match_struct struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    quadno = property(_an_engine.match_struct_quadno_get, _an_engine.match_struct_quadno_set, doc=r"""quadno : unsigned int""")
    star = property(_an_engine.match_struct_star_get, _an_engine.match_struct_star_set, doc=r"""star : a(DQMAX).unsigned int""")
    field = property(_an_engine.match_struct_field_get, _an_engine.match_struct_field_set, doc=r"""field : a(DQMAX).unsigned int""")
    ids = property(_an_engine.match_struct_ids_get, _an_engine.match_struct_ids_set, doc=r"""ids : a(DQMAX).uint64_t""")
    code_err = property(_an_engine.match_struct_code_err_get, _an_engine.match_struct_code_err_set, doc=r"""code_err : float""")
    quadpix = property(_an_engine.match_struct_quadpix_get, _an_engine.match_struct_quadpix_set, doc=r"""quadpix : a(2*DQMAX).double""")
    quadpix_orig = property(_an_engine.match_struct_quadpix_orig_get, _an_engine.match_struct_quadpix_orig_set, doc=r"""quadpix_orig : a(2*DQMAX).double""")
    quadxyz = property(_an_engine.match_struct_quadxyz_get, _an_engine.match_struct_quadxyz_set, doc=r"""quadxyz : a(3*DQMAX).double""")
    dimquads = property(_an_engine.match_struct_dimquads_get, _an_engine.match_struct_dimquads_set, doc=r"""dimquads : uint8_t""")
    center = property(_an_engine.match_struct_center_get, _an_engine.match_struct_center_set, doc=r"""center : a(3).double""")
    radius = property(_an_engine.match_struct_radius_get, _an_engine.match_struct_radius_set, doc=r"""radius : double""")
    radius_deg = property(_an_engine.match_struct_radius_deg_get, _an_engine.match_struct_radius_deg_set, doc=r"""radius_deg : double""")
    wcs_valid = property(_an_engine.match_struct_wcs_valid_get, _an_engine.match_struct_wcs_valid_set, doc=r"""wcs_valid : anbool""")
    wcstan = property(_an_engine.match_struct_wcstan_get, _an_engine.match_struct_wcstan_set, doc=r"""wcstan : tan_t""")
    scale = property(_an_engine.match_struct_scale_get, _an_engine.match_struct_scale_set, doc=r"""scale : double""")
    quad_npeers = property(_an_engine.match_struct_quad_npeers_get, _an_engine.match_struct_quad_npeers_set, doc=r"""quad_npeers : int16_t""")
    nmatch = property(_an_engine.match_struct_nmatch_get, _an_engine.match_struct_nmatch_set, doc=r"""nmatch : int""")
    ndistractor = property(_an_engine.match_struct_ndistractor_get, _an_engine.match_struct_ndistractor_set, doc=r"""ndistractor : int""")
    nconflict = property(_an_engine.match_struct_nconflict_get, _an_engine.match_struct_nconflict_set, doc=r"""nconflict : int""")
    nfield = property(_an_engine.match_struct_nfield_get, _an_engine.match_struct_nfield_set, doc=r"""nfield : int""")
    nindex = property(_an_engine.match_struct_nindex_get, _an_engine.match_struct_nindex_set, doc=r"""nindex : int""")
    nbest = property(_an_engine.match_struct_nbest_get, _an_engine.match_struct_nbest_set, doc=r"""nbest : int""")
    logodds = property(_an_engine.match_struct_logodds_get, _an_engine.match_struct_logodds_set, doc=r"""logodds : float""")
    worstlogodds = property(_an_engine.match_struct_worstlogodds_get, _an_engine.match_struct_worstlogodds_set, doc=r"""worstlogodds : float""")
    nagree = property(_an_engine.match_struct_nagree_get, _an_engine.match_struct_nagree_set, doc=r"""nagree : int16_t""")
    fieldnum = property(_an_engine.match_struct_fieldnum_get, _an_engine.match_struct_fieldnum_set, doc=r"""fieldnum : int""")
    fieldfile = property(_an_engine.match_struct_fieldfile_get, _an_engine.match_struct_fieldfile_set, doc=r"""fieldfile : int""")
    indexid = property(_an_engine.match_struct_indexid_get, _an_engine.match_struct_indexid_set, doc=r"""indexid : int16_t""")
    healpix = property(_an_engine.match_struct_healpix_get, _an_engine.match_struct_healpix_set, doc=r"""healpix : int16_t""")
    hpnside = property(_an_engine.match_struct_hpnside_get, _an_engine.match_struct_hpnside_set, doc=r"""hpnside : int16_t""")
    fieldname = property(_an_engine.match_struct_fieldname_get, _an_engine.match_struct_fieldname_set, doc=r"""fieldname : a(32).char""")
    parity = property(_an_engine.match_struct_parity_get, _an_engine.match_struct_parity_set, doc=r"""parity : anbool""")
    quads_tried = property(_an_engine.match_struct_quads_tried_get, _an_engine.match_struct_quads_tried_set, doc=r"""quads_tried : int""")
    quads_matched = property(_an_engine.match_struct_quads_matched_get, _an_engine.match_struct_quads_matched_set, doc=r"""quads_matched : int""")
    quads_scaleok = property(_an_engine.match_struct_quads_scaleok_get, _an_engine.match_struct_quads_scaleok_set, doc=r"""quads_scaleok : int""")
    objs_tried = property(_an_engine.match_struct_objs_tried_get, _an_engine.match_struct_objs_tried_set, doc=r"""objs_tried : int""")
    nverified = property(_an_engine.match_struct_nverified_get, _an_engine.match_struct_nverified_set, doc=r"""nverified : int""")
    timeused = property(_an_engine.match_struct_timeused_get, _an_engine.match_struct_timeused_set, doc=r"""timeused : float""")
    sip = property(_an_engine.match_struct_sip_get, _an_engine.match_struct_sip_set, doc=r"""sip : p.sip_t""")
    refradec = property(_an_engine.match_struct_refradec_get, _an_engine.match_struct_refradec_set, doc=r"""refradec : p.double""")
    fieldxy = property(_an_engine.match_struct_fieldxy_get, _an_engine.match_struct_fieldxy_set, doc=r"""fieldxy : p.double""")
    fieldxy_orig = property(_an_engine.match_struct_fieldxy_orig_get, _an_engine.match_struct_fieldxy_orig_set, doc=r"""fieldxy_orig : p.double""")
    tagalong = property(_an_engine.match_struct_tagalong_get, _an_engine.match_struct_tagalong_set, doc=r"""tagalong : p.bl""")
    field_tagalong = property(_an_engine.match_struct_field_tagalong_get, _an_engine.match_struct_field_tagalong_set, doc=r"""field_tagalong : p.bl""")
    index_jitter = property(_an_engine.match_struct_index_jitter_get, _an_engine.match_struct_index_jitter_set, doc=r"""index_jitter : double""")
    index = property(_an_engine.match_struct_index_get, _an_engine.match_struct_index_set, doc=r"""index : p.index_t""")
    theta = property(_an_engine.match_struct_theta_get, _an_engine.match_struct_theta_set, doc=r"""theta : p.int""")
    matchodds = property(_an_engine.match_struct_matchodds_get, _an_engine.match_struct_matchodds_set, doc=r"""matchodds : p.double""")
    testperm = property(_an_engine.match_struct_testperm_get, _an_engine.match_struct_testperm_set, doc=r"""testperm : p.int""")
    refxyz = property(_an_engine.match_struct_refxyz_get, _an_engine.match_struct_refxyz_set, doc=r"""refxyz : p.double""")
    refxy = property(_an_engine.match_struct_refxy_get, _an_engine.match_struct_refxy_set, doc=r"""refxy : p.double""")
    refstarid = property(_an_engine.match_struct_refstarid_get, _an_engine.match_struct_refstarid_set, doc=r"""refstarid : p.int""")

    def __init__(self):
        r"""__init__(match_struct self) -> match_struct"""
        _an_engine.match_struct_swiginit(self, _an_engine.new_match_struct())
    __swig_destroy__ = _an_engine.delete_match_struct

# Register match_struct in _an_engine:
_an_engine.match_struct_swigregister(match_struct)


def matchobj_compute_derived(mo):
    r"""matchobj_compute_derived(match_struct mo)"""
    return _an_engine.matchobj_compute_derived(mo)

def matchobj_get_index_name(mo):
    r"""matchobj_get_index_name(match_struct mo) -> char const *"""
    return _an_engine.matchobj_get_index_name(mo)

def matchobj_log_hit_miss(nbest, nfield, loglevel, prefix):
    r"""matchobj_log_hit_miss(int nbest, int nfield, int loglevel, char const * prefix)"""
    return _an_engine.matchobj_log_hit_miss(nbest, nfield, loglevel, prefix)

def matchobj_hit_miss_string(nbest, nfield, target):
    r"""matchobj_hit_miss_string(int nbest, int nfield, char * target) -> char *"""
    return _an_engine.matchobj_hit_miss_string(nbest, nfield, target)

def matchobj_print(mo, loglvl):
    r"""matchobj_print(match_struct mo, int loglvl)"""
    return _an_engine.matchobj_print(mo, loglvl)
PARITY_NORMAL = _an_engine.PARITY_NORMAL

PARITY_FLIP = _an_engine.PARITY_FLIP

PARITY_BOTH = _an_engine.PARITY_BOTH

DEFAULT_CODE_TOL = _an_engine.DEFAULT_CODE_TOL

DEFAULT_TWEAK_ABORDER = _an_engine.DEFAULT_TWEAK_ABORDER

DEFAULT_TWEAK_ABPORDER = _an_engine.DEFAULT_TWEAK_ABPORDER

DEFAULT_DISTRACTOR_RATIO = _an_engine.DEFAULT_DISTRACTOR_RATIO

DEFAULT_VERIFY_PIX = _an_engine.DEFAULT_VERIFY_PIX

DEFAULT_BAIL_THRESHOLD = _an_engine.DEFAULT_BAIL_THRESHOLD

class solver_t(object):
    r"""Proxy of C solver_t struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    indexes = property(_an_engine.solver_t_indexes_get, _an_engine.solver_t_indexes_set, doc=r"""indexes : p.pl""")
    fieldxy = property(_an_engine.solver_t_fieldxy_get, _an_engine.solver_t_fieldxy_set, doc=r"""fieldxy : p.starxy_t""")
    pixel_xscale = property(_an_engine.solver_t_pixel_xscale_get, _an_engine.solver_t_pixel_xscale_set, doc=r"""pixel_xscale : double""")
    predistort = property(_an_engine.solver_t_predistort_get, _an_engine.solver_t_predistort_set, doc=r"""predistort : p.sip_t""")
    fieldxy_orig = property(_an_engine.solver_t_fieldxy_orig_get, _an_engine.solver_t_fieldxy_orig_set, doc=r"""fieldxy_orig : p.starxy_t""")
    funits_lower = property(_an_engine.solver_t_funits_lower_get, _an_engine.solver_t_funits_lower_set, doc=r"""funits_lower : double""")
    funits_upper = property(_an_engine.solver_t_funits_upper_get, _an_engine.solver_t_funits_upper_set, doc=r"""funits_upper : double""")
    logratio_toprint = property(_an_engine.solver_t_logratio_toprint_get, _an_engine.solver_t_logratio_toprint_set, doc=r"""logratio_toprint : double""")
    logratio_tokeep = property(_an_engine.solver_t_logratio_tokeep_get, _an_engine.solver_t_logratio_tokeep_set, doc=r"""logratio_tokeep : double""")
    logratio_totune = property(_an_engine.solver_t_logratio_totune_get, _an_engine.solver_t_logratio_totune_set, doc=r"""logratio_totune : double""")
    record_match_callback = property(_an_engine.solver_t_record_match_callback_get, _an_engine.solver_t_record_match_callback_set, doc=r"""record_match_callback : p.f(p.MatchObj,p.void).anbool""")
    userdata = property(_an_engine.solver_t_userdata_get, _an_engine.solver_t_userdata_set, doc=r"""userdata : p.void""")
    distance_from_quad_bonus = property(_an_engine.solver_t_distance_from_quad_bonus_get, _an_engine.solver_t_distance_from_quad_bonus_set, doc=r"""distance_from_quad_bonus : anbool""")
    verify_uniformize = property(_an_engine.solver_t_verify_uniformize_get, _an_engine.solver_t_verify_uniformize_set, doc=r"""verify_uniformize : anbool""")
    verify_dedup = property(_an_engine.solver_t_verify_dedup_get, _an_engine.solver_t_verify_dedup_set, doc=r"""verify_dedup : anbool""")
    do_tweak = property(_an_engine.solver_t_do_tweak_get, _an_engine.solver_t_do_tweak_set, doc=r"""do_tweak : anbool""")
    tweak_aborder = property(_an_engine.solver_t_tweak_aborder_get, _an_engine.solver_t_tweak_aborder_set, doc=r"""tweak_aborder : int""")
    tweak_abporder = property(_an_engine.solver_t_tweak_abporder_get, _an_engine.solver_t_tweak_abporder_set, doc=r"""tweak_abporder : int""")
    verify_pix = property(_an_engine.solver_t_verify_pix_get, _an_engine.solver_t_verify_pix_set, doc=r"""verify_pix : double""")
    distractor_ratio = property(_an_engine.solver_t_distractor_ratio_get, _an_engine.solver_t_distractor_ratio_set, doc=r"""distractor_ratio : double""")
    codetol = property(_an_engine.solver_t_codetol_get, _an_engine.solver_t_codetol_set, doc=r"""codetol : double""")
    quadsize_min = property(_an_engine.solver_t_quadsize_min_get, _an_engine.solver_t_quadsize_min_set, doc=r"""quadsize_min : double""")
    quadsize_max = property(_an_engine.solver_t_quadsize_max_get, _an_engine.solver_t_quadsize_max_set, doc=r"""quadsize_max : double""")
    startobj = property(_an_engine.solver_t_startobj_get, _an_engine.solver_t_startobj_set, doc=r"""startobj : int""")
    endobj = property(_an_engine.solver_t_endobj_get, _an_engine.solver_t_endobj_set, doc=r"""endobj : int""")
    parity = property(_an_engine.solver_t_parity_get, _an_engine.solver_t_parity_set, doc=r"""parity : int""")
    use_radec = property(_an_engine.solver_t_use_radec_get, _an_engine.solver_t_use_radec_set, doc=r"""use_radec : anbool""")
    centerxyz = property(_an_engine.solver_t_centerxyz_get, _an_engine.solver_t_centerxyz_set, doc=r"""centerxyz : a(3).double""")
    r2 = property(_an_engine.solver_t_r2_get, _an_engine.solver_t_r2_set, doc=r"""r2 : double""")
    logratio_bail_threshold = property(_an_engine.solver_t_logratio_bail_threshold_get, _an_engine.solver_t_logratio_bail_threshold_set, doc=r"""logratio_bail_threshold : double""")
    logratio_stoplooking = property(_an_engine.solver_t_logratio_stoplooking_get, _an_engine.solver_t_logratio_stoplooking_set, doc=r"""logratio_stoplooking : double""")
    maxquads = property(_an_engine.solver_t_maxquads_get, _an_engine.solver_t_maxquads_set, doc=r"""maxquads : int""")
    maxmatches = property(_an_engine.solver_t_maxmatches_get, _an_engine.solver_t_maxmatches_set, doc=r"""maxmatches : int""")
    set_crpix = property(_an_engine.solver_t_set_crpix_get, _an_engine.solver_t_set_crpix_set, doc=r"""set_crpix : anbool""")
    set_crpix_center = property(_an_engine.solver_t_set_crpix_center_get, _an_engine.solver_t_set_crpix_center_set, doc=r"""set_crpix_center : anbool""")
    crpix = property(_an_engine.solver_t_crpix_get, _an_engine.solver_t_crpix_set, doc=r"""crpix : a(2).double""")
    mo_template = property(_an_engine.solver_t_mo_template_get, _an_engine.solver_t_mo_template_set, doc=r"""mo_template : p.MatchObj""")
    timer_callback = property(_an_engine.solver_t_timer_callback_get, _an_engine.solver_t_timer_callback_set, doc=r"""timer_callback : p.f(p.void).time_t""")
    quit_now = property(_an_engine.solver_t_quit_now_get, _an_engine.solver_t_quit_now_set, doc=r"""quit_now : anbool""")
    numtries = property(_an_engine.solver_t_numtries_get, _an_engine.solver_t_numtries_set, doc=r"""numtries : int""")
    nummatches = property(_an_engine.solver_t_nummatches_get, _an_engine.solver_t_nummatches_set, doc=r"""nummatches : int""")
    numscaleok = property(_an_engine.solver_t_numscaleok_get, _an_engine.solver_t_numscaleok_set, doc=r"""numscaleok : int""")
    last_examined_object = property(_an_engine.solver_t_last_examined_object_get, _an_engine.solver_t_last_examined_object_set, doc=r"""last_examined_object : int""")
    num_cxdx_skipped = property(_an_engine.solver_t_num_cxdx_skipped_get, _an_engine.solver_t_num_cxdx_skipped_set, doc=r"""num_cxdx_skipped : int""")
    num_meanx_skipped = property(_an_engine.solver_t_num_meanx_skipped_get, _an_engine.solver_t_num_meanx_skipped_set, doc=r"""num_meanx_skipped : int""")
    num_radec_skipped = property(_an_engine.solver_t_num_radec_skipped_get, _an_engine.solver_t_num_radec_skipped_set, doc=r"""num_radec_skipped : int""")
    num_abscale_skipped = property(_an_engine.solver_t_num_abscale_skipped_get, _an_engine.solver_t_num_abscale_skipped_set, doc=r"""num_abscale_skipped : int""")
    num_verified = property(_an_engine.solver_t_num_verified_get, _an_engine.solver_t_num_verified_set, doc=r"""num_verified : int""")
    index = property(_an_engine.solver_t_index_get, _an_engine.solver_t_index_set, doc=r"""index : p.index_t""")
    minminAB2 = property(_an_engine.solver_t_minminAB2_get, _an_engine.solver_t_minminAB2_set, doc=r"""minminAB2 : double""")
    maxmaxAB2 = property(_an_engine.solver_t_maxmaxAB2_get, _an_engine.solver_t_maxmaxAB2_set, doc=r"""maxmaxAB2 : double""")
    rel_index_noise2 = property(_an_engine.solver_t_rel_index_noise2_get, _an_engine.solver_t_rel_index_noise2_set, doc=r"""rel_index_noise2 : double""")
    rel_field_noise2 = property(_an_engine.solver_t_rel_field_noise2_get, _an_engine.solver_t_rel_field_noise2_set, doc=r"""rel_field_noise2 : double""")
    abscale_low = property(_an_engine.solver_t_abscale_low_get, _an_engine.solver_t_abscale_low_set, doc=r"""abscale_low : double""")
    abscale_high = property(_an_engine.solver_t_abscale_high_get, _an_engine.solver_t_abscale_high_set, doc=r"""abscale_high : double""")
    field_minx = property(_an_engine.solver_t_field_minx_get, _an_engine.solver_t_field_minx_set, doc=r"""field_minx : double""")
    field_maxx = property(_an_engine.solver_t_field_maxx_get, _an_engine.solver_t_field_maxx_set, doc=r"""field_maxx : double""")
    field_miny = property(_an_engine.solver_t_field_miny_get, _an_engine.solver_t_field_miny_set, doc=r"""field_miny : double""")
    field_maxy = property(_an_engine.solver_t_field_maxy_get, _an_engine.solver_t_field_maxy_set, doc=r"""field_maxy : double""")
    field_diag = property(_an_engine.solver_t_field_diag_get, _an_engine.solver_t_field_diag_set, doc=r"""field_diag : double""")
    cxdx_margin = property(_an_engine.solver_t_cxdx_margin_get, _an_engine.solver_t_cxdx_margin_set, doc=r"""cxdx_margin : double""")
    starttime = property(_an_engine.solver_t_starttime_get, _an_engine.solver_t_starttime_set, doc=r"""starttime : double""")
    timeused = property(_an_engine.solver_t_timeused_get, _an_engine.solver_t_timeused_set, doc=r"""timeused : double""")
    best_logodds = property(_an_engine.solver_t_best_logodds_get, _an_engine.solver_t_best_logodds_set, doc=r"""best_logodds : double""")
    best_match = property(_an_engine.solver_t_best_match_get, _an_engine.solver_t_best_match_set, doc=r"""best_match : MatchObj""")
    best_index = property(_an_engine.solver_t_best_index_get, _an_engine.solver_t_best_index_set, doc=r"""best_index : p.index_t""")
    best_match_solves = property(_an_engine.solver_t_best_match_solves_get, _an_engine.solver_t_best_match_solves_set, doc=r"""best_match_solves : anbool""")
    have_best_match = property(_an_engine.solver_t_have_best_match_get, _an_engine.solver_t_have_best_match_set, doc=r"""have_best_match : anbool""")
    vf = property(_an_engine.solver_t_vf_get, _an_engine.solver_t_vf_set, doc=r"""vf : p.verify_field_t""")

    def __init__(self):
        r"""__init__(solver_t self) -> solver_t"""
        _an_engine.solver_t_swiginit(self, _an_engine.new_solver_t())
    __swig_destroy__ = _an_engine.delete_solver_t

# Register solver_t in _an_engine:
_an_engine.solver_t_swigregister(solver_t)


def solver_new():
    r"""solver_new() -> solver_t"""
    return _an_engine.solver_new()

def solver_set_default_values(solver):
    r"""solver_set_default_values(solver_t solver)"""
    return _an_engine.solver_set_default_values(solver)

def solver_get_field_jitter(solver):
    r"""solver_get_field_jitter(solver_t solver) -> double"""
    return _an_engine.solver_get_field_jitter(solver)

def solver_set_keep_logodds(solver, logodds):
    r"""solver_set_keep_logodds(solver_t solver, double logodds)"""
    return _an_engine.solver_set_keep_logodds(solver, logodds)

def solver_set_parity(solver, parity):
    r"""solver_set_parity(solver_t solver, int parity) -> int"""
    return _an_engine.solver_set_parity(solver, parity)

def solver_get_field_center(solver):
    r"""solver_get_field_center(solver_t solver)"""
    return _an_engine.solver_get_field_center(solver)

def solver_get_max_radius_arcsec(solver):
    r"""solver_get_max_radius_arcsec(solver_t solver) -> double"""
    return _an_engine.solver_get_max_radius_arcsec(solver)

def solver_get_best_match(solver):
    r"""solver_get_best_match(solver_t solver) -> match_struct"""
    return _an_engine.solver_get_best_match(solver)

def solver_did_solve(solver):
    r"""solver_did_solve(solver_t solver) -> anbool"""
    return _an_engine.solver_did_solve(solver)

def solver_get_best_match_index_name(solver):
    r"""solver_get_best_match_index_name(solver_t solver) -> char const *"""
    return _an_engine.solver_get_best_match_index_name(solver)

def solver_get_pixscale_low(solver):
    r"""solver_get_pixscale_low(solver_t solver) -> double"""
    return _an_engine.solver_get_pixscale_low(solver)

def solver_get_pixscale_high(solver):
    r"""solver_get_pixscale_high(solver_t solver) -> double"""
    return _an_engine.solver_get_pixscale_high(solver)

def solver_set_quad_size_range(solver, qmin, qmax):
    r"""solver_set_quad_size_range(solver_t solver, double qmin, double qmax)"""
    return _an_engine.solver_set_quad_size_range(solver, qmin, qmax)

def solver_set_quad_size_fraction(solver, qmin, qmax):
    r"""solver_set_quad_size_fraction(solver_t solver, double qmin, double qmax)"""
    return _an_engine.solver_set_quad_size_fraction(solver, qmin, qmax)

def solver_get_quad_size_range_arcsec(solver):
    r"""solver_get_quad_size_range_arcsec(solver_t solver)"""
    return _an_engine.solver_get_quad_size_range_arcsec(solver)

def solver_free(arg1):
    r"""solver_free(solver_t arg1)"""
    return _an_engine.solver_free(arg1)

def solver_set_field(s, field):
    r"""solver_set_field(solver_t s, starxy_t field)"""
    return _an_engine.solver_set_field(s, field)

def solver_get_field(solver):
    r"""solver_get_field(solver_t solver) -> starxy_t"""
    return _an_engine.solver_get_field(solver)

def solver_reset_field_size(s):
    r"""solver_reset_field_size(solver_t s)"""
    return _an_engine.solver_reset_field_size(s)

def solver_set_radec(s, ra, dec, radius_deg):
    r"""solver_set_radec(solver_t s, double ra, double dec, double radius_deg)"""
    return _an_engine.solver_set_radec(s, ra, dec, radius_deg)

def solver_clear_radec(s):
    r"""solver_clear_radec(solver_t s)"""
    return _an_engine.solver_clear_radec(s)

def solver_set_field_bounds(s, xlo, xhi, ylo, yhi):
    r"""solver_set_field_bounds(solver_t s, double xlo, double xhi, double ylo, double yhi)"""
    return _an_engine.solver_set_field_bounds(s, xlo, xhi, ylo, yhi)

def solver_cleanup_field(arg1):
    r"""solver_cleanup_field(solver_t arg1)"""
    return _an_engine.solver_cleanup_field(arg1)

def solver_field_width(t):
    r"""solver_field_width(solver_t t) -> double"""
    return _an_engine.solver_field_width(t)

def solver_field_height(t):
    r"""solver_field_height(solver_t t) -> double"""
    return _an_engine.solver_field_height(t)

def solver_add_index(solver, index):
    r"""solver_add_index(solver_t solver, index_t index)"""
    return _an_engine.solver_add_index(solver, index)

def solver_clear_indexes(solver):
    r"""solver_clear_indexes(solver_t solver)"""
    return _an_engine.solver_clear_indexes(solver)

def solver_n_indices(solver):
    r"""solver_n_indices(solver_t solver) -> int"""
    return _an_engine.solver_n_indices(solver)

def solver_get_index(solver, i):
    r"""solver_get_index(solver_t solver, int i) -> index_t"""
    return _an_engine.solver_get_index(solver, i)

def solver_verify_sip_wcs(solver, sip):
    r"""solver_verify_sip_wcs(solver_t solver, sip_t sip)"""
    return _an_engine.solver_verify_sip_wcs(solver, sip)

def solver_run(solver):
    r"""solver_run(solver_t solver)"""
    return _an_engine.solver_run(solver)
SOLVER_TWEAK2_AVAILABLE = _an_engine.SOLVER_TWEAK2_AVAILABLE


def solver_tweak2(solver, mo, order, verifysip):
    r"""solver_tweak2(solver_t solver, match_struct mo, int order, sip_t verifysip)"""
    return _an_engine.solver_tweak2(solver, mo, order, verifysip)

def solver_cleanup(solver):
    r"""solver_cleanup(solver_t solver)"""
    return _an_engine.solver_cleanup(solver)

def solver_preprocess_field(sp):
    r"""solver_preprocess_field(solver_t sp)"""
    return _an_engine.solver_preprocess_field(sp)

def solver_free_field(sp):
    r"""solver_free_field(solver_t sp)"""
    return _an_engine.solver_free_field(sp)

def solver_inject_match(solver, mo, sip):
    r"""solver_inject_match(solver_t solver, match_struct mo, sip_t sip)"""
    return _an_engine.solver_inject_match(solver, mo, sip)

def solver_compute_quad_range(solver, index):
    r"""solver_compute_quad_range(solver_t solver, index_t index)"""
    return _an_engine.solver_compute_quad_range(solver, index)

def solver_reset_counters(t):
    r"""solver_reset_counters(solver_t t)"""
    return _an_engine.solver_reset_counters(t)

def solver_reset_best_match(sp):
    r"""solver_reset_best_match(solver_t sp)"""
    return _an_engine.solver_reset_best_match(sp)

def solver_print_to(sp, stream):
    r"""solver_print_to(solver_t sp, FILE * stream)"""
    return _an_engine.solver_print_to(sp, stream)

def solver_log_params(sp):
    r"""solver_log_params(solver_t sp)"""
    return _an_engine.solver_log_params(sp)

def tweak2(fieldxy, Nfield, fieldjitter, W, H, indexradec, Nindex, indexjitter, quadcenter, quadR2, distractors, logodds_bail, sip_order, sip_invorder, startwcs, destwcs, newtheta, newodds, startorder):
    r"""tweak2(double const * fieldxy, int Nfield, double fieldjitter, int W, int H, double const * indexradec, int Nindex, double indexjitter, double const * quadcenter, double quadR2, double distractors, double logodds_bail, int sip_order, int sip_invorder, sip_t startwcs, sip_t destwcs, int ** newtheta, double ** newodds, int startorder) -> sip_t"""
    return _an_engine.tweak2(fieldxy, Nfield, fieldjitter, W, H, indexradec, Nindex, indexjitter, quadcenter, quadR2, distractors, logodds_bail, sip_order, sip_invorder, startwcs, destwcs, newtheta, newodds, startorder)

def healpix_distance_to_radec(hp, Nside, ra, dec):
    r"""healpix_distance_to_radec(int hp, int Nside, double ra, double dec) -> double"""
    return _an_engine.healpix_distance_to_radec(hp, Nside, ra, dec)

def healpix_within_range_of_radec(hp, Nside, ra, dec, radius):
    r"""healpix_within_range_of_radec(int hp, int Nside, double ra, double dec, double radius) -> int"""
    return _an_engine.healpix_within_range_of_radec(hp, Nside, ra, dec, radius)

def log_init(arg1):
    r"""log_init(int arg1)"""
    return _an_engine.log_init(arg1)


