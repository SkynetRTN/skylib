# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RCRLib', [dirname(__file__)])
        except ImportError:
            import _RCRLib
            return _RCRLib
        if fp is not None:
            try:
                _mod = imp.load_module('_RCRLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RCRLib = swig_import_helper()
    del swig_import_helper
else:
    import _RCRLib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RCRLib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _RCRLib.SwigPyIterator_value(self)
    def incr(self, n = 1): return _RCRLib.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _RCRLib.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _RCRLib.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _RCRLib.SwigPyIterator_equal(self, *args)
    def copy(self): return _RCRLib.SwigPyIterator_copy(self)
    def next(self): return _RCRLib.SwigPyIterator_next(self)
    def __next__(self): return _RCRLib.SwigPyIterator___next__(self)
    def previous(self): return _RCRLib.SwigPyIterator_previous(self)
    def advance(self, *args): return _RCRLib.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _RCRLib.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _RCRLib.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _RCRLib.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _RCRLib.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _RCRLib.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _RCRLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _RCRLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DubVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DubVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DubVec, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCRLib.DubVec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCRLib.DubVec___nonzero__(self)
    def __bool__(self): return _RCRLib.DubVec___bool__(self)
    def __len__(self): return _RCRLib.DubVec___len__(self)
    def pop(self): return _RCRLib.DubVec_pop(self)
    def __getslice__(self, *args): return _RCRLib.DubVec___getslice__(self, *args)
    def __setslice__(self, *args): return _RCRLib.DubVec___setslice__(self, *args)
    def __delslice__(self, *args): return _RCRLib.DubVec___delslice__(self, *args)
    def __delitem__(self, *args): return _RCRLib.DubVec___delitem__(self, *args)
    def __getitem__(self, *args): return _RCRLib.DubVec___getitem__(self, *args)
    def __setitem__(self, *args): return _RCRLib.DubVec___setitem__(self, *args)
    def append(self, *args): return _RCRLib.DubVec_append(self, *args)
    def empty(self): return _RCRLib.DubVec_empty(self)
    def size(self): return _RCRLib.DubVec_size(self)
    def clear(self): return _RCRLib.DubVec_clear(self)
    def swap(self, *args): return _RCRLib.DubVec_swap(self, *args)
    def get_allocator(self): return _RCRLib.DubVec_get_allocator(self)
    def begin(self): return _RCRLib.DubVec_begin(self)
    def end(self): return _RCRLib.DubVec_end(self)
    def rbegin(self): return _RCRLib.DubVec_rbegin(self)
    def rend(self): return _RCRLib.DubVec_rend(self)
    def pop_back(self): return _RCRLib.DubVec_pop_back(self)
    def erase(self, *args): return _RCRLib.DubVec_erase(self, *args)
    def __init__(self, *args): 
        this = _RCRLib.new_DubVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCRLib.DubVec_push_back(self, *args)
    def front(self): return _RCRLib.DubVec_front(self)
    def back(self): return _RCRLib.DubVec_back(self)
    def assign(self, *args): return _RCRLib.DubVec_assign(self, *args)
    def resize(self, *args): return _RCRLib.DubVec_resize(self, *args)
    def insert(self, *args): return _RCRLib.DubVec_insert(self, *args)
    def reserve(self, *args): return _RCRLib.DubVec_reserve(self, *args)
    def capacity(self): return _RCRLib.DubVec_capacity(self)
    __swig_destroy__ = _RCRLib.delete_DubVec
    __del__ = lambda self : None;
DubVec_swigregister = _RCRLib.DubVec_swigregister
DubVec_swigregister(DubVec)

class BoolVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVec, name)
    __repr__ = _swig_repr
    def iterator(self): return _RCRLib.BoolVec_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _RCRLib.BoolVec___nonzero__(self)
    def __bool__(self): return _RCRLib.BoolVec___bool__(self)
    def __len__(self): return _RCRLib.BoolVec___len__(self)
    def pop(self): return _RCRLib.BoolVec_pop(self)
    def __getslice__(self, *args): return _RCRLib.BoolVec___getslice__(self, *args)
    def __setslice__(self, *args): return _RCRLib.BoolVec___setslice__(self, *args)
    def __delslice__(self, *args): return _RCRLib.BoolVec___delslice__(self, *args)
    def __delitem__(self, *args): return _RCRLib.BoolVec___delitem__(self, *args)
    def __getitem__(self, *args): return _RCRLib.BoolVec___getitem__(self, *args)
    def __setitem__(self, *args): return _RCRLib.BoolVec___setitem__(self, *args)
    def append(self, *args): return _RCRLib.BoolVec_append(self, *args)
    def empty(self): return _RCRLib.BoolVec_empty(self)
    def size(self): return _RCRLib.BoolVec_size(self)
    def clear(self): return _RCRLib.BoolVec_clear(self)
    def swap(self, *args): return _RCRLib.BoolVec_swap(self, *args)
    def get_allocator(self): return _RCRLib.BoolVec_get_allocator(self)
    def begin(self): return _RCRLib.BoolVec_begin(self)
    def end(self): return _RCRLib.BoolVec_end(self)
    def rbegin(self): return _RCRLib.BoolVec_rbegin(self)
    def rend(self): return _RCRLib.BoolVec_rend(self)
    def pop_back(self): return _RCRLib.BoolVec_pop_back(self)
    def erase(self, *args): return _RCRLib.BoolVec_erase(self, *args)
    def __init__(self, *args): 
        this = _RCRLib.new_BoolVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _RCRLib.BoolVec_push_back(self, *args)
    def front(self): return _RCRLib.BoolVec_front(self)
    def back(self): return _RCRLib.BoolVec_back(self)
    def assign(self, *args): return _RCRLib.BoolVec_assign(self, *args)
    def resize(self, *args): return _RCRLib.BoolVec_resize(self, *args)
    def insert(self, *args): return _RCRLib.BoolVec_insert(self, *args)
    def reserve(self, *args): return _RCRLib.BoolVec_reserve(self, *args)
    def capacity(self): return _RCRLib.BoolVec_capacity(self)
    __swig_destroy__ = _RCRLib.delete_BoolVec
    __del__ = lambda self : None;
BoolVec_swigregister = _RCRLib.BoolVec_swigregister
BoolVec_swigregister(BoolVec)

MEAN = _RCRLib.MEAN
MEDIAN = _RCRLib.MEDIAN
MODE = _RCRLib.MODE
STANDARD_DEVIATION = _RCRLib.STANDARD_DEVIATION
SIXTY_EIGHTH_PERCENTILE = _RCRLib.SIXTY_EIGHTH_PERCENTILE
SINGLE_LINE = _RCRLib.SINGLE_LINE
DOUBLE_LINE = _RCRLib.DOUBLE_LINE
SINGLE = _RCRLib.SINGLE
LOWER = _RCRLib.LOWER
EACH = _RCRLib.EACH
SS_MEDIAN_DL = _RCRLib.SS_MEDIAN_DL
LS_MODE_68 = _RCRLib.LS_MODE_68
LS_MODE_DL = _RCRLib.LS_MODE_DL
ES_MODE_DL = _RCRLib.ES_MODE_DL
VALUE = _RCRLib.VALUE
PARAMETRIC = _RCRLib.PARAMETRIC
NONPARAMETRIC = _RCRLib.NONPARAMETRIC
class RCRResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCRResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCRResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mu"] = _RCRLib.RCRResults_mu_set
    __swig_getmethods__["mu"] = _RCRLib.RCRResults_mu_get
    if _newclass:mu = _swig_property(_RCRLib.RCRResults_mu_get, _RCRLib.RCRResults_mu_set)
    __swig_setmethods__["stDev"] = _RCRLib.RCRResults_stDev_set
    __swig_getmethods__["stDev"] = _RCRLib.RCRResults_stDev_get
    if _newclass:stDev = _swig_property(_RCRLib.RCRResults_stDev_get, _RCRLib.RCRResults_stDev_set)
    __swig_setmethods__["stDevBelow"] = _RCRLib.RCRResults_stDevBelow_set
    __swig_getmethods__["stDevBelow"] = _RCRLib.RCRResults_stDevBelow_get
    if _newclass:stDevBelow = _swig_property(_RCRLib.RCRResults_stDevBelow_get, _RCRLib.RCRResults_stDevBelow_set)
    __swig_setmethods__["stDevAbove"] = _RCRLib.RCRResults_stDevAbove_set
    __swig_getmethods__["stDevAbove"] = _RCRLib.RCRResults_stDevAbove_get
    if _newclass:stDevAbove = _swig_property(_RCRLib.RCRResults_stDevAbove_get, _RCRLib.RCRResults_stDevAbove_set)
    __swig_setmethods__["stDevTotal"] = _RCRLib.RCRResults_stDevTotal_set
    __swig_getmethods__["stDevTotal"] = _RCRLib.RCRResults_stDevTotal_get
    if _newclass:stDevTotal = _swig_property(_RCRLib.RCRResults_stDevTotal_get, _RCRLib.RCRResults_stDevTotal_set)
    __swig_setmethods__["sigma"] = _RCRLib.RCRResults_sigma_set
    __swig_getmethods__["sigma"] = _RCRLib.RCRResults_sigma_get
    if _newclass:sigma = _swig_property(_RCRLib.RCRResults_sigma_get, _RCRLib.RCRResults_sigma_set)
    __swig_setmethods__["sigmaBelow"] = _RCRLib.RCRResults_sigmaBelow_set
    __swig_getmethods__["sigmaBelow"] = _RCRLib.RCRResults_sigmaBelow_get
    if _newclass:sigmaBelow = _swig_property(_RCRLib.RCRResults_sigmaBelow_get, _RCRLib.RCRResults_sigmaBelow_set)
    __swig_setmethods__["sigmaAbove"] = _RCRLib.RCRResults_sigmaAbove_set
    __swig_getmethods__["sigmaAbove"] = _RCRLib.RCRResults_sigmaAbove_get
    if _newclass:sigmaAbove = _swig_property(_RCRLib.RCRResults_sigmaAbove_get, _RCRLib.RCRResults_sigmaAbove_set)
    __swig_setmethods__["flags"] = _RCRLib.RCRResults_flags_set
    __swig_getmethods__["flags"] = _RCRLib.RCRResults_flags_get
    if _newclass:flags = _swig_property(_RCRLib.RCRResults_flags_get, _RCRLib.RCRResults_flags_set)
    __swig_setmethods__["indices"] = _RCRLib.RCRResults_indices_set
    __swig_getmethods__["indices"] = _RCRLib.RCRResults_indices_get
    if _newclass:indices = _swig_property(_RCRLib.RCRResults_indices_get, _RCRLib.RCRResults_indices_set)
    __swig_setmethods__["cleanW"] = _RCRLib.RCRResults_cleanW_set
    __swig_getmethods__["cleanW"] = _RCRLib.RCRResults_cleanW_get
    if _newclass:cleanW = _swig_property(_RCRLib.RCRResults_cleanW_get, _RCRLib.RCRResults_cleanW_set)
    __swig_setmethods__["cleanY"] = _RCRLib.RCRResults_cleanY_set
    __swig_getmethods__["cleanY"] = _RCRLib.RCRResults_cleanY_get
    if _newclass:cleanY = _swig_property(_RCRLib.RCRResults_cleanY_get, _RCRLib.RCRResults_cleanY_set)
    __swig_setmethods__["rejectedW"] = _RCRLib.RCRResults_rejectedW_set
    __swig_getmethods__["rejectedW"] = _RCRLib.RCRResults_rejectedW_get
    if _newclass:rejectedW = _swig_property(_RCRLib.RCRResults_rejectedW_get, _RCRLib.RCRResults_rejectedW_set)
    __swig_setmethods__["rejectedY"] = _RCRLib.RCRResults_rejectedY_set
    __swig_getmethods__["rejectedY"] = _RCRLib.RCRResults_rejectedY_get
    if _newclass:rejectedY = _swig_property(_RCRLib.RCRResults_rejectedY_get, _RCRLib.RCRResults_rejectedY_set)
    __swig_setmethods__["originalW"] = _RCRLib.RCRResults_originalW_set
    __swig_getmethods__["originalW"] = _RCRLib.RCRResults_originalW_get
    if _newclass:originalW = _swig_property(_RCRLib.RCRResults_originalW_get, _RCRLib.RCRResults_originalW_set)
    __swig_setmethods__["originalY"] = _RCRLib.RCRResults_originalY_set
    __swig_getmethods__["originalY"] = _RCRLib.RCRResults_originalY_get
    if _newclass:originalY = _swig_property(_RCRLib.RCRResults_originalY_get, _RCRLib.RCRResults_originalY_set)
    def __init__(self): 
        this = _RCRLib.new_RCRResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RCRLib.delete_RCRResults
    __del__ = lambda self : None;
RCRResults_swigregister = _RCRLib.RCRResults_swigregister
RCRResults_swigregister(RCRResults)
cvar = _RCRLib.cvar
PI = cvar.PI
inverfMult = cvar.inverfMult
squareRootOf2 = cvar.squareRootOf2

class RCR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RCRLib.new_RCR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["rejectionTech"] = _RCRLib.RCR_rejectionTech_set
    __swig_getmethods__["rejectionTech"] = _RCRLib.RCR_rejectionTech_get
    if _newclass:rejectionTech = _swig_property(_RCRLib.RCR_rejectionTech_get, _RCRLib.RCR_rejectionTech_set)
    __swig_setmethods__["result"] = _RCRLib.RCR_result_set
    __swig_getmethods__["result"] = _RCRLib.RCR_result_get
    if _newclass:result = _swig_property(_RCRLib.RCR_result_get, _RCRLib.RCR_result_set)
    __swig_destroy__ = _RCRLib.delete_RCR
    __del__ = lambda self : None;
    def setRejectionTech(self, *args): return _RCRLib.RCR_setRejectionTech(self, *args)
    def performRejection(self, *args): return _RCRLib.RCR_performRejection(self, *args)
    def performBulkRejection(self, *args): return _RCRLib.RCR_performBulkRejection(self, *args)
    def setParametricModel(self, *args): return _RCRLib.RCR_setParametricModel(self, *args)
    def setNonParametricModel(self, *args): return _RCRLib.RCR_setNonParametricModel(self, *args)
    def setInitialModel(self, *args): return _RCRLib.RCR_setInitialModel(self, *args)
    def setMuType(self, *args): return _RCRLib.RCR_setMuType(self, *args)
RCR_swigregister = _RCRLib.RCR_swigregister
RCR_swigregister(RCR)

# This file is compatible with both classic and new-style classes.


